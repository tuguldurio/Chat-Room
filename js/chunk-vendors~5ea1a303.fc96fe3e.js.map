{"version":3,"sources":["webpack:///./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"],"names":["stack","warn","msg","args","instance","length","component","appWarnHandler","appContext","config","warnHandler","trace","getComponentTrace","callWithErrorHandling","join","proxy","map","vnode","formatComponentName","type","warnArgs","push","formatTrace","console","currentVNode","normalizedStack","last","recurseCount","parentInstance","parent","logs","forEach","entry","i","formatTraceEntry","postfix","isRoot","open","close","props","formatProps","res","keys","Object","slice","key","formatProp","value","raw","JSON","stringify","name","fn","err","handleError","callWithAsyncErrorHandling","catch","values","throwInDev","contextVNode","cur","exposedInstance","errorInfo","errorCapturedHooks","ec","appErrorHandler","errorHandler","logError","error","isFlushing","isFlushPending","queue","flushIndex","pendingPreFlushCbs","activePreFlushCbs","preFlushIndex","pendingPostFlushCbs","activePostFlushCbs","postFlushIndex","resolvedPromise","Promise","resolve","currentFlushPromise","currentPreFlushParentJob","nextTick","p","then","this","bind","findInsertionIndex","job","start","end","jobId","getId","middle","middleJobId","queueJob","includes","allowRecurse","pos","splice","queueFlush","flushJobs","invalidateJob","indexOf","queueCb","cb","activeQueue","pendingQueue","index","queuePreFlushCb","queuePostFlushCb","flushPreFlushCbs","seen","parentJob","Set","flushPostFlushCbs","deduped","sort","a","b","id","Infinity","active","Map","create","emit","event","rawArgs","isModelListener","startsWith","modelArg","modifiersKey","number","trim","handlerName","handler","onceHandler","emitted","normalizeEmitsOptions","comp","asMixin","cache","emitsCache","cached","get","undefined","emits","normalized","hasExtends","extendEmits","normalizedFromExtend","mixins","extends","set","isEmitListener","options","replace","toLowerCase","currentRenderingInstance","currentScopeId","setCurrentRenderingInstance","prev","__scopeId","pushScopeId","popScopeId","withScopeId","_id","withCtx","ctx","isNonScopedSlot","_n","renderFnWithContext","_d","setBlockTracking","prevInstance","_c","renderComponentRoot","Component","withProxy","propsOptions","slots","attrs","render","renderCache","data","setupState","inheritAttrs","result","fallthroughAttrs","shapeFlag","proxyToUse","normalizeVNode","call","getFunctionalFallthrough","root","some","filterModelListeners","cloneVNode","dirs","concat","transition","blockStack","createVNode","Comment$1","shouldUpdateComponent","prevVNode","nextVNode","optimized","prevProps","children","prevChildren","nextProps","nextChildren","patchFlag","emitsOptions","$stable","hasPropsChanged","dynamicProps","nextKeys","updateHOCHostEl","el","subTree","isSuspense","__isSuspense","queueEffectWithSuspense","suspense","pendingBranch","effects","provide","currentInstance","provides","parentProvides","inject","defaultValue","treatDefaultAsFactory","arguments","watchEffect","effect","doWatch","INITIAL_WATCHER_VALUE","watch","source","immediate","deep","flush","onTrack","onTrigger","getter","cleanup","forceTrigger","isMultiSource","_shallow","s","traverse","isUnmounted","onInvalidate","baseGetter","runner","onStop","oldValue","newValue","v","scheduler","queuePostRenderEffect","isMounted","lazy","recordInstanceBoundEffect","instanceWatch","publicThis","createPathGetter","path","segments","split","has","add","useTransitionState","state","isLeaving","isUnmounting","leavingVNodes","onMounted","onBeforeUnmount","TransitionHookValidator","Function","Array","BaseTransitionImpl","mode","String","appear","Boolean","persisted","onBeforeEnter","onEnter","onAfterEnter","onEnterCancelled","onBeforeLeave","onLeave","onAfterLeave","onLeaveCancelled","onBeforeAppear","onAppear","onAfterAppear","onAppearCancelled","getCurrentInstance","prevTransitionKey","default","getTransitionRawChildren","rawProps","child","emptyPlaceholder","innerChild","getKeepAliveChild","enterHooks","resolveTransitionHooks","setTransitionHooks","oldChild","oldInnerChild","transitionKeyChanged","getTransitionKey","isSameVNodeType","leavingHooks","afterLeave","update","delayLeave","earlyRemove","delayedLeave","leavingVNodesCache","getLeavingNodesForType","_leaveCb","BaseTransition","callHook","hook","hooks","leavingVNode","afterHook","cancelHook","called","done","_enterCb","cancelled","remove","isKeepAlive","ssContent","clone","ssFallback","keepComment","ret","keyedFragmentCount","Fragment","isAsyncWrapper","__asyncLoader","__isKeepAlive","RegExp","matches","pattern","test","onActivated","target","registerKeepAliveHook","onDeactivated","wrappedHook","__wdc","current","isDeactivated","injectHook","injectToKeepAliveRoot","keepAliveRoot","injected","onUnmounted","resetShapeFlag","getInnerChild","prepend","__weh","setCurrentInstance","unshift","createHook","lifecycle","isInSSRComponentSetup","onBeforeMount","onBeforeUpdate","onUpdated","onServerPrefetch","onRenderTriggered","onRenderTracked","onErrorCaptured","shouldCacheAccess","applyOptions","resolveMergedOptions","beforeCreate","dataOptions","computed","computedOptions","methods","watchOptions","provideOptions","injectOptions","created","beforeMount","mounted","beforeUpdate","updated","activated","deactivated","beforeDestroy","beforeUnmount","destroyed","unmounted","renderTracked","renderTriggered","errorCaptured","serverPrefetch","expose","components","directives","filters","checkDuplicateProperties","resolveInjections","methodHandler","opt","c","defineProperty","enumerable","configurable","createWatcher","Reflect","ownKeys","registerLifecycleHook","register","_hook","exposed","val","normalizeInject","from","h","r","base","extendsOptions","globalMixins","optionsCache","optionMergeStrategies","resolved","m","mergeOptions","to","strats","strat","internalOptionMergeStrats","mergeDataFn","mergeObjectOptions","mergeAsArray","mergeWatchOptions","mergeInject","merged","initProps","isStateful","isSSR","InternalObjectKey","propsDefaults","setFullProps","updateProps","rawPrevProps","rawCurrentProps","hasAttrsChanged","kebabKey","resolvePropValue","propsToUpdate","camelizedKey","needCastKeys","rawCastValues","camelKey","castValues","isAbsent","hasDefault","normalizePropsOptions","propsCache","extendProps","normalizedKey","validatePropName","prop","booleanIndex","getTypeIndex","stringIndex","getType","ctor","match","toString","isSameType","expectedTypes","findIndex","t","isInternalKey","normalizeSlotValue","normalizeSlot","rawSlot","normalizeObjectSlots","rawSlots","_ctx","normalizeVNodeSlots","initSlots","_","updateSlots","needDeletionCheck","deletionComparisonTarget","withDirectives","internalInstance","bindings","dir","arg","modifiers","invokeDirectiveHook","oldBindings","binding","createAppContext","app","isNativeTag","performance","globalProperties","compilerOptions","WeakMap","uid","createAppAPI","hydrate","rootComponent","rootProps","context","installedPlugins","_uid","_component","_props","_container","_context","_instance","version","plugin","install","mixin","directive","rootContainer","isHydrate","isSVG","__vue_app__","hasMismatch","isSVGContainer","container","namespaceURI","tagName","isComment","node","nodeType","createHydrationFunctions","rendererInternals","mt","mountComponent","patch","o","patchProp","nextSibling","parentNode","insert","createComment","hasChildNodes","hydrateNode","firstChild","parentComponent","parentSuspense","slotScopeIds","isFragmentStart","onMismatch","handleMismatch","ref","domType","nextNode","Text","Static","needToAdoptContent","staticCount","outerHTML","anchor","hydrateFragment","hydrateElement","locateClosingAsyncAnchor","previousSibling","lastChild","createTextVNode","hydrateChildren","setRef","dynamicChildren","forcePatchValue","endsWith","onClick","vnodeHooks","onVnodeBeforeMount","invokeVNodeHook","onVnodeMounted","innerHTML","textContent","next","parentVNode","l","fragmentSlotScopeIds","isFragment","initFeatureFlags","prodEffectOptions","rawRef","oldRawRef","isUnmount","refValue","getExposeProxy","owner","oldRef","refs","doSet","createRenderer","baseCreateRenderer","createHydrationRenderer","createHydrationFns","hostInsert","hostRemove","hostPatchProp","forcePatchProp","hostForcePatchProp","createElement","hostCreateElement","createText","hostCreateText","hostCreateComment","setText","hostSetText","setElementText","hostSetElementText","hostParentNode","hostNextSibling","setScopeId","hostSetScopeId","cloneNode","hostCloneNode","insertStaticContent","hostInsertStaticContent","n1","n2","getNextHostNode","unmount","processText","processCommentNode","mountStaticNode","processFragment","processElement","processComponent","process","internals","nodes","staticCache","moveStaticNode","removeStaticNode","mountElement","patchElement","vnodeHook","is","mountChildren","unmountChildren","scopeId","needCallTransitionHooks","beforeEnter","enter","cloneIfMounted","oldProps","newProps","onVnodeBeforeUpdate","patchProps","class","style","areChildrenSVG","patchBlockChildren","patchChildren","onVnodeUpdated","oldChildren","newChildren","fallbackContainer","oldVNode","newVNode","fragmentStartAnchor","fragmentEndAnchor","traverseStaticChildren","activate","updateComponent","initialVNode","createComponentInstance","renderer","setupComponent","asyncDep","registerDep","setupRenderEffect","placeholder","asyncResolved","updateComponentPreRender","bu","u","originNext","nextTree","prevTree","bm","hydrateSubTree","scopedInitialVNode","c1","prevShapeFlag","c2","patchKeyedChildren","patchUnkeyedChildren","oldLength","newLength","commonLength","Math","min","nextChild","parentAnchor","l2","e1","e2","nextPos","s1","s2","keyToNewIndexMap","j","patched","toBePatched","moved","maxNewIndexSoFar","newIndexToOldIndexMap","prevChild","newIndex","increasingNewIndexSequence","getSequence","nextIndex","move","moveType","needTransition","leave","performLeave","doRemove","deactivate","shouldInvokeDirs","onVnodeBeforeUnmount","unmountComponent","onVnodeUnmounted","removeFragment","performRemove","bum","um","suspenseId","pendingId","deps","_vnode","mc","pc","pbc","n","createApp","shallow","ch1","ch2","arr","len","arrI","isTeleport","__isTeleport","NULL_DYNAMIC_COMPONENT","Symbol","currentBlock","openBlock","disableTracking","closeBlock","pop","isBlockTreeEnabled","createBlock","isVNode","__v_isVNode","normalizeKey","normalizeRef","_createVNode","isBlockNode","cloned","normalizeChildren","isClassComponent","__vccOpts","klass","__v_skip","targetAnchor","normalize","extraProps","mergeRef","mergedProps","mergeProps","text","flag","createCommentVNode","asBlock","slot","slotFlag","toMerge","existing","incoming","renderList","renderItem","iterator","getPublicInstance","isStatefulComponent","publicPropertiesMap","$","$el","$data","$props","$attrs","$slots","$refs","$parent","$root","$emit","$options","$forceUpdate","$nextTick","$watch","PublicInstanceProxyHandlers","accessCache","normalizedProps","publicGetter","cssModule","__cssModules","RuntimeCompiledPublicInstanceProxyHandlers","unscopables","emptyAppContext","uid$1","exposeProxy","setupContext","bc","da","rtg","rtc","sp","compile","setupResult","setupStatefulComponent","Proxy","setup","createSetupContext","unsetInstance","resolvedResult","handleSetupResult","e","finishComponentSetup","isRuntimeOnly","skipOptions","template","isCustomElement","delimiters","componentCompilerOptions","finalCompilerOptions","_rc","classifyRE","classify","str","toUpperCase","getComponentName","displayName","__file","inferFromRegistry","registry","getterOrOptions","propsOrChildren","prototype","initCustomFormatter"],"mappings":"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","file":"js/chunk-vendors~5ea1a303.fc96fe3e.js","sourcesContent":["import { pauseTracking, resetTracking, isRef, toRaw, isReactive, effect, stop, ref, reactive, shallowReactive, trigger, isProxy, shallowReadonly, track, markRaw, proxyRefs, computed as computed$1, isReadonly } from '@vue/reactivity';\nexport { customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref } from '@vue/reactivity';\nimport { isString, isFunction as isFunction$1, isPromise as isPromise$1, isArray, extend, hasOwn, EMPTY_OBJ, toHandlerKey, toNumber, hyphenate, camelize, isOn, isModelListener, remove, NOOP, hasChanged, isObject as isObject$1, isSet, isMap, isPlainObject, invokeArrayFns, def, isReservedProp, EMPTY_ARR, capitalize, toRawType, makeMap, NO, getGlobalThis, normalizeClass, normalizeStyle, isGloballyWhitelisted } from '@vue/shared';\nexport { camelize, capitalize, toDisplayString, toHandlerKey } from '@vue/shared';\n\nconst stack = [];\r\nfunction pushWarningContext(vnode) {\r\n    stack.push(vnode);\r\n}\r\nfunction popWarningContext() {\r\n    stack.pop();\r\n}\r\nfunction warn(msg, ...args) {\r\n    // avoid props formatting or warn handler tracking deps that might be mutated\r\n    // during patch, leading to infinite recursion.\r\n    pauseTracking();\r\n    const instance = stack.length ? stack[stack.length - 1].component : null;\r\n    const appWarnHandler = instance && instance.appContext.config.warnHandler;\r\n    const trace = getComponentTrace();\r\n    if (appWarnHandler) {\r\n        callWithErrorHandling(appWarnHandler, instance, 11 /* APP_WARN_HANDLER */, [\r\n            msg + args.join(''),\r\n            instance && instance.proxy,\r\n            trace\r\n                .map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`)\r\n                .join('\\n'),\r\n            trace\r\n        ]);\r\n    }\r\n    else {\r\n        const warnArgs = [`[Vue warn]: ${msg}`, ...args];\r\n        /* istanbul ignore if */\r\n        if (trace.length &&\r\n            // avoid spamming console during tests\r\n            !false) {\r\n            warnArgs.push(`\\n`, ...formatTrace(trace));\r\n        }\r\n        console.warn(...warnArgs);\r\n    }\r\n    resetTracking();\r\n}\r\nfunction getComponentTrace() {\r\n    let currentVNode = stack[stack.length - 1];\r\n    if (!currentVNode) {\r\n        return [];\r\n    }\r\n    // we can't just use the stack because it will be incomplete during updates\r\n    // that did not start from the root. Re-construct the parent chain using\r\n    // instance parent pointers.\r\n    const normalizedStack = [];\r\n    while (currentVNode) {\r\n        const last = normalizedStack[0];\r\n        if (last && last.vnode === currentVNode) {\r\n            last.recurseCount++;\r\n        }\r\n        else {\r\n            normalizedStack.push({\r\n                vnode: currentVNode,\r\n                recurseCount: 0\r\n            });\r\n        }\r\n        const parentInstance = currentVNode.component && currentVNode.component.parent;\r\n        currentVNode = parentInstance && parentInstance.vnode;\r\n    }\r\n    return normalizedStack;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatTrace(trace) {\r\n    const logs = [];\r\n    trace.forEach((entry, i) => {\r\n        logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\r\n    });\r\n    return logs;\r\n}\r\nfunction formatTraceEntry({ vnode, recurseCount }) {\r\n    const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\r\n    const isRoot = vnode.component ? vnode.component.parent == null : false;\r\n    const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\r\n    const close = `>` + postfix;\r\n    return vnode.props\r\n        ? [open, ...formatProps(vnode.props), close]\r\n        : [open + close];\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProps(props) {\r\n    const res = [];\r\n    const keys = Object.keys(props);\r\n    keys.slice(0, 3).forEach(key => {\r\n        res.push(...formatProp(key, props[key]));\r\n    });\r\n    if (keys.length > 3) {\r\n        res.push(` ...`);\r\n    }\r\n    return res;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatProp(key, value, raw) {\r\n    if (isString(value)) {\r\n        value = JSON.stringify(value);\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (typeof value === 'number' ||\r\n        typeof value === 'boolean' ||\r\n        value == null) {\r\n        return raw ? value : [`${key}=${value}`];\r\n    }\r\n    else if (isRef(value)) {\r\n        value = formatProp(key, toRaw(value.value), true);\r\n        return raw ? value : [`${key}=Ref<`, value, `>`];\r\n    }\r\n    else if (isFunction$1(value)) {\r\n        return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\r\n    }\r\n    else {\r\n        value = toRaw(value);\r\n        return raw ? value : [`${key}=`, value];\r\n    }\r\n}\n\nconst ErrorTypeStrings = {\r\n    [\"sp\" /* SERVER_PREFETCH */]: 'serverPrefetch hook',\r\n    [\"bc\" /* BEFORE_CREATE */]: 'beforeCreate hook',\r\n    [\"c\" /* CREATED */]: 'created hook',\r\n    [\"bm\" /* BEFORE_MOUNT */]: 'beforeMount hook',\r\n    [\"m\" /* MOUNTED */]: 'mounted hook',\r\n    [\"bu\" /* BEFORE_UPDATE */]: 'beforeUpdate hook',\r\n    [\"u\" /* UPDATED */]: 'updated',\r\n    [\"bum\" /* BEFORE_UNMOUNT */]: 'beforeUnmount hook',\r\n    [\"um\" /* UNMOUNTED */]: 'unmounted hook',\r\n    [\"a\" /* ACTIVATED */]: 'activated hook',\r\n    [\"da\" /* DEACTIVATED */]: 'deactivated hook',\r\n    [\"ec\" /* ERROR_CAPTURED */]: 'errorCaptured hook',\r\n    [\"rtc\" /* RENDER_TRACKED */]: 'renderTracked hook',\r\n    [\"rtg\" /* RENDER_TRIGGERED */]: 'renderTriggered hook',\r\n    [0 /* SETUP_FUNCTION */]: 'setup function',\r\n    [1 /* RENDER_FUNCTION */]: 'render function',\r\n    [2 /* WATCH_GETTER */]: 'watcher getter',\r\n    [3 /* WATCH_CALLBACK */]: 'watcher callback',\r\n    [4 /* WATCH_CLEANUP */]: 'watcher cleanup function',\r\n    [5 /* NATIVE_EVENT_HANDLER */]: 'native event handler',\r\n    [6 /* COMPONENT_EVENT_HANDLER */]: 'component event handler',\r\n    [7 /* VNODE_HOOK */]: 'vnode hook',\r\n    [8 /* DIRECTIVE_HOOK */]: 'directive hook',\r\n    [9 /* TRANSITION_HOOK */]: 'transition hook',\r\n    [10 /* APP_ERROR_HANDLER */]: 'app errorHandler',\r\n    [11 /* APP_WARN_HANDLER */]: 'app warnHandler',\r\n    [12 /* FUNCTION_REF */]: 'ref function',\r\n    [13 /* ASYNC_COMPONENT_LOADER */]: 'async component loader',\r\n    [14 /* SCHEDULER */]: 'scheduler flush. This is likely a Vue internals bug. ' +\r\n        'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next'\r\n};\r\nfunction callWithErrorHandling(fn, instance, type, args) {\r\n    let res;\r\n    try {\r\n        res = args ? fn(...args) : fn();\r\n    }\r\n    catch (err) {\r\n        handleError(err, instance, type);\r\n    }\r\n    return res;\r\n}\r\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\r\n    if (isFunction$1(fn)) {\r\n        const res = callWithErrorHandling(fn, instance, type, args);\r\n        if (res && isPromise$1(res)) {\r\n            res.catch(err => {\r\n                handleError(err, instance, type);\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    const values = [];\r\n    for (let i = 0; i < fn.length; i++) {\r\n        values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\r\n    }\r\n    return values;\r\n}\r\nfunction handleError(err, instance, type, throwInDev = true) {\r\n    const contextVNode = instance ? instance.vnode : null;\r\n    if (instance) {\r\n        let cur = instance.parent;\r\n        // the exposed instance is the render proxy to keep it consistent with 2.x\r\n        const exposedInstance = instance.proxy;\r\n        // in production the hook receives only the error code\r\n        const errorInfo = (process.env.NODE_ENV !== 'production') ? ErrorTypeStrings[type] : type;\r\n        while (cur) {\r\n            const errorCapturedHooks = cur.ec;\r\n            if (errorCapturedHooks) {\r\n                for (let i = 0; i < errorCapturedHooks.length; i++) {\r\n                    if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            cur = cur.parent;\r\n        }\r\n        // app-level handling\r\n        const appErrorHandler = instance.appContext.config.errorHandler;\r\n        if (appErrorHandler) {\r\n            callWithErrorHandling(appErrorHandler, null, 10 /* APP_ERROR_HANDLER */, [err, exposedInstance, errorInfo]);\r\n            return;\r\n        }\r\n    }\r\n    logError(err, type, contextVNode, throwInDev);\r\n}\r\nfunction logError(err, type, contextVNode, throwInDev = true) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const info = ErrorTypeStrings[type];\r\n        if (contextVNode) {\r\n            pushWarningContext(contextVNode);\r\n        }\r\n        warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\r\n        if (contextVNode) {\r\n            popWarningContext();\r\n        }\r\n        // crash in dev by default so it's more noticeable\r\n        if (throwInDev) {\r\n            throw err;\r\n        }\r\n        else {\r\n            console.error(err);\r\n        }\r\n    }\r\n    else {\r\n        // recover in prod to reduce the impact on end-user\r\n        console.error(err);\r\n    }\r\n}\n\nlet isFlushing = false;\r\nlet isFlushPending = false;\r\nconst queue = [];\r\nlet flushIndex = 0;\r\nconst pendingPreFlushCbs = [];\r\nlet activePreFlushCbs = null;\r\nlet preFlushIndex = 0;\r\nconst pendingPostFlushCbs = [];\r\nlet activePostFlushCbs = null;\r\nlet postFlushIndex = 0;\r\nconst resolvedPromise = Promise.resolve();\r\nlet currentFlushPromise = null;\r\nlet currentPreFlushParentJob = null;\r\nconst RECURSION_LIMIT = 100;\r\nfunction nextTick(fn) {\r\n    const p = currentFlushPromise || resolvedPromise;\r\n    return fn ? p.then(this ? fn.bind(this) : fn) : p;\r\n}\r\n// #2768\r\n// Use binary-search to find a suitable position in the queue,\r\n// so that the queue maintains the increasing order of job's id,\r\n// which can prevent the job from being skipped and also can avoid repeated patching.\r\nfunction findInsertionIndex(job) {\r\n    // the start index should be `flushIndex + 1`\r\n    let start = flushIndex + 1;\r\n    let end = queue.length;\r\n    const jobId = getId(job);\r\n    while (start < end) {\r\n        const middle = (start + end) >>> 1;\r\n        const middleJobId = getId(queue[middle]);\r\n        middleJobId < jobId ? (start = middle + 1) : (end = middle);\r\n    }\r\n    return start;\r\n}\r\nfunction queueJob(job) {\r\n    // the dedupe search uses the startIndex argument of Array.includes()\r\n    // by default the search index includes the current job that is being run\r\n    // so it cannot recursively trigger itself again.\r\n    // if the job is a watch() callback, the search will start with a +1 index to\r\n    // allow it recursively trigger itself - it is the user's responsibility to\r\n    // ensure it doesn't end up in an infinite loop.\r\n    if ((!queue.length ||\r\n        !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) &&\r\n        job !== currentPreFlushParentJob) {\r\n        const pos = findInsertionIndex(job);\r\n        if (pos > -1) {\r\n            queue.splice(pos, 0, job);\r\n        }\r\n        else {\r\n            queue.push(job);\r\n        }\r\n        queueFlush();\r\n    }\r\n}\r\nfunction queueFlush() {\r\n    if (!isFlushing && !isFlushPending) {\r\n        isFlushPending = true;\r\n        currentFlushPromise = resolvedPromise.then(flushJobs);\r\n    }\r\n}\r\nfunction invalidateJob(job) {\r\n    const i = queue.indexOf(job);\r\n    if (i > flushIndex) {\r\n        queue.splice(i, 1);\r\n    }\r\n}\r\nfunction queueCb(cb, activeQueue, pendingQueue, index) {\r\n    if (!isArray(cb)) {\r\n        if (!activeQueue ||\r\n            !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {\r\n            pendingQueue.push(cb);\r\n        }\r\n    }\r\n    else {\r\n        // if cb is an array, it is a component lifecycle hook which can only be\r\n        // triggered by a job, which is already deduped in the main queue, so\r\n        // we can skip duplicate check here to improve perf\r\n        pendingQueue.push(...cb);\r\n    }\r\n    queueFlush();\r\n}\r\nfunction queuePreFlushCb(cb) {\r\n    queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);\r\n}\r\nfunction queuePostFlushCb(cb) {\r\n    queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);\r\n}\r\nfunction flushPreFlushCbs(seen, parentJob = null) {\r\n    if (pendingPreFlushCbs.length) {\r\n        currentPreFlushParentJob = parentJob;\r\n        activePreFlushCbs = [...new Set(pendingPreFlushCbs)];\r\n        pendingPreFlushCbs.length = 0;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) {\r\n                continue;\r\n            }\r\n            activePreFlushCbs[preFlushIndex]();\r\n        }\r\n        activePreFlushCbs = null;\r\n        preFlushIndex = 0;\r\n        currentPreFlushParentJob = null;\r\n        // recursively flush until it drains\r\n        flushPreFlushCbs(seen, parentJob);\r\n    }\r\n}\r\nfunction flushPostFlushCbs(seen) {\r\n    if (pendingPostFlushCbs.length) {\r\n        const deduped = [...new Set(pendingPostFlushCbs)];\r\n        pendingPostFlushCbs.length = 0;\r\n        // #1947 already has active queue, nested flushPostFlushCbs call\r\n        if (activePostFlushCbs) {\r\n            activePostFlushCbs.push(...deduped);\r\n            return;\r\n        }\r\n        activePostFlushCbs = deduped;\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            seen = seen || new Map();\r\n        }\r\n        activePostFlushCbs.sort((a, b) => getId(a) - getId(b));\r\n        for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {\r\n                continue;\r\n            }\r\n            activePostFlushCbs[postFlushIndex]();\r\n        }\r\n        activePostFlushCbs = null;\r\n        postFlushIndex = 0;\r\n    }\r\n}\r\nconst getId = (job) => job.id == null ? Infinity : job.id;\r\nfunction flushJobs(seen) {\r\n    isFlushPending = false;\r\n    isFlushing = true;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        seen = seen || new Map();\r\n    }\r\n    flushPreFlushCbs(seen);\r\n    // Sort queue before flush.\r\n    // This ensures that:\r\n    // 1. Components are updated from parent to child. (because parent is always\r\n    //    created before the child so its render effect will have smaller\r\n    //    priority number)\r\n    // 2. If a component is unmounted during a parent component's update,\r\n    //    its update can be skipped.\r\n    queue.sort((a, b) => getId(a) - getId(b));\r\n    try {\r\n        for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\r\n            const job = queue[flushIndex];\r\n            if (job && job.active !== false) {\r\n                if ((process.env.NODE_ENV !== 'production') && checkRecursiveUpdates(seen, job)) {\r\n                    continue;\r\n                }\r\n                callWithErrorHandling(job, null, 14 /* SCHEDULER */);\r\n            }\r\n        }\r\n    }\r\n    finally {\r\n        flushIndex = 0;\r\n        queue.length = 0;\r\n        flushPostFlushCbs(seen);\r\n        isFlushing = false;\r\n        currentFlushPromise = null;\r\n        // some postFlushCb queued jobs!\r\n        // keep flushing until it drains.\r\n        if (queue.length ||\r\n            pendingPreFlushCbs.length ||\r\n            pendingPostFlushCbs.length) {\r\n            flushJobs(seen);\r\n        }\r\n    }\r\n}\r\nfunction checkRecursiveUpdates(seen, fn) {\r\n    if (!seen.has(fn)) {\r\n        seen.set(fn, 1);\r\n    }\r\n    else {\r\n        const count = seen.get(fn);\r\n        if (count > RECURSION_LIMIT) {\r\n            const instance = fn.ownerInstance;\r\n            const componentName = instance && getComponentName(instance.type);\r\n            warn(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. ` +\r\n                `This means you have a reactive effect that is mutating its own ` +\r\n                `dependencies and thus recursively triggering itself. Possible sources ` +\r\n                `include component template, render function, updated hook or ` +\r\n                `watcher source function.`);\r\n            return true;\r\n        }\r\n        else {\r\n            seen.set(fn, count + 1);\r\n        }\r\n    }\r\n}\n\n/* eslint-disable no-restricted-globals */\r\nlet isHmrUpdating = false;\r\nconst hmrDirtyComponents = new Set();\r\n// Expose the HMR runtime on the global object\r\n// This makes it entirely tree-shakable without polluting the exports and makes\r\n// it easier to be used in toolings like vue-loader\r\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\r\n// to be set so that its instances can be registered / removed.\r\nif ((process.env.NODE_ENV !== 'production')) {\r\n    const globalObject = typeof global !== 'undefined'\r\n        ? global\r\n        : typeof self !== 'undefined'\r\n            ? self\r\n            : typeof window !== 'undefined'\r\n                ? window\r\n                : {};\r\n    globalObject.__VUE_HMR_RUNTIME__ = {\r\n        createRecord: tryWrap(createRecord),\r\n        rerender: tryWrap(rerender),\r\n        reload: tryWrap(reload)\r\n    };\r\n}\r\nconst map = new Map();\r\nfunction registerHMR(instance) {\r\n    const id = instance.type.__hmrId;\r\n    let record = map.get(id);\r\n    if (!record) {\r\n        createRecord(id, instance.type);\r\n        record = map.get(id);\r\n    }\r\n    record.instances.add(instance);\r\n}\r\nfunction unregisterHMR(instance) {\r\n    map.get(instance.type.__hmrId).instances.delete(instance);\r\n}\r\nfunction createRecord(id, component) {\r\n    if (!component) {\r\n        warn(`HMR API usage is out of date.\\n` +\r\n            `Please upgrade vue-loader/vite/rollup-plugin-vue or other relevant ` +\r\n            `dependency that handles Vue SFC compilation.`);\r\n        component = {};\r\n    }\r\n    if (map.has(id)) {\r\n        return false;\r\n    }\r\n    map.set(id, {\r\n        component: isClassComponent(component) ? component.__vccOpts : component,\r\n        instances: new Set()\r\n    });\r\n    return true;\r\n}\r\nfunction rerender(id, newRender) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    if (newRender)\r\n        record.component.render = newRender;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    Array.from(record.instances).forEach(instance => {\r\n        if (newRender) {\r\n            instance.render = newRender;\r\n        }\r\n        instance.renderCache = [];\r\n        // this flag forces child components with slot content to update\r\n        isHmrUpdating = true;\r\n        instance.update();\r\n        isHmrUpdating = false;\r\n    });\r\n}\r\nfunction reload(id, newComp) {\r\n    const record = map.get(id);\r\n    if (!record)\r\n        return;\r\n    // Array.from creates a snapshot which avoids the set being mutated during\r\n    // updates\r\n    const { component, instances } = record;\r\n    if (!hmrDirtyComponents.has(component)) {\r\n        // 1. Update existing comp definition to match new one\r\n        newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;\r\n        extend(component, newComp);\r\n        for (const key in component) {\r\n            if (key !== '__file' && !(key in newComp)) {\r\n                delete component[key];\r\n            }\r\n        }\r\n        // 2. Mark component dirty. This forces the renderer to replace the component\r\n        // on patch.\r\n        hmrDirtyComponents.add(component);\r\n        // 3. Make sure to unmark the component after the reload.\r\n        queuePostFlushCb(() => {\r\n            hmrDirtyComponents.delete(component);\r\n        });\r\n    }\r\n    Array.from(instances).forEach(instance => {\r\n        if (instance.parent) {\r\n            // 4. Force the parent instance to re-render. This will cause all updated\r\n            // components to be unmounted and re-mounted. Queue the update so that we\r\n            // don't end up forcing the same parent to re-render multiple times.\r\n            queueJob(instance.parent.update);\r\n        }\r\n        else if (instance.appContext.reload) {\r\n            // root instance mounted via createApp() has a reload method\r\n            instance.appContext.reload();\r\n        }\r\n        else if (typeof window !== 'undefined') {\r\n            // root instance inside tree created via raw render(). Force reload.\r\n            window.location.reload();\r\n        }\r\n        else {\r\n            console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');\r\n        }\r\n    });\r\n}\r\nfunction tryWrap(fn) {\r\n    return (id, arg) => {\r\n        try {\r\n            return fn(id, arg);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n            console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` +\r\n                `Full reload required.`);\r\n        }\r\n    };\r\n}\n\nlet devtools;\r\nfunction setDevtoolsHook(hook) {\r\n    devtools = hook;\r\n}\r\nfunction devtoolsInitApp(app, version) {\r\n    // TODO queue if devtools is undefined\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:init\" /* APP_INIT */, app, version, {\r\n        Fragment,\r\n        Text,\r\n        Comment: Comment$1,\r\n        Static\r\n    });\r\n}\r\nfunction devtoolsUnmountApp(app) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"app:unmount\" /* APP_UNMOUNT */, app);\r\n}\r\nconst devtoolsComponentAdded = /*#__PURE__*/ createDevtoolsComponentHook(\"component:added\" /* COMPONENT_ADDED */);\r\nconst devtoolsComponentUpdated = /*#__PURE__*/ createDevtoolsComponentHook(\"component:updated\" /* COMPONENT_UPDATED */);\r\nconst devtoolsComponentRemoved = /*#__PURE__*/ createDevtoolsComponentHook(\"component:removed\" /* COMPONENT_REMOVED */);\r\nfunction createDevtoolsComponentHook(hook) {\r\n    return (component) => {\r\n        if (!devtools)\r\n            return;\r\n        devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined, component);\r\n    };\r\n}\r\nconst devtoolsPerfStart = /*#__PURE__*/ createDevtoolsPerformanceHook(\"perf:start\" /* PERFORMANCE_START */);\r\nconst devtoolsPerfEnd = /*#__PURE__*/ createDevtoolsPerformanceHook(\"perf:end\" /* PERFORMANCE_END */);\r\nfunction createDevtoolsPerformanceHook(hook) {\r\n    return (component, type, time) => {\r\n        if (!devtools)\r\n            return;\r\n        devtools.emit(hook, component.appContext.app, component.uid, component, type, time);\r\n    };\r\n}\r\nfunction devtoolsComponentEmit(component, event, params) {\r\n    if (!devtools)\r\n        return;\r\n    devtools.emit(\"component:emit\" /* COMPONENT_EMIT */, component.appContext.app, component, event, params);\r\n}\n\nconst deprecationData = {\r\n    [\"GLOBAL_MOUNT\" /* GLOBAL_MOUNT */]: {\r\n        message: `The global app bootstrapping API has changed: vm.$mount() and the \"el\" ` +\r\n            `option have been removed. Use createApp(RootComponent).mount() instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#mounting-app-instance`\r\n    },\r\n    [\"GLOBAL_MOUNT_CONTAINER\" /* GLOBAL_MOUNT_CONTAINER */]: {\r\n        message: `Vue detected directives on the mount container. ` +\r\n            `In Vue 3, the container is no longer considered part of the template ` +\r\n            `and will not be processed/replaced.`,\r\n        link: `https://v3.vuejs.org/guide/migration/mount-changes.html`\r\n    },\r\n    [\"GLOBAL_EXTEND\" /* GLOBAL_EXTEND */]: {\r\n        message: `Vue.extend() has been removed in Vue 3. ` +\r\n            `Use defineComponent() instead.`,\r\n        link: `https://v3.vuejs.org/api/global-api.html#definecomponent`\r\n    },\r\n    [\"GLOBAL_PROTOTYPE\" /* GLOBAL_PROTOTYPE */]: {\r\n        message: `Vue.prototype is no longer available in Vue 3. ` +\r\n            `Use app.config.globalProperties instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#vue-prototype-replaced-by-config-globalproperties`\r\n    },\r\n    [\"GLOBAL_SET\" /* GLOBAL_SET */]: {\r\n        message: `Vue.set() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"GLOBAL_DELETE\" /* GLOBAL_DELETE */]: {\r\n        message: `Vue.delete() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"GLOBAL_OBSERVABLE\" /* GLOBAL_OBSERVABLE */]: {\r\n        message: `Vue.observable() has been removed. ` +\r\n            `Use \\`import { reactive } from \"vue\"\\` from Composition API instead.`,\r\n        link: `https://v3.vuejs.org/api/basic-reactivity.html`\r\n    },\r\n    [\"GLOBAL_PRIVATE_UTIL\" /* GLOBAL_PRIVATE_UTIL */]: {\r\n        message: `Vue.util has been removed. Please refactor to avoid its usage ` +\r\n            `since it was an internal API even in Vue 2.`\r\n    },\r\n    [\"CONFIG_SILENT\" /* CONFIG_SILENT */]: {\r\n        message: `config.silent has been removed because it is not good practice to ` +\r\n            `intentionally suppress warnings. You can use your browser console's ` +\r\n            `filter features to focus on relevant messages.`\r\n    },\r\n    [\"CONFIG_DEVTOOLS\" /* CONFIG_DEVTOOLS */]: {\r\n        message: `config.devtools has been removed. To enable devtools for ` +\r\n            `production, configure the __VUE_PROD_DEVTOOLS__ compile-time flag.`,\r\n        link: `https://github.com/vuejs/vue-next/tree/master/packages/vue#bundler-build-feature-flags`\r\n    },\r\n    [\"CONFIG_KEY_CODES\" /* CONFIG_KEY_CODES */]: {\r\n        message: `config.keyCodes has been removed. ` +\r\n            `In Vue 3, you can directly use the kebab-case key names as v-on modifiers.`,\r\n        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`\r\n    },\r\n    [\"CONFIG_PRODUCTION_TIP\" /* CONFIG_PRODUCTION_TIP */]: {\r\n        message: `config.productionTip has been removed.`,\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-productiontip-removed`\r\n    },\r\n    [\"CONFIG_IGNORED_ELEMENTS\" /* CONFIG_IGNORED_ELEMENTS */]: {\r\n        message: () => {\r\n            let msg = `config.ignoredElements has been removed.`;\r\n            if (isRuntimeOnly()) {\r\n                msg += ` Pass the \"isCustomElement\" option to @vue/compiler-dom instead.`;\r\n            }\r\n            else {\r\n                msg += ` Use config.isCustomElement instead.`;\r\n            }\r\n            return msg;\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/global-api.html#config-ignoredelements-is-now-config-iscustomelement`\r\n    },\r\n    [\"CONFIG_WHITESPACE\" /* CONFIG_WHITESPACE */]: {\r\n        // this warning is only relevant in the full build when using runtime\r\n        // compilation, so it's put in the runtime compatConfig list.\r\n        message: `Vue 3 compiler's whitespace option will default to \"condense\" instead of ` +\r\n            `\"preserve\". To suppress this warning, provide an explicit value for ` +\r\n            `\\`config.compilerOptions.whitespace\\`.`\r\n    },\r\n    [\"CONFIG_OPTION_MERGE_STRATS\" /* CONFIG_OPTION_MERGE_STRATS */]: {\r\n        message: `config.optionMergeStrategies no longer exposes internal strategies. ` +\r\n            `Use custom merge functions instead.`\r\n    },\r\n    [\"INSTANCE_SET\" /* INSTANCE_SET */]: {\r\n        message: `vm.$set() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"INSTANCE_DELETE\" /* INSTANCE_DELETE */]: {\r\n        message: `vm.$delete() has been removed as it is no longer needed in Vue 3. ` +\r\n            `Simply use native JavaScript mutations.`\r\n    },\r\n    [\"INSTANCE_DESTROY\" /* INSTANCE_DESTROY */]: {\r\n        message: `vm.$destroy() has been removed. Use app.unmount() instead.`,\r\n        link: `https://v3.vuejs.org/api/application-api.html#unmount`\r\n    },\r\n    [\"INSTANCE_EVENT_EMITTER\" /* INSTANCE_EVENT_EMITTER */]: {\r\n        message: `vm.$on/$once/$off() have been removed. ` +\r\n            `Use an external event emitter library instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/events-api.html`\r\n    },\r\n    [\"INSTANCE_EVENT_HOOKS\" /* INSTANCE_EVENT_HOOKS */]: {\r\n        message: event => `\"${event}\" lifecycle events are no longer supported. From templates, ` +\r\n            `use the \"vnode\" prefix instead of \"hook:\". For example, @${event} ` +\r\n            `should be changed to @vnode-${event.slice(5)}. ` +\r\n            `From JavaScript, use Composition API to dynamically register lifecycle ` +\r\n            `hooks.`,\r\n        link: `https://v3.vuejs.org/guide/migration/vnode-lifecycle-events.html`\r\n    },\r\n    [\"INSTANCE_CHILDREN\" /* INSTANCE_CHILDREN */]: {\r\n        message: `vm.$children has been removed. Consider refactoring your logic ` +\r\n            `to avoid relying on direct access to child components.`,\r\n        link: `https://v3.vuejs.org/guide/migration/children.html`\r\n    },\r\n    [\"INSTANCE_LISTENERS\" /* INSTANCE_LISTENERS */]: {\r\n        message: `vm.$listeners has been removed. In Vue 3, parent v-on listeners are ` +\r\n            `included in vm.$attrs and it is no longer necessary to separately use ` +\r\n            `v-on=\"$listeners\" if you are already using v-bind=\"$attrs\". ` +\r\n            `(Note: the Vue 3 behavior only applies if this compat config is disabled)`,\r\n        link: `https://v3.vuejs.org/guide/migration/listeners-removed.html`\r\n    },\r\n    [\"INSTANCE_SCOPED_SLOTS\" /* INSTANCE_SCOPED_SLOTS */]: {\r\n        message: `vm.$scopedSlots has been removed. Use vm.$slots instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/slots-unification.html`\r\n    },\r\n    [\"INSTANCE_ATTRS_CLASS_STYLE\" /* INSTANCE_ATTRS_CLASS_STYLE */]: {\r\n        message: componentName => `Component <${componentName ||\r\n            'Anonymous'}> has \\`inheritAttrs: false\\` but is ` +\r\n            `relying on class/style fallthrough from parent. In Vue 3, class/style ` +\r\n            `are now included in $attrs and will no longer fallthrough when ` +\r\n            `inheritAttrs is false. If you are already using v-bind=\"$attrs\" on ` +\r\n            `component root it should render the same end result. ` +\r\n            `If you are binding $attrs to a non-root element and expecting ` +\r\n            `class/style to fallthrough on root, you will need to now manually bind ` +\r\n            `them on root via :class=\"$attrs.class\".`,\r\n        link: `https://v3.vuejs.org/guide/migration/attrs-includes-class-style.html`\r\n    },\r\n    [\"OPTIONS_DATA_FN\" /* OPTIONS_DATA_FN */]: {\r\n        message: `The \"data\" option can no longer be a plain object. ` +\r\n            `Always use a function.`,\r\n        link: `https://v3.vuejs.org/guide/migration/data-option.html`\r\n    },\r\n    [\"OPTIONS_DATA_MERGE\" /* OPTIONS_DATA_MERGE */]: {\r\n        message: (key) => `Detected conflicting key \"${key}\" when merging data option values. ` +\r\n            `In Vue 3, data keys are merged shallowly and will override one another.`,\r\n        link: `https://v3.vuejs.org/guide/migration/data-option.html#mixin-merge-behavior-change`\r\n    },\r\n    [\"OPTIONS_BEFORE_DESTROY\" /* OPTIONS_BEFORE_DESTROY */]: {\r\n        message: `\\`beforeDestroy\\` has been renamed to \\`beforeUnmount\\`.`\r\n    },\r\n    [\"OPTIONS_DESTROYED\" /* OPTIONS_DESTROYED */]: {\r\n        message: `\\`destroyed\\` has been renamed to \\`unmounted\\`.`\r\n    },\r\n    [\"WATCH_ARRAY\" /* WATCH_ARRAY */]: {\r\n        message: `\"watch\" option or vm.$watch on an array value will no longer ` +\r\n            `trigger on array mutation unless the \"deep\" option is specified. ` +\r\n            `If current usage is intended, you can disable the compat behavior and ` +\r\n            `suppress this warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"WATCH_ARRAY\" /* WATCH_ARRAY */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/watch.html`\r\n    },\r\n    [\"PROPS_DEFAULT_THIS\" /* PROPS_DEFAULT_THIS */]: {\r\n        message: (key) => `props default value function no longer has access to \"this\". The compat ` +\r\n            `build only offers access to this.$options.` +\r\n            `(found in prop \"${key}\")`,\r\n        link: `https://v3.vuejs.org/guide/migration/props-default-this.html`\r\n    },\r\n    [\"CUSTOM_DIR\" /* CUSTOM_DIR */]: {\r\n        message: (legacyHook, newHook) => `Custom directive hook \"${legacyHook}\" has been removed. ` +\r\n            `Use \"${newHook}\" instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/custom-directives.html`\r\n    },\r\n    [\"V_FOR_REF\" /* V_FOR_REF */]: {\r\n        message: `Ref usage on v-for no longer creates array ref values in Vue 3. ` +\r\n            `Consider using function refs or refactor to avoid ref usage altogether.`,\r\n        link: `https://v3.vuejs.org/guide/migration/array-refs.html`\r\n    },\r\n    [\"V_ON_KEYCODE_MODIFIER\" /* V_ON_KEYCODE_MODIFIER */]: {\r\n        message: `Using keyCode as v-on modifier is no longer supported. ` +\r\n            `Use kebab-case key name modifiers instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/keycode-modifiers.html`\r\n    },\r\n    [\"ATTR_FALSE_VALUE\" /* ATTR_FALSE_VALUE */]: {\r\n        message: (name) => `Attribute \"${name}\" with v-bind value \\`false\\` will render ` +\r\n            `${name}=\"false\" instead of removing it in Vue 3. To remove the attribute, ` +\r\n            `use \\`null\\` or \\`undefined\\` instead. If the usage is intended, ` +\r\n            `you can disable the compat behavior and suppress this warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"ATTR_FALSE_VALUE\" /* ATTR_FALSE_VALUE */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`\r\n    },\r\n    [\"ATTR_ENUMERATED_COERCION\" /* ATTR_ENUMERATED_COERCION */]: {\r\n        message: (name, value, coerced) => `Enumerated attribute \"${name}\" with v-bind value \\`${value}\\` will ` +\r\n            `${value === null ? `be removed` : `render the value as-is`} instead of coercing the value to \"${coerced}\" in Vue 3. ` +\r\n            `Always use explicit \"true\" or \"false\" values for enumerated attributes. ` +\r\n            `If the usage is intended, ` +\r\n            `you can disable the compat behavior and suppress this warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"ATTR_ENUMERATED_COERCION\" /* ATTR_ENUMERATED_COERCION */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/attribute-coercion.html`\r\n    },\r\n    [\"TRANSITION_CLASSES\" /* TRANSITION_CLASSES */]: {\r\n        message: `` // this feature cannot be runtime-detected\r\n    },\r\n    [\"TRANSITION_GROUP_ROOT\" /* TRANSITION_GROUP_ROOT */]: {\r\n        message: `<TransitionGroup> no longer renders a root <span> element by ` +\r\n            `default if no \"tag\" prop is specified. If you do not rely on the span ` +\r\n            `for styling, you can disable the compat behavior and suppress this ` +\r\n            `warning with:` +\r\n            `\\n\\n  configureCompat({ ${\"TRANSITION_GROUP_ROOT\" /* TRANSITION_GROUP_ROOT */}: false })\\n`,\r\n        link: `https://v3.vuejs.org/guide/migration/transition-group.html`\r\n    },\r\n    [\"COMPONENT_ASYNC\" /* COMPONENT_ASYNC */]: {\r\n        message: (comp) => {\r\n            const name = getComponentName(comp);\r\n            return (`Async component${name ? ` <${name}>` : `s`} should be explicitly created via \\`defineAsyncComponent()\\` ` +\r\n                `in Vue 3. Plain functions will be treated as functional components in ` +\r\n                `non-compat build. If you have already migrated all async component ` +\r\n                `usage and intend to use plain functions for functional components, ` +\r\n                `you can disable the compat behavior and suppress this ` +\r\n                `warning with:` +\r\n                `\\n\\n  configureCompat({ ${\"COMPONENT_ASYNC\" /* COMPONENT_ASYNC */}: false })\\n`);\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/async-components.html`\r\n    },\r\n    [\"COMPONENT_FUNCTIONAL\" /* COMPONENT_FUNCTIONAL */]: {\r\n        message: (comp) => {\r\n            const name = getComponentName(comp);\r\n            return (`Functional component${name ? ` <${name}>` : `s`} should be defined as a plain function in Vue 3. The \"functional\" ` +\r\n                `option has been removed. NOTE: Before migrating to use plain ` +\r\n                `functions for functional components, first make sure that all async ` +\r\n                `components usage have been migrated and its compat behavior has ` +\r\n                `been disabled.`);\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/functional-components.html`\r\n    },\r\n    [\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */]: {\r\n        message: (comp) => {\r\n            const configMsg = `opt-in to ` +\r\n                `Vue 3 behavior on a per-component basis with \\`compatConfig: { ${\"COMPONENT_V_MODEL\" /* COMPONENT_V_MODEL */}: false }\\`.`;\r\n            if (comp.props && isArray(comp.props)\r\n                ? comp.props.includes('modelValue')\r\n                : hasOwn(comp.props, 'modelValue')) {\r\n                return (`Component delcares \"modelValue\" prop, which is Vue 3 usage, but ` +\r\n                    `is running under Vue 2 compat v-model behavior. You can ${configMsg}`);\r\n            }\r\n            return (`v-model usage on component has changed in Vue 3. Component that expects ` +\r\n                `to work with v-model should now use the \"modelValue\" prop and emit the ` +\r\n                `\"update:modelValue\" event. You can update the usage and then ${configMsg}`);\r\n        },\r\n        link: `https://v3.vuejs.org/guide/migration/v-model.html`\r\n    },\r\n    [\"RENDER_FUNCTION\" /* RENDER_FUNCTION */]: {\r\n        message: `Vue 3's render function API has changed. ` +\r\n            `You can opt-in to the new API with:` +\r\n            `\\n\\n  configureCompat({ ${\"RENDER_FUNCTION\" /* RENDER_FUNCTION */}: false })\\n` +\r\n            `\\n  (This can also be done per-component via the \"compatConfig\" option.)`,\r\n        link: `https://v3.vuejs.org/guide/migration/render-function-api.html`\r\n    },\r\n    [\"FILTERS\" /* FILTERS */]: {\r\n        message: `filters have been removed in Vue 3. ` +\r\n            `The \"|\" symbol will be treated as native JavaScript bitwise OR operator. ` +\r\n            `Use method calls or computed properties instead.`,\r\n        link: `https://v3.vuejs.org/guide/migration/filters.html`\r\n    },\r\n    [\"PRIVATE_APIS\" /* PRIVATE_APIS */]: {\r\n        message: name => `\"${name}\" is a Vue 2 private API that no longer exists in Vue 3. ` +\r\n            `If you are seeing this warning only due to a dependency, you can ` +\r\n            `suppress this warning via { PRIVATE_APIS: 'supress-warning' }.`\r\n    }\r\n};\r\nconst instanceWarned = Object.create(null);\r\nconst warnCount = Object.create(null);\r\nfunction warnDeprecation(key, instance, ...args) {\r\n    if (!(process.env.NODE_ENV !== 'production')) {\r\n        return;\r\n    }\r\n    instance = instance || getCurrentInstance();\r\n    // check user config\r\n    const config = getCompatConfigForKey(key, instance);\r\n    if (config === 'suppress-warning') {\r\n        return;\r\n    }\r\n    const dupKey = key + args.join('');\r\n    let compId = instance && formatComponentName(instance, instance.type);\r\n    if (compId === 'Anonymous' && instance) {\r\n        compId = instance.uid;\r\n    }\r\n    // skip if the same warning is emitted for the same component type\r\n    const componentDupKey = dupKey + compId;\r\n    if (componentDupKey in instanceWarned) {\r\n        return;\r\n    }\r\n    instanceWarned[componentDupKey] = true;\r\n    // same warning, but different component. skip the long message and just\r\n    // log the key and count.\r\n    if (dupKey in warnCount) {\r\n        warn(`(deprecation ${key}) (${++warnCount[dupKey] + 1})`);\r\n        return;\r\n    }\r\n    warnCount[dupKey] = 0;\r\n    const { message, link } = deprecationData[key];\r\n    warn(`(deprecation ${key}) ${typeof message === 'function' ? message(...args) : message}${link ? `\\n  Details: ${link}` : ``}`);\r\n    if (!isCompatEnabled(key, instance, true)) {\r\n        console.error(`^ The above deprecation's compat behavior is disabled and will likely ` +\r\n            `lead to runtime errors.`);\r\n    }\r\n}\r\nconst globalCompatConfig = {\r\n    MODE: 2\r\n};\r\nfunction getCompatConfigForKey(key, instance) {\r\n    const instanceConfig = instance && instance.type.compatConfig;\r\n    if (instanceConfig && key in instanceConfig) {\r\n        return instanceConfig[key];\r\n    }\r\n    return globalCompatConfig[key];\r\n}\r\nfunction isCompatEnabled(key, instance, enableForBuiltIn = false) {\r\n    // skip compat for built-in components\r\n    if (!enableForBuiltIn && instance && instance.type.__isBuiltIn) {\r\n        return false;\r\n    }\r\n    const rawMode = getCompatConfigForKey('MODE', instance) || 2;\r\n    const val = getCompatConfigForKey(key, instance);\r\n    const mode = isFunction$1(rawMode)\r\n        ? rawMode(instance && instance.type)\r\n        : rawMode;\r\n    if (mode === 2) {\r\n        return val !== false;\r\n    }\r\n    else {\r\n        return val === true || val === 'suppress-warning';\r\n    }\r\n}\n\nfunction emit(instance, event, ...rawArgs) {\r\n    const props = instance.vnode.props || EMPTY_OBJ;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const { emitsOptions, propsOptions: [propsOptions] } = instance;\r\n        if (emitsOptions) {\r\n            if (!(event in emitsOptions) &&\r\n                !(false )) {\r\n                if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {\r\n                    warn(`Component emitted event \"${event}\" but it is neither declared in ` +\r\n                        `the emits option nor as an \"${toHandlerKey(event)}\" prop.`);\r\n                }\r\n            }\r\n            else {\r\n                const validator = emitsOptions[event];\r\n                if (isFunction$1(validator)) {\r\n                    const isValid = validator(...rawArgs);\r\n                    if (!isValid) {\r\n                        warn(`Invalid event arguments: event validation failed for event \"${event}\".`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let args = rawArgs;\r\n    const isModelListener = event.startsWith('update:');\r\n    // for v-model update:xxx events, apply modifiers on args\r\n    const modelArg = isModelListener && event.slice(7);\r\n    if (modelArg && modelArg in props) {\r\n        const modifiersKey = `${modelArg === 'modelValue' ? 'model' : modelArg}Modifiers`;\r\n        const { number, trim } = props[modifiersKey] || EMPTY_OBJ;\r\n        if (trim) {\r\n            args = rawArgs.map(a => a.trim());\r\n        }\r\n        else if (number) {\r\n            args = rawArgs.map(toNumber);\r\n        }\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsComponentEmit(instance, event, args);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const lowerCaseEvent = event.toLowerCase();\r\n        if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {\r\n            warn(`Event \"${lowerCaseEvent}\" is emitted in component ` +\r\n                `${formatComponentName(instance, instance.type)} but the handler is registered for \"${event}\". ` +\r\n                `Note that HTML attributes are case-insensitive and you cannot use ` +\r\n                `v-on to listen to camelCase events when using in-DOM templates. ` +\r\n                `You should probably use \"${hyphenate(event)}\" instead of \"${event}\".`);\r\n        }\r\n    }\r\n    let handlerName;\r\n    let handler = props[(handlerName = toHandlerKey(event))] ||\r\n        // also try camelCase event handler (#2249)\r\n        props[(handlerName = toHandlerKey(camelize(event)))];\r\n    // for v-model update:xxx events, also trigger kebab-case equivalent\r\n    // for props passed via kebab-case\r\n    if (!handler && isModelListener) {\r\n        handler = props[(handlerName = toHandlerKey(hyphenate(event)))];\r\n    }\r\n    if (handler) {\r\n        callWithAsyncErrorHandling(handler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n    const onceHandler = props[handlerName + `Once`];\r\n    if (onceHandler) {\r\n        if (!instance.emitted) {\r\n            instance.emitted = {};\r\n        }\r\n        else if (instance.emitted[handlerName]) {\r\n            return;\r\n        }\r\n        instance.emitted[handlerName] = true;\r\n        callWithAsyncErrorHandling(onceHandler, instance, 6 /* COMPONENT_EVENT_HANDLER */, args);\r\n    }\r\n}\r\nfunction normalizeEmitsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.emitsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached !== undefined) {\r\n        return cached;\r\n    }\r\n    const raw = comp.emits;\r\n    let normalized = {};\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction$1(comp)) {\r\n        const extendEmits = (raw) => {\r\n            const normalizedFromExtend = normalizeEmitsOptions(raw, appContext, true);\r\n            if (normalizedFromExtend) {\r\n                hasExtends = true;\r\n                extend(normalized, normalizedFromExtend);\r\n            }\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendEmits);\r\n        }\r\n        if (comp.extends) {\r\n            extendEmits(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendEmits);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, null);\r\n        return null;\r\n    }\r\n    if (isArray(raw)) {\r\n        raw.forEach(key => (normalized[key] = null));\r\n    }\r\n    else {\r\n        extend(normalized, raw);\r\n    }\r\n    cache.set(comp, normalized);\r\n    return normalized;\r\n}\r\n// Check if an incoming prop key is a declared emit event listener.\r\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\r\n// both considered matched listeners.\r\nfunction isEmitListener(options, key) {\r\n    if (!options || !isOn(key)) {\r\n        return false;\r\n    }\r\n    key = key.slice(2).replace(/Once$/, '');\r\n    return (hasOwn(options, key[0].toLowerCase() + key.slice(1)) ||\r\n        hasOwn(options, hyphenate(key)) ||\r\n        hasOwn(options, key));\r\n}\n\n/**\r\n * mark the current rendering instance for asset resolution (e.g.\r\n * resolveComponent, resolveDirective) during render\r\n */\r\nlet currentRenderingInstance = null;\r\nlet currentScopeId = null;\r\n/**\r\n * Note: rendering calls maybe nested. The function returns the parent rendering\r\n * instance if present, which should be restored after the render is done:\r\n *\r\n * ```js\r\n * const prev = setCurrentRenderingInstance(i)\r\n * // ...render\r\n * setCurrentRenderingInstance(prev)\r\n * ```\r\n */\r\nfunction setCurrentRenderingInstance(instance) {\r\n    const prev = currentRenderingInstance;\r\n    currentRenderingInstance = instance;\r\n    currentScopeId = (instance && instance.type.__scopeId) || null;\r\n    return prev;\r\n}\r\n/**\r\n * Set scope id when creating hoisted vnodes.\r\n * @private compiler helper\r\n */\r\nfunction pushScopeId(id) {\r\n    currentScopeId = id;\r\n}\r\n/**\r\n * Technically we no longer need this after 3.0.8 but we need to keep the same\r\n * API for backwards compat w/ code generated by compilers.\r\n * @private\r\n */\r\nfunction popScopeId() {\r\n    currentScopeId = null;\r\n}\r\n/**\r\n * Only for backwards compat\r\n * @private\r\n */\r\nconst withScopeId = (_id) => withCtx;\r\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private compiler helper\r\n */\r\nfunction withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot // false only\r\n) {\r\n    if (!ctx)\r\n        return fn;\r\n    // already normalized\r\n    if (fn._n) {\r\n        return fn;\r\n    }\r\n    const renderFnWithContext = (...args) => {\r\n        // If a user calls a compiled slot inside a template expression (#1745), it\r\n        // can mess up block tracking, so by default we disable block tracking and\r\n        // force bail out when invoking a compiled slot (indicated by the ._d flag).\r\n        // This isn't necessary if rendering a compiled `<slot>`, so we flip the\r\n        // ._d flag off when invoking the wrapped fn inside `renderSlot`.\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(-1);\r\n        }\r\n        const prevInstance = setCurrentRenderingInstance(ctx);\r\n        const res = fn(...args);\r\n        setCurrentRenderingInstance(prevInstance);\r\n        if (renderFnWithContext._d) {\r\n            setBlockTracking(1);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentUpdated(ctx);\r\n        }\r\n        return res;\r\n    };\r\n    // mark normalized to avoid duplicated wrapping\r\n    renderFnWithContext._n = true;\r\n    // mark this as compiled by default\r\n    // this is used in vnode.ts -> normalizeChildren() to set the slot\r\n    // rendering flag.\r\n    renderFnWithContext._c = true;\r\n    // disable block tracking by default\r\n    renderFnWithContext._d = true;\r\n    return renderFnWithContext;\r\n}\n\n/**\r\n * dev only flag to track whether $attrs was used during render.\r\n * If $attrs was used during render then the warning for failed attrs\r\n * fallthrough can be suppressed.\r\n */\r\nlet accessedAttrs = false;\r\nfunction markAttrsAccessed() {\r\n    accessedAttrs = true;\r\n}\r\nfunction renderComponentRoot(instance) {\r\n    const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit, render, renderCache, data, setupState, ctx, inheritAttrs } = instance;\r\n    let result;\r\n    const prev = setCurrentRenderingInstance(instance);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        accessedAttrs = false;\r\n    }\r\n    try {\r\n        let fallthroughAttrs;\r\n        if (vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */) {\r\n            // withProxy is a proxy with a different `has` trap only for\r\n            // runtime-compiled render functions using `with` block.\r\n            const proxyToUse = withProxy || proxy;\r\n            result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\r\n            fallthroughAttrs = attrs;\r\n        }\r\n        else {\r\n            // functional\r\n            const render = Component;\r\n            // in dev, mark attrs accessed if optional props (attrs === props)\r\n            if ((process.env.NODE_ENV !== 'production') && attrs === props) {\r\n                markAttrsAccessed();\r\n            }\r\n            result = normalizeVNode(render.length > 1\r\n                ? render(props, (process.env.NODE_ENV !== 'production')\r\n                    ? {\r\n                        get attrs() {\r\n                            markAttrsAccessed();\r\n                            return attrs;\r\n                        },\r\n                        slots,\r\n                        emit\r\n                    }\r\n                    : { attrs, slots, emit })\r\n                : render(props, null /* we know it doesn't need it */));\r\n            fallthroughAttrs = Component.props\r\n                ? attrs\r\n                : getFunctionalFallthrough(attrs);\r\n        }\r\n        // attr merging\r\n        // in dev mode, comments are preserved, and it's possible for a template\r\n        // to have comments along side the root element which makes it a fragment\r\n        let root = result;\r\n        let setRoot = undefined;\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            result.patchFlag > 0 &&\r\n            result.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n            ;\r\n            [root, setRoot] = getChildRoot(result);\r\n        }\r\n        if (fallthroughAttrs && inheritAttrs !== false) {\r\n            const keys = Object.keys(fallthroughAttrs);\r\n            const { shapeFlag } = root;\r\n            if (keys.length) {\r\n                if (shapeFlag & 1 /* ELEMENT */ ||\r\n                    shapeFlag & 6 /* COMPONENT */) {\r\n                    if (propsOptions && keys.some(isModelListener)) {\r\n                        // If a v-model listener (onUpdate:xxx) has a corresponding declared\r\n                        // prop, it indicates this component expects to handle v-model and\r\n                        // it should not fallthrough.\r\n                        // related: #1543, #1643, #1989\r\n                        fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);\r\n                    }\r\n                    root = cloneVNode(root, fallthroughAttrs);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production') && !accessedAttrs && root.type !== Comment$1) {\r\n                    const allAttrs = Object.keys(attrs);\r\n                    const eventAttrs = [];\r\n                    const extraAttrs = [];\r\n                    for (let i = 0, l = allAttrs.length; i < l; i++) {\r\n                        const key = allAttrs[i];\r\n                        if (isOn(key)) {\r\n                            // ignore v-model handlers when they fail to fallthrough\r\n                            if (!isModelListener(key)) {\r\n                                // remove `on`, lowercase first letter to reflect event casing\r\n                                // accurately\r\n                                eventAttrs.push(key[2].toLowerCase() + key.slice(3));\r\n                            }\r\n                        }\r\n                        else {\r\n                            extraAttrs.push(key);\r\n                        }\r\n                    }\r\n                    if (extraAttrs.length) {\r\n                        warn(`Extraneous non-props attributes (` +\r\n                            `${extraAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes.`);\r\n                    }\r\n                    if (eventAttrs.length) {\r\n                        warn(`Extraneous non-emits event listeners (` +\r\n                            `${eventAttrs.join(', ')}) ` +\r\n                            `were passed to component but could not be automatically inherited ` +\r\n                            `because component renders fragment or text root nodes. ` +\r\n                            `If the listener is intended to be a component custom event listener only, ` +\r\n                            `declare it using the \"emits\" option.`);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (false &&\r\n            isCompatEnabled(\"INSTANCE_ATTRS_CLASS_STYLE\" /* INSTANCE_ATTRS_CLASS_STYLE */, instance) &&\r\n            vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */ &&\r\n            (root.shapeFlag & 1 /* ELEMENT */ ||\r\n                root.shapeFlag & 6 /* COMPONENT */)) ;\r\n        // inherit directives\r\n        if (vnode.dirs) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Runtime directive used on component with non-element root node. ` +\r\n                    `The directives will not function as intended.`);\r\n            }\r\n            root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;\r\n        }\r\n        // inherit transition data\r\n        if (vnode.transition) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isElementRoot(root)) {\r\n                warn(`Component inside <Transition> renders non-element root node ` +\r\n                    `that cannot be animated.`);\r\n            }\r\n            root.transition = vnode.transition;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && setRoot) {\r\n            setRoot(root);\r\n        }\r\n        else {\r\n            result = root;\r\n        }\r\n    }\r\n    catch (err) {\r\n        blockStack.length = 0;\r\n        handleError(err, instance, 1 /* RENDER_FUNCTION */);\r\n        result = createVNode(Comment$1);\r\n    }\r\n    setCurrentRenderingInstance(prev);\r\n    return result;\r\n}\r\n/**\r\n * dev only\r\n * In dev mode, template root level comments are rendered, which turns the\r\n * template into a fragment root, but we need to locate the single element\r\n * root for attrs and scope id processing.\r\n */\r\nconst getChildRoot = (vnode) => {\r\n    const rawChildren = vnode.children;\r\n    const dynamicChildren = vnode.dynamicChildren;\r\n    const childRoot = filterSingleRoot(rawChildren);\r\n    if (!childRoot) {\r\n        return [vnode, undefined];\r\n    }\r\n    const index = rawChildren.indexOf(childRoot);\r\n    const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\r\n    const setRoot = (updatedRoot) => {\r\n        rawChildren[index] = updatedRoot;\r\n        if (dynamicChildren) {\r\n            if (dynamicIndex > -1) {\r\n                dynamicChildren[dynamicIndex] = updatedRoot;\r\n            }\r\n            else if (updatedRoot.patchFlag > 0) {\r\n                vnode.dynamicChildren = [...dynamicChildren, updatedRoot];\r\n            }\r\n        }\r\n    };\r\n    return [normalizeVNode(childRoot), setRoot];\r\n};\r\nfunction filterSingleRoot(children) {\r\n    let singleRoot;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        if (isVNode(child)) {\r\n            // ignore user comment\r\n            if (child.type !== Comment$1 || child.children === 'v-if') {\r\n                if (singleRoot) {\r\n                    // has more than 1 non-comment child, return now\r\n                    return;\r\n                }\r\n                else {\r\n                    singleRoot = child;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n    return singleRoot;\r\n}\r\nconst getFunctionalFallthrough = (attrs) => {\r\n    let res;\r\n    for (const key in attrs) {\r\n        if (key === 'class' || key === 'style' || isOn(key)) {\r\n            (res || (res = {}))[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst filterModelListeners = (attrs, props) => {\r\n    const res = {};\r\n    for (const key in attrs) {\r\n        if (!isModelListener(key) || !(key.slice(9) in props)) {\r\n            res[key] = attrs[key];\r\n        }\r\n    }\r\n    return res;\r\n};\r\nconst isElementRoot = (vnode) => {\r\n    return (vnode.shapeFlag & 6 /* COMPONENT */ ||\r\n        vnode.shapeFlag & 1 /* ELEMENT */ ||\r\n        vnode.type === Comment$1 // potential v-if branch switch\r\n    );\r\n};\r\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\r\n    const { props: prevProps, children: prevChildren, component } = prevVNode;\r\n    const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;\r\n    const emits = component.emitsOptions;\r\n    // Parent component's render function was hot-updated. Since this may have\r\n    // caused the child component's slots content to have changed, we need to\r\n    // force the child to update as well.\r\n    if ((process.env.NODE_ENV !== 'production') && (prevChildren || nextChildren) && isHmrUpdating) {\r\n        return true;\r\n    }\r\n    // force child update for runtime directive or transition on component vnode.\r\n    if (nextVNode.dirs || nextVNode.transition) {\r\n        return true;\r\n    }\r\n    if (optimized && patchFlag >= 0) {\r\n        if (patchFlag & 1024 /* DYNAMIC_SLOTS */) {\r\n            // slot content that references values that might have changed,\r\n            // e.g. in a v-for\r\n            return true;\r\n        }\r\n        if (patchFlag & 16 /* FULL_PROPS */) {\r\n            if (!prevProps) {\r\n                return !!nextProps;\r\n            }\r\n            // presence of this flag indicates props are always non-null\r\n            return hasPropsChanged(prevProps, nextProps, emits);\r\n        }\r\n        else if (patchFlag & 8 /* PROPS */) {\r\n            const dynamicProps = nextVNode.dynamicProps;\r\n            for (let i = 0; i < dynamicProps.length; i++) {\r\n                const key = dynamicProps[i];\r\n                if (nextProps[key] !== prevProps[key] &&\r\n                    !isEmitListener(emits, key)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // this path is only taken by manually written render functions\r\n        // so presence of any children leads to a forced update\r\n        if (prevChildren || nextChildren) {\r\n            if (!nextChildren || !nextChildren.$stable) {\r\n                return true;\r\n            }\r\n        }\r\n        if (prevProps === nextProps) {\r\n            return false;\r\n        }\r\n        if (!prevProps) {\r\n            return !!nextProps;\r\n        }\r\n        if (!nextProps) {\r\n            return true;\r\n        }\r\n        return hasPropsChanged(prevProps, nextProps, emits);\r\n    }\r\n    return false;\r\n}\r\nfunction hasPropsChanged(prevProps, nextProps, emitsOptions) {\r\n    const nextKeys = Object.keys(nextProps);\r\n    if (nextKeys.length !== Object.keys(prevProps).length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < nextKeys.length; i++) {\r\n        const key = nextKeys[i];\r\n        if (nextProps[key] !== prevProps[key] &&\r\n            !isEmitListener(emitsOptions, key)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction updateHOCHostEl({ vnode, parent }, el // HostNode\r\n) {\r\n    while (parent && parent.subTree === vnode) {\r\n        (vnode = parent.vnode).el = el;\r\n        parent = parent.parent;\r\n    }\r\n}\n\nconst isSuspense = (type) => type.__isSuspense;\r\n// Suspense exposes a component-like API, and is treated like a component\r\n// in the compiler, but internally it's a special built-in type that hooks\r\n// directly into the renderer.\r\nconst SuspenseImpl = {\r\n    name: 'Suspense',\r\n    // In order to make Suspense tree-shakable, we need to avoid importing it\r\n    // directly in the renderer. The renderer checks for the __isSuspense flag\r\n    // on a vnode's type and calls the `process` method, passing in renderer\r\n    // internals.\r\n    __isSuspense: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, \r\n    // platform-specific impl passed from renderer\r\n    rendererInternals) {\r\n        if (n1 == null) {\r\n            mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n        else {\r\n            patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);\r\n        }\r\n    },\r\n    hydrate: hydrateSuspense,\r\n    create: createSuspenseBoundary,\r\n    normalize: normalizeSuspenseChildren\r\n};\r\n// Force-casted public typing for h and TSX props inference\r\nconst Suspense = (SuspenseImpl\r\n    );\r\nfunction triggerEvent(vnode, name) {\r\n    const eventListener = vnode.props && vnode.props[name];\r\n    if (isFunction$1(eventListener)) {\r\n        eventListener();\r\n    }\r\n}\r\nfunction mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {\r\n    const { p: patch, o: { createElement } } = rendererInternals;\r\n    const hiddenContainer = createElement('div');\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals));\r\n    // start mounting the content subtree in an off-dom container\r\n    patch(null, (suspense.pendingBranch = vnode.ssContent), hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);\r\n    // now check if we have encountered any async deps\r\n    if (suspense.deps > 0) {\r\n        // has async\r\n        // invoke @fallback event\r\n        triggerEvent(vnode, 'onPending');\r\n        triggerEvent(vnode, 'onFallback');\r\n        // mount the fallback tree\r\n        patch(null, vnode.ssFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n        isSVG, slotScopeIds);\r\n        setActiveBranch(suspense, vnode.ssFallback);\r\n    }\r\n    else {\r\n        // Suspense has no async deps. Just resolve.\r\n        suspense.resolve();\r\n    }\r\n}\r\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {\r\n    const suspense = (n2.suspense = n1.suspense);\r\n    suspense.vnode = n2;\r\n    n2.el = n1.el;\r\n    const newBranch = n2.ssContent;\r\n    const newFallback = n2.ssFallback;\r\n    const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;\r\n    if (pendingBranch) {\r\n        suspense.pendingBranch = newBranch;\r\n        if (isSameVNodeType(newBranch, pendingBranch)) {\r\n            // same root type but content may have changed.\r\n            patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                suspense.resolve();\r\n            }\r\n            else if (isInFallback) {\r\n                patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, newFallback);\r\n            }\r\n        }\r\n        else {\r\n            // toggled before pending tree is resolved\r\n            suspense.pendingId++;\r\n            if (isHydrating) {\r\n                // if toggled before hydration is finished, the current DOM tree is\r\n                // no longer valid. set it as the active branch so it will be unmounted\r\n                // when resolved\r\n                suspense.isHydrating = false;\r\n                suspense.activeBranch = pendingBranch;\r\n            }\r\n            else {\r\n                unmount(pendingBranch, parentComponent, suspense);\r\n            }\r\n            // increment pending ID. this is used to invalidate async callbacks\r\n            // reset suspense state\r\n            suspense.deps = 0;\r\n            // discard effects from pending branch\r\n            suspense.effects.length = 0;\r\n            // discard previous container\r\n            suspense.hiddenContainer = createElement('div');\r\n            if (isInFallback) {\r\n                // already in fallback state\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n                else {\r\n                    patch(activeBranch, newFallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                    isSVG, slotScopeIds, optimized);\r\n                    setActiveBranch(suspense, newFallback);\r\n                }\r\n            }\r\n            else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n                // toggled \"back\" to current active branch\r\n                patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                // force resolve\r\n                suspense.resolve(true);\r\n            }\r\n            else {\r\n                // switched to a 3rd branch\r\n                patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n                if (suspense.deps <= 0) {\r\n                    suspense.resolve();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {\r\n            // root did not change, just normal patch\r\n            patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            setActiveBranch(suspense, newBranch);\r\n        }\r\n        else {\r\n            // root node toggled\r\n            // invoke @pending event\r\n            triggerEvent(n2, 'onPending');\r\n            // mount pending branch in off-dom container\r\n            suspense.pendingBranch = newBranch;\r\n            suspense.pendingId++;\r\n            patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);\r\n            if (suspense.deps <= 0) {\r\n                // incoming branch has no async deps, resolve now.\r\n                suspense.resolve();\r\n            }\r\n            else {\r\n                const { timeout, pendingId } = suspense;\r\n                if (timeout > 0) {\r\n                    setTimeout(() => {\r\n                        if (suspense.pendingId === pendingId) {\r\n                            suspense.fallback(newFallback);\r\n                        }\r\n                    }, timeout);\r\n                }\r\n                else if (timeout === 0) {\r\n                    suspense.fallback(newFallback);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nlet hasWarned = false;\r\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {\r\n    /* istanbul ignore if */\r\n    if ((process.env.NODE_ENV !== 'production') && !false && !hasWarned) {\r\n        hasWarned = true;\r\n        // @ts-ignore `console.info` cannot be null error\r\n        console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);\r\n    }\r\n    const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove } } = rendererInternals;\r\n    const timeout = toNumber(vnode.props && vnode.props.timeout);\r\n    const suspense = {\r\n        vnode,\r\n        parent,\r\n        parentComponent,\r\n        isSVG,\r\n        container,\r\n        hiddenContainer,\r\n        anchor,\r\n        deps: 0,\r\n        pendingId: 0,\r\n        timeout: typeof timeout === 'number' ? timeout : -1,\r\n        activeBranch: null,\r\n        pendingBranch: null,\r\n        isInFallback: true,\r\n        isHydrating,\r\n        isUnmounted: false,\r\n        effects: [],\r\n        resolve(resume = false) {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                if (!resume && !suspense.pendingBranch) {\r\n                    throw new Error(`suspense.resolve() is called without a pending branch.`);\r\n                }\r\n                if (suspense.isUnmounted) {\r\n                    throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);\r\n                }\r\n            }\r\n            const { vnode, activeBranch, pendingBranch, pendingId, effects, parentComponent, container } = suspense;\r\n            if (suspense.isHydrating) {\r\n                suspense.isHydrating = false;\r\n            }\r\n            else if (!resume) {\r\n                const delayEnter = activeBranch &&\r\n                    pendingBranch.transition &&\r\n                    pendingBranch.transition.mode === 'out-in';\r\n                if (delayEnter) {\r\n                    activeBranch.transition.afterLeave = () => {\r\n                        if (pendingId === suspense.pendingId) {\r\n                            move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                        }\r\n                    };\r\n                }\r\n                // this is initial anchor on mount\r\n                let { anchor } = suspense;\r\n                // unmount current active tree\r\n                if (activeBranch) {\r\n                    // if the fallback tree was mounted, it may have been moved\r\n                    // as part of a parent suspense. get the latest anchor for insertion\r\n                    anchor = next(activeBranch);\r\n                    unmount(activeBranch, parentComponent, suspense, true);\r\n                }\r\n                if (!delayEnter) {\r\n                    // move content from off-dom container to actual container\r\n                    move(pendingBranch, container, anchor, 0 /* ENTER */);\r\n                }\r\n            }\r\n            setActiveBranch(suspense, pendingBranch);\r\n            suspense.pendingBranch = null;\r\n            suspense.isInFallback = false;\r\n            // flush buffered effects\r\n            // check if there is a pending parent suspense\r\n            let parent = suspense.parent;\r\n            let hasUnresolvedAncestor = false;\r\n            while (parent) {\r\n                if (parent.pendingBranch) {\r\n                    // found a pending parent suspense, merge buffered post jobs\r\n                    // into that parent\r\n                    parent.effects.push(...effects);\r\n                    hasUnresolvedAncestor = true;\r\n                    break;\r\n                }\r\n                parent = parent.parent;\r\n            }\r\n            // no pending parent suspense, flush all jobs\r\n            if (!hasUnresolvedAncestor) {\r\n                queuePostFlushCb(effects);\r\n            }\r\n            suspense.effects = [];\r\n            // invoke @resolve event\r\n            triggerEvent(vnode, 'onResolve');\r\n        },\r\n        fallback(fallbackVNode) {\r\n            if (!suspense.pendingBranch) {\r\n                return;\r\n            }\r\n            const { vnode, activeBranch, parentComponent, container, isSVG } = suspense;\r\n            // invoke @fallback event\r\n            triggerEvent(vnode, 'onFallback');\r\n            const anchor = next(activeBranch);\r\n            const mountFallback = () => {\r\n                if (!suspense.isInFallback) {\r\n                    return;\r\n                }\r\n                // mount the fallback tree\r\n                patch(null, fallbackVNode, container, anchor, parentComponent, null, // fallback tree will not have suspense context\r\n                isSVG, slotScopeIds, optimized);\r\n                setActiveBranch(suspense, fallbackVNode);\r\n            };\r\n            const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === 'out-in';\r\n            if (delayEnter) {\r\n                activeBranch.transition.afterLeave = mountFallback;\r\n            }\r\n            suspense.isInFallback = true;\r\n            // unmount current active branch\r\n            unmount(activeBranch, parentComponent, null, // no suspense so unmount hooks fire now\r\n            true // shouldRemove\r\n            );\r\n            if (!delayEnter) {\r\n                mountFallback();\r\n            }\r\n        },\r\n        move(container, anchor, type) {\r\n            suspense.activeBranch &&\r\n                move(suspense.activeBranch, container, anchor, type);\r\n            suspense.container = container;\r\n        },\r\n        next() {\r\n            return suspense.activeBranch && next(suspense.activeBranch);\r\n        },\r\n        registerDep(instance, setupRenderEffect) {\r\n            const isInPendingSuspense = !!suspense.pendingBranch;\r\n            if (isInPendingSuspense) {\r\n                suspense.deps++;\r\n            }\r\n            const hydratedEl = instance.vnode.el;\r\n            instance\r\n                .asyncDep.catch(err => {\r\n                handleError(err, instance, 0 /* SETUP_FUNCTION */);\r\n            })\r\n                .then(asyncSetupResult => {\r\n                // retry when the setup() promise resolves.\r\n                // component may have been unmounted before resolve.\r\n                if (instance.isUnmounted ||\r\n                    suspense.isUnmounted ||\r\n                    suspense.pendingId !== instance.suspenseId) {\r\n                    return;\r\n                }\r\n                // retry from this component\r\n                instance.asyncResolved = true;\r\n                const { vnode } = instance;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(vnode);\r\n                }\r\n                handleSetupResult(instance, asyncSetupResult, false);\r\n                if (hydratedEl) {\r\n                    // vnode may have been replaced if an update happened before the\r\n                    // async dep is resolved.\r\n                    vnode.el = hydratedEl;\r\n                }\r\n                const placeholder = !hydratedEl && instance.subTree.el;\r\n                setupRenderEffect(instance, vnode, \r\n                // component may have been moved before resolve.\r\n                // if this is not a hydration, instance.subTree will be the comment\r\n                // placeholder.\r\n                parentNode(hydratedEl || instance.subTree.el), \r\n                // anchor will not be used if this is hydration, so only need to\r\n                // consider the comment placeholder case.\r\n                hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\r\n                if (placeholder) {\r\n                    remove(placeholder);\r\n                }\r\n                updateHOCHostEl(instance, vnode.el);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                // only decrease deps count if suspense is not already resolved\r\n                if (isInPendingSuspense && --suspense.deps === 0) {\r\n                    suspense.resolve();\r\n                }\r\n            });\r\n        },\r\n        unmount(parentSuspense, doRemove) {\r\n            suspense.isUnmounted = true;\r\n            if (suspense.activeBranch) {\r\n                unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n            if (suspense.pendingBranch) {\r\n                unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);\r\n            }\r\n        }\r\n    };\r\n    return suspense;\r\n}\r\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {\r\n    /* eslint-disable no-restricted-globals */\r\n    const suspense = (vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, slotScopeIds, optimized, rendererInternals, true /* hydrating */));\r\n    // there are two possible scenarios for server-rendered suspense:\r\n    // - success: ssr content should be fully resolved\r\n    // - failure: ssr content should be the fallback branch.\r\n    // however, on the client we don't really know if it has failed or not\r\n    // attempt to hydrate the DOM assuming it has succeeded, but we still\r\n    // need to construct a suspense boundary first\r\n    const result = hydrateNode(node, (suspense.pendingBranch = vnode.ssContent), parentComponent, suspense, slotScopeIds, optimized);\r\n    if (suspense.deps === 0) {\r\n        suspense.resolve();\r\n    }\r\n    return result;\r\n    /* eslint-enable no-restricted-globals */\r\n}\r\nfunction normalizeSuspenseChildren(vnode) {\r\n    const { shapeFlag, children } = vnode;\r\n    const isSlotChildren = shapeFlag & 32 /* SLOTS_CHILDREN */;\r\n    vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);\r\n    vnode.ssFallback = isSlotChildren\r\n        ? normalizeSuspenseSlot(children.fallback)\r\n        : createVNode(Comment);\r\n}\r\nfunction normalizeSuspenseSlot(s) {\r\n    let block;\r\n    if (isFunction$1(s)) {\r\n        const isCompiledSlot = s._c;\r\n        if (isCompiledSlot) {\r\n            // disableTracking: false\r\n            // allow block tracking for compiled slots\r\n            // (see ./componentRenderContext.ts)\r\n            s._d = false;\r\n            openBlock();\r\n        }\r\n        s = s();\r\n        if (isCompiledSlot) {\r\n            s._d = true;\r\n            block = currentBlock;\r\n            closeBlock();\r\n        }\r\n    }\r\n    if (isArray(s)) {\r\n        const singleChild = filterSingleRoot(s);\r\n        if ((process.env.NODE_ENV !== 'production') && !singleChild) {\r\n            warn(`<Suspense> slots expect a single root node.`);\r\n        }\r\n        s = singleChild;\r\n    }\r\n    s = normalizeVNode(s);\r\n    if (block) {\r\n        s.dynamicChildren = block.filter(c => c !== s);\r\n    }\r\n    return s;\r\n}\r\nfunction queueEffectWithSuspense(fn, suspense) {\r\n    if (suspense && suspense.pendingBranch) {\r\n        if (isArray(fn)) {\r\n            suspense.effects.push(...fn);\r\n        }\r\n        else {\r\n            suspense.effects.push(fn);\r\n        }\r\n    }\r\n    else {\r\n        queuePostFlushCb(fn);\r\n    }\r\n}\r\nfunction setActiveBranch(suspense, branch) {\r\n    suspense.activeBranch = branch;\r\n    const { vnode, parentComponent } = suspense;\r\n    const el = (vnode.el = branch.el);\r\n    // in case suspense is the root node of a component,\r\n    // recursively update the HOC el\r\n    if (parentComponent && parentComponent.subTree === vnode) {\r\n        parentComponent.vnode.el = el;\r\n        updateHOCHostEl(parentComponent, el);\r\n    }\r\n}\n\nfunction provide(key, value) {\r\n    if (!currentInstance) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`provide() can only be used inside setup().`);\r\n        }\r\n    }\r\n    else {\r\n        let provides = currentInstance.provides;\r\n        // by default an instance inherits its parent's provides object\r\n        // but when it needs to provide values of its own, it creates its\r\n        // own provides object using parent provides object as prototype.\r\n        // this way in `inject` we can simply look up injections from direct\r\n        // parent and let the prototype chain do the work.\r\n        const parentProvides = currentInstance.parent && currentInstance.parent.provides;\r\n        if (parentProvides === provides) {\r\n            provides = currentInstance.provides = Object.create(parentProvides);\r\n        }\r\n        // TS doesn't allow symbol as index type\r\n        provides[key] = value;\r\n    }\r\n}\r\nfunction inject(key, defaultValue, treatDefaultAsFactory = false) {\r\n    // fallback to `currentRenderingInstance` so that this can be called in\r\n    // a functional component\r\n    const instance = currentInstance || currentRenderingInstance;\r\n    if (instance) {\r\n        // #2400\r\n        // to support `app.use` plugins,\r\n        // fallback to appContext's `provides` if the intance is at root\r\n        const provides = instance.parent == null\r\n            ? instance.vnode.appContext && instance.vnode.appContext.provides\r\n            : instance.parent.provides;\r\n        if (provides && key in provides) {\r\n            // TS doesn't allow symbol as index type\r\n            return provides[key];\r\n        }\r\n        else if (arguments.length > 1) {\r\n            return treatDefaultAsFactory && isFunction$1(defaultValue)\r\n                ? defaultValue.call(instance.proxy)\r\n                : defaultValue;\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`injection \"${String(key)}\" not found.`);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`inject() can only be used inside setup() or functional components.`);\r\n    }\r\n}\n\n// Simple effect.\r\nfunction watchEffect(effect, options) {\r\n    return doWatch(effect, null, options);\r\n}\r\n// initial value for watchers to trigger on undefined initial values\r\nconst INITIAL_WATCHER_VALUE = {};\r\n// implementation\r\nfunction watch(source, cb, options) {\r\n    if ((process.env.NODE_ENV !== 'production') && !isFunction$1(cb)) {\r\n        warn(`\\`watch(fn, options?)\\` signature has been moved to a separate API. ` +\r\n            `Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only ` +\r\n            `supports \\`watch(source, cb, options?) signature.`);\r\n    }\r\n    return doWatch(source, cb, options);\r\n}\r\nfunction doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ, instance = currentInstance) {\r\n    if ((process.env.NODE_ENV !== 'production') && !cb) {\r\n        if (immediate !== undefined) {\r\n            warn(`watch() \"immediate\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n        if (deep !== undefined) {\r\n            warn(`watch() \"deep\" option is only respected when using the ` +\r\n                `watch(source, callback, options?) signature.`);\r\n        }\r\n    }\r\n    const warnInvalidSource = (s) => {\r\n        warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` +\r\n            `a reactive object, or an array of these types.`);\r\n    };\r\n    let getter;\r\n    let forceTrigger = false;\r\n    let isMultiSource = false;\r\n    if (isRef(source)) {\r\n        getter = () => source.value;\r\n        forceTrigger = !!source._shallow;\r\n    }\r\n    else if (isReactive(source)) {\r\n        getter = () => source;\r\n        deep = true;\r\n    }\r\n    else if (isArray(source)) {\r\n        isMultiSource = true;\r\n        forceTrigger = source.some(isReactive);\r\n        getter = () => source.map(s => {\r\n            if (isRef(s)) {\r\n                return s.value;\r\n            }\r\n            else if (isReactive(s)) {\r\n                return traverse(s);\r\n            }\r\n            else if (isFunction$1(s)) {\r\n                return callWithErrorHandling(s, instance, 2 /* WATCH_GETTER */);\r\n            }\r\n            else {\r\n                (process.env.NODE_ENV !== 'production') && warnInvalidSource(s);\r\n            }\r\n        });\r\n    }\r\n    else if (isFunction$1(source)) {\r\n        if (cb) {\r\n            // getter with cb\r\n            getter = () => callWithErrorHandling(source, instance, 2 /* WATCH_GETTER */);\r\n        }\r\n        else {\r\n            // no cb -> simple effect\r\n            getter = () => {\r\n                if (instance && instance.isUnmounted) {\r\n                    return;\r\n                }\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                return callWithAsyncErrorHandling(source, instance, 3 /* WATCH_CALLBACK */, [onInvalidate]);\r\n            };\r\n        }\r\n    }\r\n    else {\r\n        getter = NOOP;\r\n        (process.env.NODE_ENV !== 'production') && warnInvalidSource(source);\r\n    }\r\n    if (cb && deep) {\r\n        const baseGetter = getter;\r\n        getter = () => traverse(baseGetter());\r\n    }\r\n    let cleanup;\r\n    let onInvalidate = (fn) => {\r\n        cleanup = runner.options.onStop = () => {\r\n            callWithErrorHandling(fn, instance, 4 /* WATCH_CLEANUP */);\r\n        };\r\n    };\r\n    let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;\r\n    const job = () => {\r\n        if (!runner.active) {\r\n            return;\r\n        }\r\n        if (cb) {\r\n            // watch(source, cb)\r\n            const newValue = runner();\r\n            if (deep ||\r\n                forceTrigger ||\r\n                (isMultiSource\r\n                    ? newValue.some((v, i) => hasChanged(v, oldValue[i]))\r\n                    : hasChanged(newValue, oldValue)) ||\r\n                (false  )) {\r\n                // cleanup before running cb again\r\n                if (cleanup) {\r\n                    cleanup();\r\n                }\r\n                callWithAsyncErrorHandling(cb, instance, 3 /* WATCH_CALLBACK */, [\r\n                    newValue,\r\n                    // pass undefined as the old value when it's changed for the first time\r\n                    oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue,\r\n                    onInvalidate\r\n                ]);\r\n                oldValue = newValue;\r\n            }\r\n        }\r\n        else {\r\n            // watchEffect\r\n            runner();\r\n        }\r\n    };\r\n    // important: mark the job as a watcher callback so that scheduler knows\r\n    // it is allowed to self-trigger (#1727)\r\n    job.allowRecurse = !!cb;\r\n    let scheduler;\r\n    if (flush === 'sync') {\r\n        scheduler = job; // the scheduler function gets called directly\r\n    }\r\n    else if (flush === 'post') {\r\n        scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\r\n    }\r\n    else {\r\n        // default: 'pre'\r\n        scheduler = () => {\r\n            if (!instance || instance.isMounted) {\r\n                queuePreFlushCb(job);\r\n            }\r\n            else {\r\n                // with 'pre' option, the first call must happen before\r\n                // the component is mounted so it is called synchronously.\r\n                job();\r\n            }\r\n        };\r\n    }\r\n    const runner = effect(getter, {\r\n        lazy: true,\r\n        onTrack,\r\n        onTrigger,\r\n        scheduler\r\n    });\r\n    recordInstanceBoundEffect(runner, instance);\r\n    // initial run\r\n    if (cb) {\r\n        if (immediate) {\r\n            job();\r\n        }\r\n        else {\r\n            oldValue = runner();\r\n        }\r\n    }\r\n    else if (flush === 'post') {\r\n        queuePostRenderEffect(runner, instance && instance.suspense);\r\n    }\r\n    else {\r\n        runner();\r\n    }\r\n    return () => {\r\n        stop(runner);\r\n        if (instance) {\r\n            remove(instance.effects, runner);\r\n        }\r\n    };\r\n}\r\n// this.$watch\r\nfunction instanceWatch(source, value, options) {\r\n    const publicThis = this.proxy;\r\n    const getter = isString(source)\r\n        ? source.includes('.')\r\n            ? createPathGetter(publicThis, source)\r\n            : () => publicThis[source]\r\n        : source.bind(publicThis, publicThis);\r\n    let cb;\r\n    if (isFunction$1(value)) {\r\n        cb = value;\r\n    }\r\n    else {\r\n        cb = value.handler;\r\n        options = value;\r\n    }\r\n    return doWatch(getter, cb.bind(publicThis), options, this);\r\n}\r\nfunction createPathGetter(ctx, path) {\r\n    const segments = path.split('.');\r\n    return () => {\r\n        let cur = ctx;\r\n        for (let i = 0; i < segments.length && cur; i++) {\r\n            cur = cur[segments[i]];\r\n        }\r\n        return cur;\r\n    };\r\n}\r\nfunction traverse(value, seen = new Set()) {\r\n    if (!isObject$1(value) ||\r\n        seen.has(value) ||\r\n        value[\"__v_skip\" /* SKIP */]) {\r\n        return value;\r\n    }\r\n    seen.add(value);\r\n    if (isRef(value)) {\r\n        traverse(value.value, seen);\r\n    }\r\n    else if (isArray(value)) {\r\n        for (let i = 0; i < value.length; i++) {\r\n            traverse(value[i], seen);\r\n        }\r\n    }\r\n    else if (isSet(value) || isMap(value)) {\r\n        value.forEach((v) => {\r\n            traverse(v, seen);\r\n        });\r\n    }\r\n    else if (isPlainObject(value)) {\r\n        for (const key in value) {\r\n            traverse(value[key], seen);\r\n        }\r\n    }\r\n    return value;\r\n}\n\nfunction useTransitionState() {\r\n    const state = {\r\n        isMounted: false,\r\n        isLeaving: false,\r\n        isUnmounting: false,\r\n        leavingVNodes: new Map()\r\n    };\r\n    onMounted(() => {\r\n        state.isMounted = true;\r\n    });\r\n    onBeforeUnmount(() => {\r\n        state.isUnmounting = true;\r\n    });\r\n    return state;\r\n}\r\nconst TransitionHookValidator = [Function, Array];\r\nconst BaseTransitionImpl = {\r\n    name: `BaseTransition`,\r\n    props: {\r\n        mode: String,\r\n        appear: Boolean,\r\n        persisted: Boolean,\r\n        // enter\r\n        onBeforeEnter: TransitionHookValidator,\r\n        onEnter: TransitionHookValidator,\r\n        onAfterEnter: TransitionHookValidator,\r\n        onEnterCancelled: TransitionHookValidator,\r\n        // leave\r\n        onBeforeLeave: TransitionHookValidator,\r\n        onLeave: TransitionHookValidator,\r\n        onAfterLeave: TransitionHookValidator,\r\n        onLeaveCancelled: TransitionHookValidator,\r\n        // appear\r\n        onBeforeAppear: TransitionHookValidator,\r\n        onAppear: TransitionHookValidator,\r\n        onAfterAppear: TransitionHookValidator,\r\n        onAppearCancelled: TransitionHookValidator\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        const state = useTransitionState();\r\n        let prevTransitionKey;\r\n        return () => {\r\n            const children = slots.default && getTransitionRawChildren(slots.default(), true);\r\n            if (!children || !children.length) {\r\n                return;\r\n            }\r\n            // warn multiple elements\r\n            if ((process.env.NODE_ENV !== 'production') && children.length > 1) {\r\n                warn('<transition> can only be used on a single element or component. Use ' +\r\n                    '<transition-group> for lists.');\r\n            }\r\n            // there's no need to track reactivity for these props so use the raw\r\n            // props for a bit better perf\r\n            const rawProps = toRaw(props);\r\n            const { mode } = rawProps;\r\n            // check mode\r\n            if ((process.env.NODE_ENV !== 'production') && mode && !['in-out', 'out-in', 'default'].includes(mode)) {\r\n                warn(`invalid <transition> mode: ${mode}`);\r\n            }\r\n            // at this point children has a guaranteed length of 1.\r\n            const child = children[0];\r\n            if (state.isLeaving) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            // in the case of <transition><keep-alive/></transition>, we need to\r\n            // compare the type of the kept-alive children.\r\n            const innerChild = getKeepAliveChild(child);\r\n            if (!innerChild) {\r\n                return emptyPlaceholder(child);\r\n            }\r\n            const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);\r\n            setTransitionHooks(innerChild, enterHooks);\r\n            const oldChild = instance.subTree;\r\n            const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\r\n            let transitionKeyChanged = false;\r\n            const { getTransitionKey } = innerChild.type;\r\n            if (getTransitionKey) {\r\n                const key = getTransitionKey();\r\n                if (prevTransitionKey === undefined) {\r\n                    prevTransitionKey = key;\r\n                }\r\n                else if (key !== prevTransitionKey) {\r\n                    prevTransitionKey = key;\r\n                    transitionKeyChanged = true;\r\n                }\r\n            }\r\n            // handle mode\r\n            if (oldInnerChild &&\r\n                oldInnerChild.type !== Comment$1 &&\r\n                (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\r\n                const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);\r\n                // update old tree's hooks in case of dynamic transition\r\n                setTransitionHooks(oldInnerChild, leavingHooks);\r\n                // switching between different views\r\n                if (mode === 'out-in') {\r\n                    state.isLeaving = true;\r\n                    // return placeholder node and queue update when leave finishes\r\n                    leavingHooks.afterLeave = () => {\r\n                        state.isLeaving = false;\r\n                        instance.update();\r\n                    };\r\n                    return emptyPlaceholder(child);\r\n                }\r\n                else if (mode === 'in-out' && innerChild.type !== Comment$1) {\r\n                    leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\r\n                        const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\r\n                        leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;\r\n                        // early removal callback\r\n                        el._leaveCb = () => {\r\n                            earlyRemove();\r\n                            el._leaveCb = undefined;\r\n                            delete enterHooks.delayedLeave;\r\n                        };\r\n                        enterHooks.delayedLeave = delayedLeave;\r\n                    };\r\n                }\r\n            }\r\n            return child;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst BaseTransition = BaseTransitionImpl;\r\nfunction getLeavingNodesForType(state, vnode) {\r\n    const { leavingVNodes } = state;\r\n    let leavingVNodesCache = leavingVNodes.get(vnode.type);\r\n    if (!leavingVNodesCache) {\r\n        leavingVNodesCache = Object.create(null);\r\n        leavingVNodes.set(vnode.type, leavingVNodesCache);\r\n    }\r\n    return leavingVNodesCache;\r\n}\r\n// The transition hooks are attached to the vnode as vnode.transition\r\n// and will be called at appropriate timing in the renderer.\r\nfunction resolveTransitionHooks(vnode, props, state, instance) {\r\n    const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;\r\n    const key = String(vnode.key);\r\n    const leavingVNodesCache = getLeavingNodesForType(state, vnode);\r\n    const callHook = (hook, args) => {\r\n        hook &&\r\n            callWithAsyncErrorHandling(hook, instance, 9 /* TRANSITION_HOOK */, args);\r\n    };\r\n    const hooks = {\r\n        mode,\r\n        persisted,\r\n        beforeEnter(el) {\r\n            let hook = onBeforeEnter;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onBeforeAppear || onBeforeEnter;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            // for same element (v-show)\r\n            if (el._leaveCb) {\r\n                el._leaveCb(true /* cancelled */);\r\n            }\r\n            // for toggled element with same key (v-if)\r\n            const leavingVNode = leavingVNodesCache[key];\r\n            if (leavingVNode &&\r\n                isSameVNodeType(vnode, leavingVNode) &&\r\n                leavingVNode.el._leaveCb) {\r\n                // force early removal (not cancelled)\r\n                leavingVNode.el._leaveCb();\r\n            }\r\n            callHook(hook, [el]);\r\n        },\r\n        enter(el) {\r\n            let hook = onEnter;\r\n            let afterHook = onAfterEnter;\r\n            let cancelHook = onEnterCancelled;\r\n            if (!state.isMounted) {\r\n                if (appear) {\r\n                    hook = onAppear || onEnter;\r\n                    afterHook = onAfterAppear || onAfterEnter;\r\n                    cancelHook = onAppearCancelled || onEnterCancelled;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            }\r\n            let called = false;\r\n            const done = (el._enterCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                if (cancelled) {\r\n                    callHook(cancelHook, [el]);\r\n                }\r\n                else {\r\n                    callHook(afterHook, [el]);\r\n                }\r\n                if (hooks.delayedLeave) {\r\n                    hooks.delayedLeave();\r\n                }\r\n                el._enterCb = undefined;\r\n            });\r\n            if (hook) {\r\n                hook(el, done);\r\n                if (hook.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        leave(el, remove) {\r\n            const key = String(vnode.key);\r\n            if (el._enterCb) {\r\n                el._enterCb(true /* cancelled */);\r\n            }\r\n            if (state.isUnmounting) {\r\n                return remove();\r\n            }\r\n            callHook(onBeforeLeave, [el]);\r\n            let called = false;\r\n            const done = (el._leaveCb = (cancelled) => {\r\n                if (called)\r\n                    return;\r\n                called = true;\r\n                remove();\r\n                if (cancelled) {\r\n                    callHook(onLeaveCancelled, [el]);\r\n                }\r\n                else {\r\n                    callHook(onAfterLeave, [el]);\r\n                }\r\n                el._leaveCb = undefined;\r\n                if (leavingVNodesCache[key] === vnode) {\r\n                    delete leavingVNodesCache[key];\r\n                }\r\n            });\r\n            leavingVNodesCache[key] = vnode;\r\n            if (onLeave) {\r\n                onLeave(el, done);\r\n                if (onLeave.length <= 1) {\r\n                    done();\r\n                }\r\n            }\r\n            else {\r\n                done();\r\n            }\r\n        },\r\n        clone(vnode) {\r\n            return resolveTransitionHooks(vnode, props, state, instance);\r\n        }\r\n    };\r\n    return hooks;\r\n}\r\n// the placeholder really only handles one special case: KeepAlive\r\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\r\n// placeholder with empty content to avoid the KeepAlive instance from being\r\n// unmounted.\r\nfunction emptyPlaceholder(vnode) {\r\n    if (isKeepAlive(vnode)) {\r\n        vnode = cloneVNode(vnode);\r\n        vnode.children = null;\r\n        return vnode;\r\n    }\r\n}\r\nfunction getKeepAliveChild(vnode) {\r\n    return isKeepAlive(vnode)\r\n        ? vnode.children\r\n            ? vnode.children[0]\r\n            : undefined\r\n        : vnode;\r\n}\r\nfunction setTransitionHooks(vnode, hooks) {\r\n    if (vnode.shapeFlag & 6 /* COMPONENT */ && vnode.component) {\r\n        setTransitionHooks(vnode.component.subTree, hooks);\r\n    }\r\n    else if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n        vnode.ssContent.transition = hooks.clone(vnode.ssContent);\r\n        vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);\r\n    }\r\n    else {\r\n        vnode.transition = hooks;\r\n    }\r\n}\r\nfunction getTransitionRawChildren(children, keepComment = false) {\r\n    let ret = [];\r\n    let keyedFragmentCount = 0;\r\n    for (let i = 0; i < children.length; i++) {\r\n        const child = children[i];\r\n        // handle fragment children case, e.g. v-for\r\n        if (child.type === Fragment) {\r\n            if (child.patchFlag & 128 /* KEYED_FRAGMENT */)\r\n                keyedFragmentCount++;\r\n            ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\r\n        }\r\n        // comment placeholders should be skipped, e.g. v-if\r\n        else if (keepComment || child.type !== Comment$1) {\r\n            ret.push(child);\r\n        }\r\n    }\r\n    // #1126 if a transition children list contains multiple sub fragments, these\r\n    // fragments will be merged into a flat children array. Since each v-for\r\n    // fragment may contain different static bindings inside, we need to de-op\r\n    // these children to force full diffs to ensure correct behavior.\r\n    if (keyedFragmentCount > 1) {\r\n        for (let i = 0; i < ret.length; i++) {\r\n            ret[i].patchFlag = -2 /* BAIL */;\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n// implementation, close to no-op\r\nfunction defineComponent(options) {\r\n    return isFunction$1(options) ? { setup: options, name: options.name } : options;\r\n}\n\nconst isAsyncWrapper = (i) => !!i.type.__asyncLoader;\r\nfunction defineAsyncComponent(source) {\r\n    if (isFunction$1(source)) {\r\n        source = { loader: source };\r\n    }\r\n    const { loader, loadingComponent, errorComponent, delay = 200, timeout, // undefined = never times out\r\n    suspensible = true, onError: userOnError } = source;\r\n    let pendingRequest = null;\r\n    let resolvedComp;\r\n    let retries = 0;\r\n    const retry = () => {\r\n        retries++;\r\n        pendingRequest = null;\r\n        return load();\r\n    };\r\n    const load = () => {\r\n        let thisRequest;\r\n        return (pendingRequest ||\r\n            (thisRequest = pendingRequest = loader()\r\n                .catch(err => {\r\n                err = err instanceof Error ? err : new Error(String(err));\r\n                if (userOnError) {\r\n                    return new Promise((resolve, reject) => {\r\n                        const userRetry = () => resolve(retry());\r\n                        const userFail = () => reject(err);\r\n                        userOnError(err, userRetry, userFail, retries + 1);\r\n                    });\r\n                }\r\n                else {\r\n                    throw err;\r\n                }\r\n            })\r\n                .then((comp) => {\r\n                if (thisRequest !== pendingRequest && pendingRequest) {\r\n                    return pendingRequest;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && !comp) {\r\n                    warn(`Async component loader resolved to undefined. ` +\r\n                        `If you are using retry(), make sure to return its return value.`);\r\n                }\r\n                // interop module default\r\n                if (comp &&\r\n                    (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\r\n                    comp = comp.default;\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && comp && !isObject$1(comp) && !isFunction$1(comp)) {\r\n                    throw new Error(`Invalid async component load result: ${comp}`);\r\n                }\r\n                resolvedComp = comp;\r\n                return comp;\r\n            })));\r\n    };\r\n    return defineComponent({\r\n        name: 'AsyncComponentWrapper',\r\n        __asyncLoader: load,\r\n        get __asyncResolved() {\r\n            return resolvedComp;\r\n        },\r\n        setup() {\r\n            const instance = currentInstance;\r\n            // already resolved\r\n            if (resolvedComp) {\r\n                return () => createInnerComp(resolvedComp, instance);\r\n            }\r\n            const onError = (err) => {\r\n                pendingRequest = null;\r\n                handleError(err, instance, 13 /* ASYNC_COMPONENT_LOADER */, !errorComponent /* do not throw in dev if user provided error component */);\r\n            };\r\n            // suspense-controlled or SSR.\r\n            if ((suspensible && instance.suspense) ||\r\n                (false )) {\r\n                return load()\r\n                    .then(comp => {\r\n                    return () => createInnerComp(comp, instance);\r\n                })\r\n                    .catch(err => {\r\n                    onError(err);\r\n                    return () => errorComponent\r\n                        ? createVNode(errorComponent, {\r\n                            error: err\r\n                        })\r\n                        : null;\r\n                });\r\n            }\r\n            const loaded = ref(false);\r\n            const error = ref();\r\n            const delayed = ref(!!delay);\r\n            if (delay) {\r\n                setTimeout(() => {\r\n                    delayed.value = false;\r\n                }, delay);\r\n            }\r\n            if (timeout != null) {\r\n                setTimeout(() => {\r\n                    if (!loaded.value && !error.value) {\r\n                        const err = new Error(`Async component timed out after ${timeout}ms.`);\r\n                        onError(err);\r\n                        error.value = err;\r\n                    }\r\n                }, timeout);\r\n            }\r\n            load()\r\n                .then(() => {\r\n                loaded.value = true;\r\n                if (instance.parent && isKeepAlive(instance.parent.vnode)) {\r\n                    // parent is keep-alive, force update so the loaded component's\r\n                    // name is taken into account\r\n                    queueJob(instance.parent.update);\r\n                }\r\n            })\r\n                .catch(err => {\r\n                onError(err);\r\n                error.value = err;\r\n            });\r\n            return () => {\r\n                if (loaded.value && resolvedComp) {\r\n                    return createInnerComp(resolvedComp, instance);\r\n                }\r\n                else if (error.value && errorComponent) {\r\n                    return createVNode(errorComponent, {\r\n                        error: error.value\r\n                    });\r\n                }\r\n                else if (loadingComponent && !delayed.value) {\r\n                    return createVNode(loadingComponent);\r\n                }\r\n            };\r\n        }\r\n    });\r\n}\r\nfunction createInnerComp(comp, { vnode: { ref, props, children } }) {\r\n    const vnode = createVNode(comp, props, children);\r\n    // ensure inner component inherits the async wrapper's ref owner\r\n    vnode.ref = ref;\r\n    return vnode;\r\n}\n\nconst isKeepAlive = (vnode) => vnode.type.__isKeepAlive;\r\nconst KeepAliveImpl = {\r\n    name: `KeepAlive`,\r\n    // Marker for special handling inside the renderer. We are not using a ===\r\n    // check directly on KeepAlive in the renderer, because importing it directly\r\n    // would prevent it from being tree-shaken.\r\n    __isKeepAlive: true,\r\n    props: {\r\n        include: [String, RegExp, Array],\r\n        exclude: [String, RegExp, Array],\r\n        max: [String, Number]\r\n    },\r\n    setup(props, { slots }) {\r\n        const instance = getCurrentInstance();\r\n        // KeepAlive communicates with the instantiated renderer via the\r\n        // ctx where the renderer passes in its internals,\r\n        // and the KeepAlive instance exposes activate/deactivate implementations.\r\n        // The whole point of this is to avoid importing KeepAlive directly in the\r\n        // renderer to facilitate tree-shaking.\r\n        const sharedContext = instance.ctx;\r\n        // if the internal renderer is not registered, it indicates that this is server-side rendering,\r\n        // for KeepAlive, we just need to render its children\r\n        if (!sharedContext.renderer) {\r\n            return slots.default;\r\n        }\r\n        const cache = new Map();\r\n        const keys = new Set();\r\n        let current = null;\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.__v_cache = cache;\r\n        }\r\n        const parentSuspense = instance.suspense;\r\n        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;\r\n        const storageContainer = createElement('div');\r\n        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\r\n            const instance = vnode.component;\r\n            move(vnode, container, anchor, 0 /* ENTER */, parentSuspense);\r\n            // in case props have changed\r\n            patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, vnode.slotScopeIds, optimized);\r\n            queuePostRenderEffect(() => {\r\n                instance.isDeactivated = false;\r\n                if (instance.a) {\r\n                    invokeArrayFns(instance.a);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n            }, parentSuspense);\r\n            if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                // Update components tree\r\n                devtoolsComponentAdded(instance);\r\n            }\r\n        };\r\n        sharedContext.deactivate = (vnode) => {\r\n            const instance = vnode.component;\r\n            move(vnode, storageContainer, null, 1 /* LEAVE */, parentSuspense);\r\n            queuePostRenderEffect(() => {\r\n                if (instance.da) {\r\n                    invokeArrayFns(instance.da);\r\n                }\r\n                const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\r\n                if (vnodeHook) {\r\n                    invokeVNodeHook(vnodeHook, instance.parent, vnode);\r\n                }\r\n                instance.isDeactivated = true;\r\n            }, parentSuspense);\r\n            if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                // Update components tree\r\n                devtoolsComponentAdded(instance);\r\n            }\r\n        };\r\n        function unmount(vnode) {\r\n            // reset the shapeFlag so it can be properly unmounted\r\n            resetShapeFlag(vnode);\r\n            _unmount(vnode, instance, parentSuspense);\r\n        }\r\n        function pruneCache(filter) {\r\n            cache.forEach((vnode, key) => {\r\n                const name = getComponentName(vnode.type);\r\n                if (name && (!filter || !filter(name))) {\r\n                    pruneCacheEntry(key);\r\n                }\r\n            });\r\n        }\r\n        function pruneCacheEntry(key) {\r\n            const cached = cache.get(key);\r\n            if (!current || cached.type !== current.type) {\r\n                unmount(cached);\r\n            }\r\n            else if (current) {\r\n                // current active instance should no longer be kept-alive.\r\n                // we can't unmount it now but it might be later, so reset its flag now.\r\n                resetShapeFlag(current);\r\n            }\r\n            cache.delete(key);\r\n            keys.delete(key);\r\n        }\r\n        // prune cache on include/exclude prop change\r\n        watch(() => [props.include, props.exclude], ([include, exclude]) => {\r\n            include && pruneCache(name => matches(include, name));\r\n            exclude && pruneCache(name => !matches(exclude, name));\r\n        }, \r\n        // prune post-render after `current` has been updated\r\n        { flush: 'post', deep: true });\r\n        // cache sub tree after render\r\n        let pendingCacheKey = null;\r\n        const cacheSubtree = () => {\r\n            // fix #1621, the pendingCacheKey could be 0\r\n            if (pendingCacheKey != null) {\r\n                cache.set(pendingCacheKey, getInnerChild(instance.subTree));\r\n            }\r\n        };\r\n        onMounted(cacheSubtree);\r\n        onUpdated(cacheSubtree);\r\n        onBeforeUnmount(() => {\r\n            cache.forEach(cached => {\r\n                const { subTree, suspense } = instance;\r\n                const vnode = getInnerChild(subTree);\r\n                if (cached.type === vnode.type) {\r\n                    // current instance will be unmounted as part of keep-alive's unmount\r\n                    resetShapeFlag(vnode);\r\n                    // but invoke its deactivated hook here\r\n                    const da = vnode.component.da;\r\n                    da && queuePostRenderEffect(da, suspense);\r\n                    return;\r\n                }\r\n                unmount(cached);\r\n            });\r\n        });\r\n        return () => {\r\n            pendingCacheKey = null;\r\n            if (!slots.default) {\r\n                return null;\r\n            }\r\n            const children = slots.default();\r\n            const rawVNode = children[0];\r\n            if (children.length > 1) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`KeepAlive should contain exactly one component child.`);\r\n                }\r\n                current = null;\r\n                return children;\r\n            }\r\n            else if (!isVNode(rawVNode) ||\r\n                (!(rawVNode.shapeFlag & 4 /* STATEFUL_COMPONENT */) &&\r\n                    !(rawVNode.shapeFlag & 128 /* SUSPENSE */))) {\r\n                current = null;\r\n                return rawVNode;\r\n            }\r\n            let vnode = getInnerChild(rawVNode);\r\n            const comp = vnode.type;\r\n            // for async components, name check should be based in its loaded\r\n            // inner component if available\r\n            const name = getComponentName(isAsyncWrapper(vnode)\r\n                ? vnode.type.__asyncResolved || {}\r\n                : comp);\r\n            const { include, exclude, max } = props;\r\n            if ((include && (!name || !matches(include, name))) ||\r\n                (exclude && name && matches(exclude, name))) {\r\n                current = vnode;\r\n                return rawVNode;\r\n            }\r\n            const key = vnode.key == null ? comp : vnode.key;\r\n            const cachedVNode = cache.get(key);\r\n            // clone vnode if it's reused because we are going to mutate it\r\n            if (vnode.el) {\r\n                vnode = cloneVNode(vnode);\r\n                if (rawVNode.shapeFlag & 128 /* SUSPENSE */) {\r\n                    rawVNode.ssContent = vnode;\r\n                }\r\n            }\r\n            // #1513 it's possible for the returned vnode to be cloned due to attr\r\n            // fallthrough or scopeId, so the vnode here may not be the final vnode\r\n            // that is mounted. Instead of caching it directly, we store the pending\r\n            // key and cache `instance.subTree` (the normalized vnode) in\r\n            // beforeMount/beforeUpdate hooks.\r\n            pendingCacheKey = key;\r\n            if (cachedVNode) {\r\n                // copy over mounted state\r\n                vnode.el = cachedVNode.el;\r\n                vnode.component = cachedVNode.component;\r\n                if (vnode.transition) {\r\n                    // recursively update transition hooks on subTree\r\n                    setTransitionHooks(vnode, vnode.transition);\r\n                }\r\n                // avoid vnode being mounted as fresh\r\n                vnode.shapeFlag |= 512 /* COMPONENT_KEPT_ALIVE */;\r\n                // make this key the freshest\r\n                keys.delete(key);\r\n                keys.add(key);\r\n            }\r\n            else {\r\n                keys.add(key);\r\n                // prune oldest entry\r\n                if (max && keys.size > parseInt(max, 10)) {\r\n                    pruneCacheEntry(keys.values().next().value);\r\n                }\r\n            }\r\n            // avoid vnode being unmounted\r\n            vnode.shapeFlag |= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n            current = vnode;\r\n            return rawVNode;\r\n        };\r\n    }\r\n};\r\n// export the public type for h/tsx inference\r\n// also to avoid inline import() in generated d.ts files\r\nconst KeepAlive = KeepAliveImpl;\r\nfunction matches(pattern, name) {\r\n    if (isArray(pattern)) {\r\n        return pattern.some((p) => matches(p, name));\r\n    }\r\n    else if (isString(pattern)) {\r\n        return pattern.split(',').indexOf(name) > -1;\r\n    }\r\n    else if (pattern.test) {\r\n        return pattern.test(name);\r\n    }\r\n    /* istanbul ignore next */\r\n    return false;\r\n}\r\nfunction onActivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"a\" /* ACTIVATED */, target);\r\n}\r\nfunction onDeactivated(hook, target) {\r\n    registerKeepAliveHook(hook, \"da\" /* DEACTIVATED */, target);\r\n}\r\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\r\n    // cache the deactivate branch check wrapper for injected hooks so the same\r\n    // hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with\r\n    // deactivation check\".\r\n    const wrappedHook = hook.__wdc ||\r\n        (hook.__wdc = () => {\r\n            // only fire the hook if the target instance is NOT in a deactivated branch.\r\n            let current = target;\r\n            while (current) {\r\n                if (current.isDeactivated) {\r\n                    return;\r\n                }\r\n                current = current.parent;\r\n            }\r\n            hook();\r\n        });\r\n    injectHook(type, wrappedHook, target);\r\n    // In addition to registering it on the target instance, we walk up the parent\r\n    // chain and register it on all ancestor instances that are keep-alive roots.\r\n    // This avoids the need to walk the entire component tree when invoking these\r\n    // hooks, and more importantly, avoids the need to track child components in\r\n    // arrays.\r\n    if (target) {\r\n        let current = target.parent;\r\n        while (current && current.parent) {\r\n            if (isKeepAlive(current.parent.vnode)) {\r\n                injectToKeepAliveRoot(wrappedHook, type, target, current);\r\n            }\r\n            current = current.parent;\r\n        }\r\n    }\r\n}\r\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\r\n    // injectHook wraps the original for error handling, so make sure to remove\r\n    // the wrapped version.\r\n    const injected = injectHook(type, hook, keepAliveRoot, true /* prepend */);\r\n    onUnmounted(() => {\r\n        remove(keepAliveRoot[type], injected);\r\n    }, target);\r\n}\r\nfunction resetShapeFlag(vnode) {\r\n    let shapeFlag = vnode.shapeFlag;\r\n    if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n        shapeFlag -= 256 /* COMPONENT_SHOULD_KEEP_ALIVE */;\r\n    }\r\n    if (shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n        shapeFlag -= 512 /* COMPONENT_KEPT_ALIVE */;\r\n    }\r\n    vnode.shapeFlag = shapeFlag;\r\n}\r\nfunction getInnerChild(vnode) {\r\n    return vnode.shapeFlag & 128 /* SUSPENSE */ ? vnode.ssContent : vnode;\r\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\r\n    if (target) {\r\n        const hooks = target[type] || (target[type] = []);\r\n        // cache the error handling wrapper for injected hooks so the same hook\r\n        // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\r\n        // handling\".\r\n        const wrappedHook = hook.__weh ||\r\n            (hook.__weh = (...args) => {\r\n                if (target.isUnmounted) {\r\n                    return;\r\n                }\r\n                // disable tracking inside all lifecycle hooks\r\n                // since they can potentially be called inside effects.\r\n                pauseTracking();\r\n                // Set currentInstance during hook invocation.\r\n                // This assumes the hook does not synchronously trigger other hooks, which\r\n                // can only be false when the user does something really funky.\r\n                setCurrentInstance(target);\r\n                const res = callWithAsyncErrorHandling(hook, target, type, args);\r\n                setCurrentInstance(null);\r\n                resetTracking();\r\n                return res;\r\n            });\r\n        if (prepend) {\r\n            hooks.unshift(wrappedHook);\r\n        }\r\n        else {\r\n            hooks.push(wrappedHook);\r\n        }\r\n        return wrappedHook;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ''));\r\n        warn(`${apiName} is called when there is no active component instance to be ` +\r\n            `associated with. ` +\r\n            `Lifecycle injection APIs can only be used during execution of setup().` +\r\n            (` If you are using async setup(), make sure to register lifecycle ` +\r\n                    `hooks before the first await statement.`\r\n                ));\r\n    }\r\n}\r\nconst createHook = (lifecycle) => (hook, target = currentInstance) => \r\n// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)\r\n(!isInSSRComponentSetup || lifecycle === \"sp\" /* SERVER_PREFETCH */) &&\r\n    injectHook(lifecycle, hook, target);\r\nconst onBeforeMount = createHook(\"bm\" /* BEFORE_MOUNT */);\r\nconst onMounted = createHook(\"m\" /* MOUNTED */);\r\nconst onBeforeUpdate = createHook(\"bu\" /* BEFORE_UPDATE */);\r\nconst onUpdated = createHook(\"u\" /* UPDATED */);\r\nconst onBeforeUnmount = createHook(\"bum\" /* BEFORE_UNMOUNT */);\r\nconst onUnmounted = createHook(\"um\" /* UNMOUNTED */);\r\nconst onServerPrefetch = createHook(\"sp\" /* SERVER_PREFETCH */);\r\nconst onRenderTriggered = createHook(\"rtg\" /* RENDER_TRIGGERED */);\r\nconst onRenderTracked = createHook(\"rtc\" /* RENDER_TRACKED */);\r\nfunction onErrorCaptured(hook, target = currentInstance) {\r\n    injectHook(\"ec\" /* ERROR_CAPTURED */, hook, target);\r\n}\n\nfunction createDuplicateChecker() {\r\n    const cache = Object.create(null);\r\n    return (type, key) => {\r\n        if (cache[key]) {\r\n            warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\r\n        }\r\n        else {\r\n            cache[key] = type;\r\n        }\r\n    };\r\n}\r\nlet shouldCacheAccess = true;\r\nfunction applyOptions(instance) {\r\n    const options = resolveMergedOptions(instance);\r\n    const publicThis = instance.proxy;\r\n    const ctx = instance.ctx;\r\n    // do not cache property access on public proxy during state initialization\r\n    shouldCacheAccess = false;\r\n    // call beforeCreate first before accessing other options since\r\n    // the hook may mutate resolved options (#2791)\r\n    if (options.beforeCreate) {\r\n        callHook(options.beforeCreate, instance, \"bc\" /* BEFORE_CREATE */);\r\n    }\r\n    const { \r\n    // state\r\n    data: dataOptions, computed: computedOptions, methods, watch: watchOptions, provide: provideOptions, inject: injectOptions, \r\n    // lifecycle\r\n    created, beforeMount, mounted, beforeUpdate, updated, activated, deactivated, beforeDestroy, beforeUnmount, destroyed, unmounted, render, renderTracked, renderTriggered, errorCaptured, serverPrefetch, \r\n    // public API\r\n    expose, inheritAttrs, \r\n    // assets\r\n    components, directives, filters } = options;\r\n    const checkDuplicateProperties = (process.env.NODE_ENV !== 'production') ? createDuplicateChecker() : null;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        const [propsOptions] = instance.propsOptions;\r\n        if (propsOptions) {\r\n            for (const key in propsOptions) {\r\n                checkDuplicateProperties(\"Props\" /* PROPS */, key);\r\n            }\r\n        }\r\n    }\r\n    // options initialization order (to be consistent with Vue 2):\r\n    // - props (already done outside of this function)\r\n    // - inject\r\n    // - methods\r\n    // - data (deferred since it relies on `this` access)\r\n    // - computed\r\n    // - watch (deferred since it relies on `this` access)\r\n    if (injectOptions) {\r\n        resolveInjections(injectOptions, ctx, checkDuplicateProperties);\r\n    }\r\n    if (methods) {\r\n        for (const key in methods) {\r\n            const methodHandler = methods[key];\r\n            if (isFunction$1(methodHandler)) {\r\n                // In dev mode, we use the `createRenderContext` function to define methods to the proxy target,\r\n                // and those are read-only but reconfigurable, so it needs to be redefined here\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    Object.defineProperty(ctx, key, {\r\n                        value: methodHandler.bind(publicThis),\r\n                        configurable: true,\r\n                        enumerable: true,\r\n                        writable: true\r\n                    });\r\n                }\r\n                else {\r\n                    ctx[key] = methodHandler.bind(publicThis);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    checkDuplicateProperties(\"Methods\" /* METHODS */, key);\r\n                }\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` +\r\n                    `Did you reference the function correctly?`);\r\n            }\r\n        }\r\n    }\r\n    if (dataOptions) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isFunction$1(dataOptions)) {\r\n            warn(`The data option must be a function. ` +\r\n                `Plain object usage is no longer supported.`);\r\n        }\r\n        const data = dataOptions.call(publicThis, publicThis);\r\n        if ((process.env.NODE_ENV !== 'production') && isPromise$1(data)) {\r\n            warn(`data() returned a Promise - note data() cannot be async; If you ` +\r\n                `intend to perform data fetching before component renders, use ` +\r\n                `async setup() + <Suspense>.`);\r\n        }\r\n        if (!isObject$1(data)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`data() should return an object.`);\r\n        }\r\n        else {\r\n            instance.data = reactive(data);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                for (const key in data) {\r\n                    checkDuplicateProperties(\"Data\" /* DATA */, key);\r\n                    // expose data on ctx during dev\r\n                    if (key[0] !== '$' && key[0] !== '_') {\r\n                        Object.defineProperty(ctx, key, {\r\n                            configurable: true,\r\n                            enumerable: true,\r\n                            get: () => data[key],\r\n                            set: NOOP\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // state initialization complete at this point - start caching access\r\n    shouldCacheAccess = true;\r\n    if (computedOptions) {\r\n        for (const key in computedOptions) {\r\n            const opt = computedOptions[key];\r\n            const get = isFunction$1(opt)\r\n                ? opt.bind(publicThis, publicThis)\r\n                : isFunction$1(opt.get)\r\n                    ? opt.get.bind(publicThis, publicThis)\r\n                    : NOOP;\r\n            if ((process.env.NODE_ENV !== 'production') && get === NOOP) {\r\n                warn(`Computed property \"${key}\" has no getter.`);\r\n            }\r\n            const set = !isFunction$1(opt) && isFunction$1(opt.set)\r\n                ? opt.set.bind(publicThis)\r\n                : (process.env.NODE_ENV !== 'production')\r\n                    ? () => {\r\n                        warn(`Write operation failed: computed property \"${key}\" is readonly.`);\r\n                    }\r\n                    : NOOP;\r\n            const c = computed({\r\n                get,\r\n                set\r\n            });\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => c.value,\r\n                set: v => (c.value = v)\r\n            });\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                checkDuplicateProperties(\"Computed\" /* COMPUTED */, key);\r\n            }\r\n        }\r\n    }\r\n    if (watchOptions) {\r\n        for (const key in watchOptions) {\r\n            createWatcher(watchOptions[key], ctx, publicThis, key);\r\n        }\r\n    }\r\n    if (provideOptions) {\r\n        const provides = isFunction$1(provideOptions)\r\n            ? provideOptions.call(publicThis)\r\n            : provideOptions;\r\n        Reflect.ownKeys(provides).forEach(key => {\r\n            provide(key, provides[key]);\r\n        });\r\n    }\r\n    if (created) {\r\n        callHook(created, instance, \"c\" /* CREATED */);\r\n    }\r\n    function registerLifecycleHook(register, hook) {\r\n        if (isArray(hook)) {\r\n            hook.forEach(_hook => register(_hook.bind(publicThis)));\r\n        }\r\n        else if (hook) {\r\n            register(hook.bind(publicThis));\r\n        }\r\n    }\r\n    registerLifecycleHook(onBeforeMount, beforeMount);\r\n    registerLifecycleHook(onMounted, mounted);\r\n    registerLifecycleHook(onBeforeUpdate, beforeUpdate);\r\n    registerLifecycleHook(onUpdated, updated);\r\n    registerLifecycleHook(onActivated, activated);\r\n    registerLifecycleHook(onDeactivated, deactivated);\r\n    registerLifecycleHook(onErrorCaptured, errorCaptured);\r\n    registerLifecycleHook(onRenderTracked, renderTracked);\r\n    registerLifecycleHook(onRenderTriggered, renderTriggered);\r\n    registerLifecycleHook(onBeforeUnmount, beforeUnmount);\r\n    registerLifecycleHook(onUnmounted, unmounted);\r\n    registerLifecycleHook(onServerPrefetch, serverPrefetch);\r\n    if (isArray(expose)) {\r\n        if (expose.length) {\r\n            const exposed = instance.exposed || (instance.exposed = {});\r\n            expose.forEach(key => {\r\n                Object.defineProperty(exposed, key, {\r\n                    get: () => publicThis[key],\r\n                    set: val => (publicThis[key] = val)\r\n                });\r\n            });\r\n        }\r\n        else if (!instance.exposed) {\r\n            instance.exposed = {};\r\n        }\r\n    }\r\n    // options that are handled when creating the instance but also need to be\r\n    // applied from mixins\r\n    if (render && instance.render === NOOP) {\r\n        instance.render = render;\r\n    }\r\n    if (inheritAttrs != null) {\r\n        instance.inheritAttrs = inheritAttrs;\r\n    }\r\n    // asset options.\r\n    if (components)\r\n        instance.components = components;\r\n    if (directives)\r\n        instance.directives = directives;\r\n}\r\nfunction resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {\r\n    if (isArray(injectOptions)) {\r\n        injectOptions = normalizeInject(injectOptions);\r\n    }\r\n    for (const key in injectOptions) {\r\n        const opt = injectOptions[key];\r\n        if (isObject$1(opt)) {\r\n            if ('default' in opt) {\r\n                ctx[key] = inject(opt.from || key, opt.default, true /* treat default function as factory */);\r\n            }\r\n            else {\r\n                ctx[key] = inject(opt.from || key);\r\n            }\r\n        }\r\n        else {\r\n            ctx[key] = inject(opt);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            checkDuplicateProperties(\"Inject\" /* INJECT */, key);\r\n        }\r\n    }\r\n}\r\nfunction callHook(hook, instance, type) {\r\n    callWithAsyncErrorHandling(isArray(hook)\r\n        ? hook.map(h => h.bind(instance.proxy))\r\n        : hook.bind(instance.proxy), instance, type);\r\n}\r\nfunction createWatcher(raw, ctx, publicThis, key) {\r\n    const getter = key.includes('.')\r\n        ? createPathGetter(publicThis, key)\r\n        : () => publicThis[key];\r\n    if (isString(raw)) {\r\n        const handler = ctx[raw];\r\n        if (isFunction$1(handler)) {\r\n            watch(getter, handler);\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\r\n        }\r\n    }\r\n    else if (isFunction$1(raw)) {\r\n        watch(getter, raw.bind(publicThis));\r\n    }\r\n    else if (isObject$1(raw)) {\r\n        if (isArray(raw)) {\r\n            raw.forEach(r => createWatcher(r, ctx, publicThis, key));\r\n        }\r\n        else {\r\n            const handler = isFunction$1(raw.handler)\r\n                ? raw.handler.bind(publicThis)\r\n                : ctx[raw.handler];\r\n            if (isFunction$1(handler)) {\r\n                watch(getter, handler, raw);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production')) {\r\n                warn(`Invalid watch handler specified by key \"${raw.handler}\"`, handler);\r\n            }\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid watch option: \"${key}\"`, raw);\r\n    }\r\n}\r\n/**\r\n * Resolve merged options and cache it on the component.\r\n * This is done only once per-component since the merging does not involve\r\n * instances.\r\n */\r\nfunction resolveMergedOptions(instance) {\r\n    const base = instance.type;\r\n    const { mixins, extends: extendsOptions } = base;\r\n    const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;\r\n    const cached = cache.get(base);\r\n    let resolved;\r\n    if (cached) {\r\n        resolved = cached;\r\n    }\r\n    else if (!globalMixins.length && !mixins && !extendsOptions) {\r\n        {\r\n            resolved = base;\r\n        }\r\n    }\r\n    else {\r\n        resolved = {};\r\n        if (globalMixins.length) {\r\n            globalMixins.forEach(m => mergeOptions(resolved, m, optionMergeStrategies, true));\r\n        }\r\n        mergeOptions(resolved, base, optionMergeStrategies);\r\n    }\r\n    cache.set(base, resolved);\r\n    return resolved;\r\n}\r\nfunction mergeOptions(to, from, strats, asMixin = false) {\r\n    const { mixins, extends: extendsOptions } = from;\r\n    if (extendsOptions) {\r\n        mergeOptions(to, extendsOptions, strats, true);\r\n    }\r\n    if (mixins) {\r\n        mixins.forEach((m) => mergeOptions(to, m, strats, true));\r\n    }\r\n    for (const key in from) {\r\n        if (asMixin && key === 'expose') {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`\"expose\" option is ignored when declared in mixins or extends. ` +\r\n                    `It should only be declared in the base component itself.`);\r\n        }\r\n        else {\r\n            const strat = internalOptionMergeStrats[key] || (strats && strats[key]);\r\n            to[key] = strat ? strat(to[key], from[key]) : from[key];\r\n        }\r\n    }\r\n    return to;\r\n}\r\nconst internalOptionMergeStrats = {\r\n    data: mergeDataFn,\r\n    props: mergeObjectOptions,\r\n    emits: mergeObjectOptions,\r\n    // objects\r\n    methods: mergeObjectOptions,\r\n    computed: mergeObjectOptions,\r\n    // lifecycle\r\n    beforeCreate: mergeAsArray,\r\n    created: mergeAsArray,\r\n    beforeMount: mergeAsArray,\r\n    mounted: mergeAsArray,\r\n    beforeUpdate: mergeAsArray,\r\n    updated: mergeAsArray,\r\n    beforeDestroy: mergeAsArray,\r\n    destroyed: mergeAsArray,\r\n    activated: mergeAsArray,\r\n    deactivated: mergeAsArray,\r\n    errorCaptured: mergeAsArray,\r\n    serverPrefetch: mergeAsArray,\r\n    // assets\r\n    components: mergeObjectOptions,\r\n    directives: mergeObjectOptions,\r\n    // watch\r\n    watch: mergeWatchOptions,\r\n    // provide / inject\r\n    provide: mergeDataFn,\r\n    inject: mergeInject\r\n};\r\nfunction mergeDataFn(to, from) {\r\n    if (!from) {\r\n        return to;\r\n    }\r\n    if (!to) {\r\n        return from;\r\n    }\r\n    return function mergedDataFn() {\r\n        return (extend)(isFunction$1(to) ? to.call(this, this) : to, isFunction$1(from) ? from.call(this, this) : from);\r\n    };\r\n}\r\nfunction mergeInject(to, from) {\r\n    return mergeObjectOptions(normalizeInject(to), normalizeInject(from));\r\n}\r\nfunction normalizeInject(raw) {\r\n    if (isArray(raw)) {\r\n        const res = {};\r\n        for (let i = 0; i < raw.length; i++) {\r\n            res[raw[i]] = raw[i];\r\n        }\r\n        return res;\r\n    }\r\n    return raw;\r\n}\r\nfunction mergeAsArray(to, from) {\r\n    return to ? [...new Set([].concat(to, from))] : from;\r\n}\r\nfunction mergeObjectOptions(to, from) {\r\n    return to ? extend(extend(Object.create(null), to), from) : from;\r\n}\r\nfunction mergeWatchOptions(to, from) {\r\n    if (!to)\r\n        return from;\r\n    if (!from)\r\n        return to;\r\n    const merged = extend(Object.create(null), to);\r\n    for (const key in from) {\r\n        merged[key] = mergeAsArray(to[key], from[key]);\r\n    }\r\n    return merged;\r\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\r\nisSSR = false) {\r\n    const props = {};\r\n    const attrs = {};\r\n    def(attrs, InternalObjectKey, 1);\r\n    instance.propsDefaults = Object.create(null);\r\n    setFullProps(instance, rawProps, props, attrs);\r\n    // ensure all declared prop keys are present\r\n    for (const key in instance.propsOptions[0]) {\r\n        if (!(key in props)) {\r\n            props[key] = undefined;\r\n        }\r\n    }\r\n    // validation\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n    if (isStateful) {\r\n        // stateful\r\n        instance.props = isSSR ? props : shallowReactive(props);\r\n    }\r\n    else {\r\n        if (!instance.type.props) {\r\n            // functional w/ optional props, props === attrs\r\n            instance.props = attrs;\r\n        }\r\n        else {\r\n            // functional w/ declared props\r\n            instance.props = props;\r\n        }\r\n    }\r\n    instance.attrs = attrs;\r\n}\r\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\r\n    const { props, attrs, vnode: { patchFlag } } = instance;\r\n    const rawCurrentProps = toRaw(props);\r\n    const [options] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    if (\r\n    // always force full diff in dev\r\n    // - #1942 if hmr is enabled with sfc component\r\n    // - vite#872 non-sfc component used by sfc component\r\n    !((process.env.NODE_ENV !== 'production') &&\r\n        (instance.type.__hmrId ||\r\n            (instance.parent && instance.parent.type.__hmrId))) &&\r\n        (optimized || patchFlag > 0) &&\r\n        !(patchFlag & 16 /* FULL_PROPS */)) {\r\n        if (patchFlag & 8 /* PROPS */) {\r\n            // Compiler-generated props & no keys change, just set the updated\r\n            // the props.\r\n            const propsToUpdate = instance.vnode.dynamicProps;\r\n            for (let i = 0; i < propsToUpdate.length; i++) {\r\n                let key = propsToUpdate[i];\r\n                // PROPS flag guarantees rawProps to be non-null\r\n                const value = rawProps[key];\r\n                if (options) {\r\n                    // attr / props separation was done on init and will be consistent\r\n                    // in this code path, so just check if attrs have it.\r\n                    if (hasOwn(attrs, key)) {\r\n                        if (value !== attrs[key]) {\r\n                            attrs[key] = value;\r\n                            hasAttrsChanged = true;\r\n                        }\r\n                    }\r\n                    else {\r\n                        const camelizedKey = camelize(key);\r\n                        props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value, instance, false /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    if (value !== attrs[key]) {\r\n                        attrs[key] = value;\r\n                        hasAttrsChanged = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        // full props update.\r\n        if (setFullProps(instance, rawProps, props, attrs)) {\r\n            hasAttrsChanged = true;\r\n        }\r\n        // in case of dynamic props, check if we need to delete keys from\r\n        // the props object\r\n        let kebabKey;\r\n        for (const key in rawCurrentProps) {\r\n            if (!rawProps ||\r\n                // for camelCase\r\n                (!hasOwn(rawProps, key) &&\r\n                    // it's possible the original props was passed in as kebab-case\r\n                    // and converted to camelCase (#955)\r\n                    ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey)))) {\r\n                if (options) {\r\n                    if (rawPrevProps &&\r\n                        // for camelCase\r\n                        (rawPrevProps[key] !== undefined ||\r\n                            // for kebab-case\r\n                            rawPrevProps[kebabKey] !== undefined)) {\r\n                        props[key] = resolvePropValue(options, rawCurrentProps, key, undefined, instance, true /* isAbsent */);\r\n                    }\r\n                }\r\n                else {\r\n                    delete props[key];\r\n                }\r\n            }\r\n        }\r\n        // in the case of functional component w/o props declaration, props and\r\n        // attrs point to the same object so it should already have been updated.\r\n        if (attrs !== rawCurrentProps) {\r\n            for (const key in attrs) {\r\n                if (!rawProps || !hasOwn(rawProps, key)) {\r\n                    delete attrs[key];\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // trigger updates for $attrs in case it's used in component slots\r\n    if (hasAttrsChanged) {\r\n        trigger(instance, \"set\" /* SET */, '$attrs');\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        validateProps(rawProps || {}, props, instance);\r\n    }\r\n}\r\nfunction setFullProps(instance, rawProps, props, attrs) {\r\n    const [options, needCastKeys] = instance.propsOptions;\r\n    let hasAttrsChanged = false;\r\n    let rawCastValues;\r\n    if (rawProps) {\r\n        for (let key in rawProps) {\r\n            // key, ref are reserved and never passed down\r\n            if (isReservedProp(key)) {\r\n                continue;\r\n            }\r\n            const value = rawProps[key];\r\n            // prop option names are camelized during normalization, so to support\r\n            // kebab -> camel conversion here we need to camelize the key.\r\n            let camelKey;\r\n            if (options && hasOwn(options, (camelKey = camelize(key)))) {\r\n                if (!needCastKeys || !needCastKeys.includes(camelKey)) {\r\n                    props[camelKey] = value;\r\n                }\r\n                else {\r\n                    (rawCastValues || (rawCastValues = {}))[camelKey] = value;\r\n                }\r\n            }\r\n            else if (!isEmitListener(instance.emitsOptions, key)) {\r\n                if (value !== attrs[key]) {\r\n                    attrs[key] = value;\r\n                    hasAttrsChanged = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (needCastKeys) {\r\n        const rawCurrentProps = toRaw(props);\r\n        const castValues = rawCastValues || EMPTY_OBJ;\r\n        for (let i = 0; i < needCastKeys.length; i++) {\r\n            const key = needCastKeys[i];\r\n            props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));\r\n        }\r\n    }\r\n    return hasAttrsChanged;\r\n}\r\nfunction resolvePropValue(options, props, key, value, instance, isAbsent) {\r\n    const opt = options[key];\r\n    if (opt != null) {\r\n        const hasDefault = hasOwn(opt, 'default');\r\n        // default values\r\n        if (hasDefault && value === undefined) {\r\n            const defaultValue = opt.default;\r\n            if (opt.type !== Function && isFunction$1(defaultValue)) {\r\n                const { propsDefaults } = instance;\r\n                if (key in propsDefaults) {\r\n                    value = propsDefaults[key];\r\n                }\r\n                else {\r\n                    setCurrentInstance(instance);\r\n                    value = propsDefaults[key] = defaultValue.call(null, props);\r\n                    setCurrentInstance(null);\r\n                }\r\n            }\r\n            else {\r\n                value = defaultValue;\r\n            }\r\n        }\r\n        // boolean casting\r\n        if (opt[0 /* shouldCast */]) {\r\n            if (isAbsent && !hasDefault) {\r\n                value = false;\r\n            }\r\n            else if (opt[1 /* shouldCastTrue */] &&\r\n                (value === '' || value === hyphenate(key))) {\r\n                value = true;\r\n            }\r\n        }\r\n    }\r\n    return value;\r\n}\r\nfunction normalizePropsOptions(comp, appContext, asMixin = false) {\r\n    const cache = appContext.propsCache;\r\n    const cached = cache.get(comp);\r\n    if (cached) {\r\n        return cached;\r\n    }\r\n    const raw = comp.props;\r\n    const normalized = {};\r\n    const needCastKeys = [];\r\n    // apply mixin/extends props\r\n    let hasExtends = false;\r\n    if (__VUE_OPTIONS_API__ && !isFunction$1(comp)) {\r\n        const extendProps = (raw) => {\r\n            hasExtends = true;\r\n            const [props, keys] = normalizePropsOptions(raw, appContext, true);\r\n            extend(normalized, props);\r\n            if (keys)\r\n                needCastKeys.push(...keys);\r\n        };\r\n        if (!asMixin && appContext.mixins.length) {\r\n            appContext.mixins.forEach(extendProps);\r\n        }\r\n        if (comp.extends) {\r\n            extendProps(comp.extends);\r\n        }\r\n        if (comp.mixins) {\r\n            comp.mixins.forEach(extendProps);\r\n        }\r\n    }\r\n    if (!raw && !hasExtends) {\r\n        cache.set(comp, EMPTY_ARR);\r\n        return EMPTY_ARR;\r\n    }\r\n    if (isArray(raw)) {\r\n        for (let i = 0; i < raw.length; i++) {\r\n            if ((process.env.NODE_ENV !== 'production') && !isString(raw[i])) {\r\n                warn(`props must be strings when using array syntax.`, raw[i]);\r\n            }\r\n            const normalizedKey = camelize(raw[i]);\r\n            if (validatePropName(normalizedKey)) {\r\n                normalized[normalizedKey] = EMPTY_OBJ;\r\n            }\r\n        }\r\n    }\r\n    else if (raw) {\r\n        if ((process.env.NODE_ENV !== 'production') && !isObject$1(raw)) {\r\n            warn(`invalid props options`, raw);\r\n        }\r\n        for (const key in raw) {\r\n            const normalizedKey = camelize(key);\r\n            if (validatePropName(normalizedKey)) {\r\n                const opt = raw[key];\r\n                const prop = (normalized[normalizedKey] =\r\n                    isArray(opt) || isFunction$1(opt) ? { type: opt } : opt);\r\n                if (prop) {\r\n                    const booleanIndex = getTypeIndex(Boolean, prop.type);\r\n                    const stringIndex = getTypeIndex(String, prop.type);\r\n                    prop[0 /* shouldCast */] = booleanIndex > -1;\r\n                    prop[1 /* shouldCastTrue */] =\r\n                        stringIndex < 0 || booleanIndex < stringIndex;\r\n                    // if the prop needs boolean casting or default value\r\n                    if (booleanIndex > -1 || hasOwn(prop, 'default')) {\r\n                        needCastKeys.push(normalizedKey);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const res = [normalized, needCastKeys];\r\n    cache.set(comp, res);\r\n    return res;\r\n}\r\nfunction validatePropName(key) {\r\n    if (key[0] !== '$') {\r\n        return true;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`Invalid prop name: \"${key}\" is a reserved property.`);\r\n    }\r\n    return false;\r\n}\r\n// use function string name to check type constructors\r\n// so that it works across vms / iframes.\r\nfunction getType(ctor) {\r\n    const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\r\n    return match ? match[1] : '';\r\n}\r\nfunction isSameType(a, b) {\r\n    return getType(a) === getType(b);\r\n}\r\nfunction getTypeIndex(type, expectedTypes) {\r\n    if (isArray(expectedTypes)) {\r\n        return expectedTypes.findIndex(t => isSameType(t, type));\r\n    }\r\n    else if (isFunction$1(expectedTypes)) {\r\n        return isSameType(expectedTypes, type) ? 0 : -1;\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProps(rawProps, props, instance) {\r\n    const resolvedValues = toRaw(props);\r\n    const options = instance.propsOptions[0];\r\n    for (const key in options) {\r\n        let opt = options[key];\r\n        if (opt == null)\r\n            continue;\r\n        validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction validateProp(name, value, prop, isAbsent) {\r\n    const { type, required, validator } = prop;\r\n    // required!\r\n    if (required && isAbsent) {\r\n        warn('Missing required prop: \"' + name + '\"');\r\n        return;\r\n    }\r\n    // missing but optional\r\n    if (value == null && !prop.required) {\r\n        return;\r\n    }\r\n    // type check\r\n    if (type != null && type !== true) {\r\n        let isValid = false;\r\n        const types = isArray(type) ? type : [type];\r\n        const expectedTypes = [];\r\n        // value is valid as long as one of the specified types match\r\n        for (let i = 0; i < types.length && !isValid; i++) {\r\n            const { valid, expectedType } = assertType(value, types[i]);\r\n            expectedTypes.push(expectedType || '');\r\n            isValid = valid;\r\n        }\r\n        if (!isValid) {\r\n            warn(getInvalidTypeMessage(name, value, expectedTypes));\r\n            return;\r\n        }\r\n    }\r\n    // custom validator\r\n    if (validator && !validator(value)) {\r\n        warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\r\n    }\r\n}\r\nconst isSimpleType = /*#__PURE__*/ makeMap('String,Number,Boolean,Function,Symbol,BigInt');\r\n/**\r\n * dev only\r\n */\r\nfunction assertType(value, type) {\r\n    let valid;\r\n    const expectedType = getType(type);\r\n    if (isSimpleType(expectedType)) {\r\n        const t = typeof value;\r\n        valid = t === expectedType.toLowerCase();\r\n        // for primitive wrapper objects\r\n        if (!valid && t === 'object') {\r\n            valid = value instanceof type;\r\n        }\r\n    }\r\n    else if (expectedType === 'Object') {\r\n        valid = isObject$1(value);\r\n    }\r\n    else if (expectedType === 'Array') {\r\n        valid = isArray(value);\r\n    }\r\n    else {\r\n        valid = value instanceof type;\r\n    }\r\n    return {\r\n        valid,\r\n        expectedType\r\n    };\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\r\n    let message = `Invalid prop: type check failed for prop \"${name}\".` +\r\n        ` Expected ${expectedTypes.map(capitalize).join(', ')}`;\r\n    const expectedType = expectedTypes[0];\r\n    const receivedType = toRawType(value);\r\n    const expectedValue = styleValue(value, expectedType);\r\n    const receivedValue = styleValue(value, receivedType);\r\n    // check if we need to specify expected value\r\n    if (expectedTypes.length === 1 &&\r\n        isExplicable(expectedType) &&\r\n        !isBoolean(expectedType, receivedType)) {\r\n        message += ` with value ${expectedValue}`;\r\n    }\r\n    message += `, got ${receivedType} `;\r\n    // check if we need to specify received value\r\n    if (isExplicable(receivedType)) {\r\n        message += `with value ${receivedValue}.`;\r\n    }\r\n    return message;\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction styleValue(value, type) {\r\n    if (type === 'String') {\r\n        return `\"${value}\"`;\r\n    }\r\n    else if (type === 'Number') {\r\n        return `${Number(value)}`;\r\n    }\r\n    else {\r\n        return `${value}`;\r\n    }\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isExplicable(type) {\r\n    const explicitTypes = ['string', 'number', 'boolean'];\r\n    return explicitTypes.some(elem => type.toLowerCase() === elem);\r\n}\r\n/**\r\n * dev only\r\n */\r\nfunction isBoolean(...args) {\r\n    return args.some(elem => elem.toLowerCase() === 'boolean');\r\n}\n\nconst isInternalKey = (key) => key[0] === '_' || key === '$stable';\r\nconst normalizeSlotValue = (value) => isArray(value)\r\n    ? value.map(normalizeVNode)\r\n    : [normalizeVNode(value)];\r\nconst normalizeSlot = (key, rawSlot, ctx) => {\r\n    const normalized = withCtx((props) => {\r\n        if ((process.env.NODE_ENV !== 'production') && currentInstance) {\r\n            warn(`Slot \"${key}\" invoked outside of the render function: ` +\r\n                `this will not track dependencies used in the slot. ` +\r\n                `Invoke the slot function inside the render function instead.`);\r\n        }\r\n        return normalizeSlotValue(rawSlot(props));\r\n    }, ctx);\r\n    normalized._c = false;\r\n    return normalized;\r\n};\r\nconst normalizeObjectSlots = (rawSlots, slots, instance) => {\r\n    const ctx = rawSlots._ctx;\r\n    for (const key in rawSlots) {\r\n        if (isInternalKey(key))\r\n            continue;\r\n        const value = rawSlots[key];\r\n        if (isFunction$1(value)) {\r\n            slots[key] = normalizeSlot(key, value, ctx);\r\n        }\r\n        else if (value != null) {\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                !(false )) {\r\n                warn(`Non-function value encountered for slot \"${key}\". ` +\r\n                    `Prefer function slots for better performance.`);\r\n            }\r\n            const normalized = normalizeSlotValue(value);\r\n            slots[key] = () => normalized;\r\n        }\r\n    }\r\n};\r\nconst normalizeVNodeSlots = (instance, children) => {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        !isKeepAlive(instance.vnode) &&\r\n        !(false )) {\r\n        warn(`Non-function value encountered for default slot. ` +\r\n            `Prefer function slots for better performance.`);\r\n    }\r\n    const normalized = normalizeSlotValue(children);\r\n    instance.slots.default = () => normalized;\r\n};\r\nconst initSlots = (instance, children) => {\r\n    if (instance.vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // users can get the shallow readonly version of the slots object through `this.$slots`,\r\n            // we should avoid the proxy object polluting the slots of the internal instance\r\n            instance.slots = toRaw(children);\r\n            // make compiler marker non-enumerable\r\n            def(children, '_', type);\r\n        }\r\n        else {\r\n            normalizeObjectSlots(children, (instance.slots = {}));\r\n        }\r\n    }\r\n    else {\r\n        instance.slots = {};\r\n        if (children) {\r\n            normalizeVNodeSlots(instance, children);\r\n        }\r\n    }\r\n    def(instance.slots, InternalObjectKey, 1);\r\n};\r\nconst updateSlots = (instance, children, optimized) => {\r\n    const { vnode, slots } = instance;\r\n    let needDeletionCheck = true;\r\n    let deletionComparisonTarget = EMPTY_OBJ;\r\n    if (vnode.shapeFlag & 32 /* SLOTS_CHILDREN */) {\r\n        const type = children._;\r\n        if (type) {\r\n            // compiled slots.\r\n            if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n                // Parent was HMR updated so slot content may have changed.\r\n                // force update slots and mark instance for hmr as well\r\n                extend(slots, children);\r\n            }\r\n            else if (optimized && type === 1 /* STABLE */) {\r\n                // compiled AND stable.\r\n                // no need to update, and skip stale slots removal.\r\n                needDeletionCheck = false;\r\n            }\r\n            else {\r\n                // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\r\n                // normalization.\r\n                extend(slots, children);\r\n                // #2893\r\n                // when rendering the optimized slots by manually written render function,\r\n                // we need to delete the `slots._` flag if necessary to make subsequent updates reliable,\r\n                // i.e. let the `renderSlot` create the bailed Fragment\r\n                if (!optimized && type === 1 /* STABLE */) {\r\n                    delete slots._;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            needDeletionCheck = !children.$stable;\r\n            normalizeObjectSlots(children, slots);\r\n        }\r\n        deletionComparisonTarget = children;\r\n    }\r\n    else if (children) {\r\n        // non slot object children (direct value) passed to a component\r\n        normalizeVNodeSlots(instance, children);\r\n        deletionComparisonTarget = { default: 1 };\r\n    }\r\n    // delete stale slots\r\n    if (needDeletionCheck) {\r\n        for (const key in slots) {\r\n            if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\r\n                delete slots[key];\r\n            }\r\n        }\r\n    }\r\n};\n\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\r\nconst isBuiltInDirective = /*#__PURE__*/ makeMap('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\r\nfunction validateDirectiveName(name) {\r\n    if (isBuiltInDirective(name)) {\r\n        warn('Do not use built-in directive ids as custom directive id: ' + name);\r\n    }\r\n}\r\n/**\r\n * Adds directives to a VNode.\r\n */\r\nfunction withDirectives(vnode, directives) {\r\n    const internalInstance = currentRenderingInstance;\r\n    if (internalInstance === null) {\r\n        (process.env.NODE_ENV !== 'production') && warn(`withDirectives can only be used inside render functions.`);\r\n        return vnode;\r\n    }\r\n    const instance = internalInstance.proxy;\r\n    const bindings = vnode.dirs || (vnode.dirs = []);\r\n    for (let i = 0; i < directives.length; i++) {\r\n        let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];\r\n        if (isFunction$1(dir)) {\r\n            dir = {\r\n                mounted: dir,\r\n                updated: dir\r\n            };\r\n        }\r\n        bindings.push({\r\n            dir,\r\n            instance,\r\n            value,\r\n            oldValue: void 0,\r\n            arg,\r\n            modifiers\r\n        });\r\n    }\r\n    return vnode;\r\n}\r\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\r\n    const bindings = vnode.dirs;\r\n    const oldBindings = prevVNode && prevVNode.dirs;\r\n    for (let i = 0; i < bindings.length; i++) {\r\n        const binding = bindings[i];\r\n        if (oldBindings) {\r\n            binding.oldValue = oldBindings[i].value;\r\n        }\r\n        let hook = binding.dir[name];\r\n        if (hook) {\r\n            // disable tracking inside all lifecycle hooks\r\n            // since they can potentially be called inside effects.\r\n            pauseTracking();\r\n            callWithAsyncErrorHandling(hook, instance, 8 /* DIRECTIVE_HOOK */, [\r\n                vnode.el,\r\n                binding,\r\n                vnode,\r\n                prevVNode\r\n            ]);\r\n            resetTracking();\r\n        }\r\n    }\r\n}\n\nfunction createAppContext() {\r\n    return {\r\n        app: null,\r\n        config: {\r\n            isNativeTag: NO,\r\n            performance: false,\r\n            globalProperties: {},\r\n            optionMergeStrategies: {},\r\n            errorHandler: undefined,\r\n            warnHandler: undefined,\r\n            compilerOptions: {}\r\n        },\r\n        mixins: [],\r\n        components: {},\r\n        directives: {},\r\n        provides: Object.create(null),\r\n        optionsCache: new WeakMap(),\r\n        propsCache: new WeakMap(),\r\n        emitsCache: new WeakMap()\r\n    };\r\n}\r\nlet uid = 0;\r\nfunction createAppAPI(render, hydrate) {\r\n    return function createApp(rootComponent, rootProps = null) {\r\n        if (rootProps != null && !isObject$1(rootProps)) {\r\n            (process.env.NODE_ENV !== 'production') && warn(`root props passed to app.mount() must be an object.`);\r\n            rootProps = null;\r\n        }\r\n        const context = createAppContext();\r\n        const installedPlugins = new Set();\r\n        let isMounted = false;\r\n        const app = (context.app = {\r\n            _uid: uid++,\r\n            _component: rootComponent,\r\n            _props: rootProps,\r\n            _container: null,\r\n            _context: context,\r\n            _instance: null,\r\n            version,\r\n            get config() {\r\n                return context.config;\r\n            },\r\n            set config(v) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`app.config cannot be replaced. Modify individual options instead.`);\r\n                }\r\n            },\r\n            use(plugin, ...options) {\r\n                if (installedPlugins.has(plugin)) {\r\n                    (process.env.NODE_ENV !== 'production') && warn(`Plugin has already been applied to target app.`);\r\n                }\r\n                else if (plugin && isFunction$1(plugin.install)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin.install(app, ...options);\r\n                }\r\n                else if (isFunction$1(plugin)) {\r\n                    installedPlugins.add(plugin);\r\n                    plugin(app, ...options);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`A plugin must either be a function or an object with an \"install\" ` +\r\n                        `function.`);\r\n                }\r\n                return app;\r\n            },\r\n            mixin(mixin) {\r\n                if (__VUE_OPTIONS_API__) {\r\n                    if (!context.mixins.includes(mixin)) {\r\n                        context.mixins.push(mixin);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Mixin has already been applied to target app' +\r\n                            (mixin.name ? `: ${mixin.name}` : ''));\r\n                    }\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Mixins are only available in builds supporting Options API');\r\n                }\r\n                return app;\r\n            },\r\n            component(name, component) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateComponentName(name, context.config);\r\n                }\r\n                if (!component) {\r\n                    return context.components[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.components[name]) {\r\n                    warn(`Component \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.components[name] = component;\r\n                return app;\r\n            },\r\n            directive(name, directive) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    validateDirectiveName(name);\r\n                }\r\n                if (!directive) {\r\n                    return context.directives[name];\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') && context.directives[name]) {\r\n                    warn(`Directive \"${name}\" has already been registered in target app.`);\r\n                }\r\n                context.directives[name] = directive;\r\n                return app;\r\n            },\r\n            mount(rootContainer, isHydrate, isSVG) {\r\n                if (!isMounted) {\r\n                    const vnode = createVNode(rootComponent, rootProps);\r\n                    // store app context on the root VNode.\r\n                    // this will be set on the root instance on initial mount.\r\n                    vnode.appContext = context;\r\n                    // HMR root reload\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        context.reload = () => {\r\n                            render(cloneVNode(vnode), rootContainer, isSVG);\r\n                        };\r\n                    }\r\n                    if (isHydrate && hydrate) {\r\n                        hydrate(vnode, rootContainer);\r\n                    }\r\n                    else {\r\n                        render(vnode, rootContainer, isSVG);\r\n                    }\r\n                    isMounted = true;\r\n                    app._container = rootContainer;\r\n                    rootContainer.__vue_app__ = app;\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        app._instance = vnode.component;\r\n                        devtoolsInitApp(app, version);\r\n                    }\r\n                    return vnode.component.proxy;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`App has already been mounted.\\n` +\r\n                        `If you want to remount the same app, move your app creation logic ` +\r\n                        `into a factory function and create fresh app instances for each ` +\r\n                        `mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\r\n                }\r\n            },\r\n            unmount() {\r\n                if (isMounted) {\r\n                    render(null, app._container);\r\n                    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                        app._instance = null;\r\n                        devtoolsUnmountApp(app);\r\n                    }\r\n                    delete app._container.__vue_app__;\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn(`Cannot unmount an app that is not mounted.`);\r\n                }\r\n            },\r\n            provide(key, value) {\r\n                if ((process.env.NODE_ENV !== 'production') && key in context.provides) {\r\n                    warn(`App already provides property with key \"${String(key)}\". ` +\r\n                        `It will be overwritten with the new value.`);\r\n                }\r\n                // TypeScript doesn't allow symbols as index type\r\n                // https://github.com/Microsoft/TypeScript/issues/24587\r\n                context.provides[key] = value;\r\n                return app;\r\n            }\r\n        });\r\n        return app;\r\n    };\r\n}\n\nlet hasMismatch = false;\r\nconst isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';\r\nconst isComment = (node) => node.nodeType === 8 /* COMMENT */;\r\n// Note: hydration is DOM-specific\r\n// But we have to place it in core due to tight coupling with core - splitting\r\n// it out creates a ton of unnecessary complexity.\r\n// Hydration also depends on some renderer internal logic which needs to be\r\n// passed in via arguments.\r\nfunction createHydrationFunctions(rendererInternals) {\r\n    const { mt: mountComponent, p: patch, o: { patchProp, nextSibling, parentNode, remove, insert, createComment } } = rendererInternals;\r\n    const hydrate = (vnode, container) => {\r\n        if (!container.hasChildNodes()) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to hydrate existing markup but container is empty. ` +\r\n                    `Performing full mount instead.`);\r\n            patch(null, vnode, container);\r\n            flushPostFlushCbs();\r\n            return;\r\n        }\r\n        hasMismatch = false;\r\n        hydrateNode(container.firstChild, vnode, null, null, null);\r\n        flushPostFlushCbs();\r\n        if (hasMismatch && !false) {\r\n            // this error should show up in production\r\n            console.error(`Hydration completed but contains mismatches.`);\r\n        }\r\n    };\r\n    const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {\r\n        const isFragmentStart = isComment(node) && node.data === '[';\r\n        const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);\r\n        const { type, ref, shapeFlag } = vnode;\r\n        const domType = node.nodeType;\r\n        vnode.el = node;\r\n        let nextNode = null;\r\n        switch (type) {\r\n            case Text:\r\n                if (domType !== 3 /* TEXT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    if (node.data !== vnode.children) {\r\n                        hasMismatch = true;\r\n                        (process.env.NODE_ENV !== 'production') &&\r\n                            warn(`Hydration text mismatch:` +\r\n                                `\\n- Client: ${JSON.stringify(node.data)}` +\r\n                                `\\n- Server: ${JSON.stringify(vnode.children)}`);\r\n                        node.data = vnode.children;\r\n                    }\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Comment$1:\r\n                if (domType !== 8 /* COMMENT */ || isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = nextSibling(node);\r\n                }\r\n                break;\r\n            case Static:\r\n                if (domType !== 1 /* ELEMENT */) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    // determine anchor, adopt content\r\n                    nextNode = node;\r\n                    // if the static vnode has its content stripped during build,\r\n                    // adopt it from the server-rendered HTML.\r\n                    const needToAdoptContent = !vnode.children.length;\r\n                    for (let i = 0; i < vnode.staticCount; i++) {\r\n                        if (needToAdoptContent)\r\n                            vnode.children += nextNode.outerHTML;\r\n                        if (i === vnode.staticCount - 1) {\r\n                            vnode.anchor = nextNode;\r\n                        }\r\n                        nextNode = nextSibling(nextNode);\r\n                    }\r\n                    return nextNode;\r\n                }\r\n                break;\r\n            case Fragment:\r\n                if (!isFragmentStart) {\r\n                    nextNode = onMismatch();\r\n                }\r\n                else {\r\n                    nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                }\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    if (domType !== 1 /* ELEMENT */ ||\r\n                        vnode.type.toLowerCase() !==\r\n                            node.tagName.toLowerCase()) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    // when setting up the render effect, if the initial vnode already\r\n                    // has .el set, the component will perform hydration instead of mount\r\n                    // on its sub-tree.\r\n                    vnode.slotScopeIds = slotScopeIds;\r\n                    const container = parentNode(node);\r\n                    mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\r\n                    // component may be async, so in the case of fragments we cannot rely\r\n                    // on component's rendered output to determine the end of the fragment\r\n                    // instead, we do a lookahead to find the end anchor node.\r\n                    nextNode = isFragmentStart\r\n                        ? locateClosingAsyncAnchor(node)\r\n                        : nextSibling(node);\r\n                    // #3787\r\n                    // if component is async, it may get moved / unmounted before its\r\n                    // inner component is loaded, so we need to give it a placeholder\r\n                    // vnode that matches its adopted DOM.\r\n                    if (isAsyncWrapper(vnode)) {\r\n                        let subTree;\r\n                        if (isFragmentStart) {\r\n                            subTree = createVNode(Fragment);\r\n                            subTree.anchor = nextNode\r\n                                ? nextNode.previousSibling\r\n                                : container.lastChild;\r\n                        }\r\n                        else {\r\n                            subTree =\r\n                                node.nodeType === 3 ? createTextVNode('') : createVNode('div');\r\n                        }\r\n                        subTree.el = node;\r\n                        vnode.component.subTree = subTree;\r\n                    }\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    if (domType !== 8 /* COMMENT */) {\r\n                        nextNode = onMismatch();\r\n                    }\r\n                    else {\r\n                        nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);\r\n                    }\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid HostVNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode);\r\n        }\r\n        return nextNode;\r\n    };\r\n    const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!vnode.dynamicChildren;\r\n        const { type, props, patchFlag, shapeFlag, dirs } = vnode;\r\n        // #4006 for form elements with non-string v-model value bindings\r\n        // e.g. <option :value=\"obj\">, <input type=\"checkbox\" :true-value=\"1\">\r\n        const forcePatchValue = (type === 'input' && dirs) || type === 'option';\r\n        // skip props & children if this is hoisted static nodes\r\n        if (forcePatchValue || patchFlag !== -1 /* HOISTED */) {\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                if (forcePatchValue ||\r\n                    !optimized ||\r\n                    (patchFlag & 16 /* FULL_PROPS */ ||\r\n                        patchFlag & 32 /* HYDRATE_EVENTS */)) {\r\n                    for (const key in props) {\r\n                        if ((forcePatchValue && key.endsWith('value')) ||\r\n                            (isOn(key) && !isReservedProp(key))) {\r\n                            patchProp(el, key, null, props[key]);\r\n                        }\r\n                    }\r\n                }\r\n                else if (props.onClick) {\r\n                    // Fast path for click listeners (which is most often) to avoid\r\n                    // iterating through props.\r\n                    patchProp(el, 'onClick', null, props.onClick);\r\n                }\r\n            }\r\n            // vnode / directive hooks\r\n            let vnodeHooks;\r\n            if ((vnodeHooks = props && props.onVnodeBeforeMount)) {\r\n                invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n            }\r\n            if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\r\n                queueEffectWithSuspense(() => {\r\n                    vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\r\n                    dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n                }, parentSuspense);\r\n            }\r\n            // children\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */ &&\r\n                // skip if element has innerHTML / textContent\r\n                !(props && (props.innerHTML || props.textContent))) {\r\n                let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                let hasWarned = false;\r\n                while (next) {\r\n                    hasMismatch = true;\r\n                    if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                        warn(`Hydration children mismatch in <${vnode.type}>: ` +\r\n                            `server rendered element contains more child nodes than client vdom.`);\r\n                        hasWarned = true;\r\n                    }\r\n                    // The SSRed DOM contains more nodes than it should. Remove them.\r\n                    const cur = next;\r\n                    next = next.nextSibling;\r\n                    remove(cur);\r\n                }\r\n            }\r\n            else if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                if (el.textContent !== vnode.children) {\r\n                    hasMismatch = true;\r\n                    (process.env.NODE_ENV !== 'production') &&\r\n                        warn(`Hydration text content mismatch in <${vnode.type}>:\\n` +\r\n                            `- Client: ${el.textContent}\\n` +\r\n                            `- Server: ${vnode.children}`);\r\n                    el.textContent = vnode.children;\r\n                }\r\n            }\r\n        }\r\n        return el.nextSibling;\r\n    };\r\n    const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        optimized = optimized || !!parentVNode.dynamicChildren;\r\n        const children = parentVNode.children;\r\n        const l = children.length;\r\n        let hasWarned = false;\r\n        for (let i = 0; i < l; i++) {\r\n            const vnode = optimized\r\n                ? children[i]\r\n                : (children[i] = normalizeVNode(children[i]));\r\n            if (node) {\r\n                node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            else if (vnode.type === Text && !vnode.children) {\r\n                continue;\r\n            }\r\n            else {\r\n                hasMismatch = true;\r\n                if ((process.env.NODE_ENV !== 'production') && !hasWarned) {\r\n                    warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` +\r\n                        `server rendered element contains fewer child nodes than client vdom.`);\r\n                    hasWarned = true;\r\n                }\r\n                // the SSRed DOM didn't contain enough nodes. Mount the missing ones.\r\n                patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {\r\n        const { slotScopeIds: fragmentSlotScopeIds } = vnode;\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        const container = parentNode(node);\r\n        const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n        if (next && isComment(next) && next.data === ']') {\r\n            return nextSibling((vnode.anchor = next));\r\n        }\r\n        else {\r\n            // fragment didn't hydrate successfully, since we didn't get a end anchor\r\n            // back. This should have led to node/children mismatch warnings.\r\n            hasMismatch = true;\r\n            // since the anchor is missing, we need to create one and insert it\r\n            insert((vnode.anchor = createComment(`]`)), container, next);\r\n            return next;\r\n        }\r\n    };\r\n    const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {\r\n        hasMismatch = true;\r\n        (process.env.NODE_ENV !== 'production') &&\r\n            warn(`Hydration node mismatch:\\n- Client vnode:`, vnode.type, `\\n- Server rendered DOM:`, node, node.nodeType === 3 /* TEXT */\r\n                ? `(text)`\r\n                : isComment(node) && node.data === '['\r\n                    ? `(start of fragment)`\r\n                    : ``);\r\n        vnode.el = null;\r\n        if (isFragment) {\r\n            // remove excessive fragment nodes\r\n            const end = locateClosingAsyncAnchor(node);\r\n            while (true) {\r\n                const next = nextSibling(node);\r\n                if (next && next !== end) {\r\n                    remove(next);\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const next = nextSibling(node);\r\n        const container = parentNode(node);\r\n        remove(node);\r\n        patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);\r\n        return next;\r\n    };\r\n    const locateClosingAsyncAnchor = (node) => {\r\n        let match = 0;\r\n        while (node) {\r\n            node = nextSibling(node);\r\n            if (node && isComment(node)) {\r\n                if (node.data === '[')\r\n                    match++;\r\n                if (node.data === ']') {\r\n                    if (match === 0) {\r\n                        return nextSibling(node);\r\n                    }\r\n                    else {\r\n                        match--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return node;\r\n    };\r\n    return [hydrate, hydrateNode];\r\n}\n\nlet supported;\r\nlet perf;\r\nfunction startMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        perf.mark(`vue-${type}-${instance.uid}`);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());\r\n    }\r\n}\r\nfunction endMeasure(instance, type) {\r\n    if (instance.appContext.config.performance && isSupported()) {\r\n        const startTag = `vue-${type}-${instance.uid}`;\r\n        const endTag = startTag + `:end`;\r\n        perf.mark(endTag);\r\n        perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\r\n        perf.clearMarks(startTag);\r\n        perf.clearMarks(endTag);\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());\r\n    }\r\n}\r\nfunction isSupported() {\r\n    if (supported !== undefined) {\r\n        return supported;\r\n    }\r\n    /* eslint-disable no-restricted-globals */\r\n    if (typeof window !== 'undefined' && window.performance) {\r\n        supported = true;\r\n        perf = window.performance;\r\n    }\r\n    else {\r\n        supported = false;\r\n    }\r\n    /* eslint-enable no-restricted-globals */\r\n    return supported;\r\n}\n\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\r\nfunction initFeatureFlags() {\r\n    let needWarn = false;\r\n    if (typeof __VUE_OPTIONS_API__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_OPTIONS_API__ = true;\r\n    }\r\n    if (typeof __VUE_PROD_DEVTOOLS__ !== 'boolean') {\r\n        needWarn = true;\r\n        getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') && needWarn) {\r\n        console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` +\r\n            `configure your bundler to explicitly replace feature flag globals ` +\r\n            `with boolean literals to get proper tree-shaking in the final bundle. ` +\r\n            `See http://link.vuejs.org/feature-flags for more details.`);\r\n    }\r\n}\n\nconst prodEffectOptions = {\r\n    scheduler: queueJob,\r\n    // #1801, #2043 component render effects should allow recursive updates\r\n    allowRecurse: true\r\n};\r\nfunction createDevEffectOptions(instance) {\r\n    return {\r\n        scheduler: queueJob,\r\n        allowRecurse: true,\r\n        onTrack: instance.rtc ? e => invokeArrayFns(instance.rtc, e) : void 0,\r\n        onTrigger: instance.rtg ? e => invokeArrayFns(instance.rtg, e) : void 0\r\n    };\r\n}\r\nconst queuePostRenderEffect = queueEffectWithSuspense\r\n    ;\r\nconst setRef = (rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) => {\r\n    if (isArray(rawRef)) {\r\n        rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));\r\n        return;\r\n    }\r\n    if (isAsyncWrapper(vnode) && !isUnmount) {\r\n        // when mounting async components, nothing needs to be done,\r\n        // because the template ref is forwarded to inner component\r\n        return;\r\n    }\r\n    const refValue = vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */\r\n        ? getExposeProxy(vnode.component) || vnode.component.proxy\r\n        : vnode.el;\r\n    const value = isUnmount ? null : refValue;\r\n    const { i: owner, r: ref } = rawRef;\r\n    if ((process.env.NODE_ENV !== 'production') && !owner) {\r\n        warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` +\r\n            `A vnode with ref must be created inside the render function.`);\r\n        return;\r\n    }\r\n    const oldRef = oldRawRef && oldRawRef.r;\r\n    const refs = owner.refs === EMPTY_OBJ ? (owner.refs = {}) : owner.refs;\r\n    const setupState = owner.setupState;\r\n    // dynamic ref changed. unset old ref\r\n    if (oldRef != null && oldRef !== ref) {\r\n        if (isString(oldRef)) {\r\n            refs[oldRef] = null;\r\n            if (hasOwn(setupState, oldRef)) {\r\n                setupState[oldRef] = null;\r\n            }\r\n        }\r\n        else if (isRef(oldRef)) {\r\n            oldRef.value = null;\r\n        }\r\n    }\r\n    if (isString(ref)) {\r\n        const doSet = () => {\r\n            {\r\n                refs[ref] = value;\r\n            }\r\n            if (hasOwn(setupState, ref)) {\r\n                setupState[ref] = value;\r\n            }\r\n        };\r\n        // #1789: for non-null values, set them after render\r\n        // null values means this is unmount and it should not overwrite another\r\n        // ref with the same key\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isRef(ref)) {\r\n        const doSet = () => {\r\n            ref.value = value;\r\n        };\r\n        if (value) {\r\n            doSet.id = -1;\r\n            queuePostRenderEffect(doSet, parentSuspense);\r\n        }\r\n        else {\r\n            doSet();\r\n        }\r\n    }\r\n    else if (isFunction$1(ref)) {\r\n        callWithErrorHandling(ref, owner, 12 /* FUNCTION_REF */, [value, refs]);\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn('Invalid template ref type:', value, `(${typeof value})`);\r\n    }\r\n};\r\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\r\nfunction createRenderer(options) {\r\n    return baseCreateRenderer(options);\r\n}\r\n// Separate API for creating hydration-enabled renderer.\r\n// Hydration logic is only used when calling this function, making it\r\n// tree-shakable.\r\nfunction createHydrationRenderer(options) {\r\n    return baseCreateRenderer(options, createHydrationFunctions);\r\n}\r\n// implementation\r\nfunction baseCreateRenderer(options, createHydrationFns) {\r\n    // compile-time feature flags check\r\n    {\r\n        initFeatureFlags();\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n        const target = getGlobalThis();\r\n        target.__VUE__ = true;\r\n        setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);\r\n    }\r\n    const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, forcePatchProp: hostForcePatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;\r\n    // Note: functions inside this closure should use `const xxx = () => {}`\r\n    // style in order to prevent being inlined by minifiers.\r\n    const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = false) => {\r\n        // patching & not same type, unmount old tree\r\n        if (n1 && !isSameVNodeType(n1, n2)) {\r\n            anchor = getNextHostNode(n1);\r\n            unmount(n1, parentComponent, parentSuspense, true);\r\n            n1 = null;\r\n        }\r\n        if (n2.patchFlag === -2 /* BAIL */) {\r\n            optimized = false;\r\n            n2.dynamicChildren = null;\r\n        }\r\n        const { type, ref, shapeFlag } = n2;\r\n        switch (type) {\r\n            case Text:\r\n                processText(n1, n2, container, anchor);\r\n                break;\r\n            case Comment$1:\r\n                processCommentNode(n1, n2, container, anchor);\r\n                break;\r\n            case Static:\r\n                if (n1 == null) {\r\n                    mountStaticNode(n2, container, anchor, isSVG);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    patchStaticNode(n1, n2, container, isSVG);\r\n                }\r\n                break;\r\n            case Fragment:\r\n                processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                break;\r\n            default:\r\n                if (shapeFlag & 1 /* ELEMENT */) {\r\n                    processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 6 /* COMPONENT */) {\r\n                    processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (shapeFlag & 64 /* TELEPORT */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if (shapeFlag & 128 /* SUSPENSE */) {\r\n                    type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);\r\n                }\r\n                else if ((process.env.NODE_ENV !== 'production')) {\r\n                    warn('Invalid VNode type:', type, `(${typeof type})`);\r\n                }\r\n        }\r\n        // set ref\r\n        if (ref != null && parentComponent) {\r\n            setRef(ref, n1 && n1.ref, parentSuspense, n2 || n1, !n2);\r\n        }\r\n    };\r\n    const processText = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateText(n2.children)), container, anchor);\r\n        }\r\n        else {\r\n            const el = (n2.el = n1.el);\r\n            if (n2.children !== n1.children) {\r\n                hostSetText(el, n2.children);\r\n            }\r\n        }\r\n    };\r\n    const processCommentNode = (n1, n2, container, anchor) => {\r\n        if (n1 == null) {\r\n            hostInsert((n2.el = hostCreateComment(n2.children || '')), container, anchor);\r\n        }\r\n        else {\r\n            // there's no support for dynamic comments\r\n            n2.el = n1.el;\r\n        }\r\n    };\r\n    const mountStaticNode = (n2, container, anchor, isSVG) => {\r\n        // static nodes are only present when used with compiler-dom/runtime-dom\r\n        // which guarantees presence of hostInsertStaticContent.\r\n        const nodes = hostInsertStaticContent(n2.children, container, anchor, isSVG, \r\n        // pass cached nodes if the static node is being mounted multiple times\r\n        // so that runtime-dom can simply cloneNode() instead of inserting new\r\n        // HTML\r\n        n2.staticCache);\r\n        // first mount - this is the orignal hoisted vnode. cache nodes.\r\n        if (!n2.el) {\r\n            n2.staticCache = nodes;\r\n        }\r\n        n2.el = nodes[0];\r\n        n2.anchor = nodes[nodes.length - 1];\r\n    };\r\n    /**\r\n     * Dev / HMR only\r\n     */\r\n    const patchStaticNode = (n1, n2, container, isSVG) => {\r\n        // static nodes are only patched during dev for HMR\r\n        if (n2.children !== n1.children) {\r\n            const anchor = hostNextSibling(n1.anchor);\r\n            // remove existing\r\n            removeStaticNode(n1);\r\n            [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\r\n        }\r\n        else {\r\n            n2.el = n1.el;\r\n            n2.anchor = n1.anchor;\r\n        }\r\n    };\r\n    const moveStaticNode = ({ el, anchor }, container, nextSibling) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostInsert(el, container, nextSibling);\r\n            el = next;\r\n        }\r\n        hostInsert(anchor, container, nextSibling);\r\n    };\r\n    const removeStaticNode = ({ el, anchor }) => {\r\n        let next;\r\n        while (el && el !== anchor) {\r\n            next = hostNextSibling(el);\r\n            hostRemove(el);\r\n            el = next;\r\n        }\r\n        hostRemove(anchor);\r\n    };\r\n    const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        isSVG = isSVG || n2.type === 'svg';\r\n        if (n1 == null) {\r\n            mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let el;\r\n        let vnodeHook;\r\n        const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;\r\n        if (!(process.env.NODE_ENV !== 'production') &&\r\n            vnode.el &&\r\n            hostCloneNode !== undefined &&\r\n            patchFlag === -1 /* HOISTED */) {\r\n            // If a vnode has non-null el, it means it's being reused.\r\n            // Only static vnodes can be reused, so its mounted DOM nodes should be\r\n            // exactly the same, and we can simply do a clone here.\r\n            // only do this in production since cloned trees cannot be HMR updated.\r\n            el = vnode.el = hostCloneNode(vnode.el);\r\n        }\r\n        else {\r\n            el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);\r\n            // mount children first, since some props may rely on child content\r\n            // being already rendered, e.g. `<select value>`\r\n            if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                hostSetElementText(el, vnode.children);\r\n            }\r\n            else if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', slotScopeIds, optimized || !!vnode.dynamicChildren);\r\n            }\r\n            if (dirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'created');\r\n            }\r\n            // props\r\n            if (props) {\r\n                for (const key in props) {\r\n                    if (!isReservedProp(key)) {\r\n                        hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n                if ((vnodeHook = props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                }\r\n            }\r\n            // scopeId\r\n            setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            Object.defineProperty(el, '__vnode', {\r\n                value: vnode,\r\n                enumerable: false\r\n            });\r\n            Object.defineProperty(el, '__vueParentComponent', {\r\n                value: parentComponent,\r\n                enumerable: false\r\n            });\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\r\n        }\r\n        // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\r\n        // #1689 For inside suspense + suspense resolved case, just call it\r\n        const needCallTransitionHooks = (!parentSuspense || (parentSuspense && !parentSuspense.pendingBranch)) &&\r\n            transition &&\r\n            !transition.persisted;\r\n        if (needCallTransitionHooks) {\r\n            transition.beforeEnter(el);\r\n        }\r\n        hostInsert(el, container, anchor);\r\n        if ((vnodeHook = props && props.onVnodeMounted) ||\r\n            needCallTransitionHooks ||\r\n            dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                needCallTransitionHooks && transition.enter(el);\r\n                dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {\r\n        if (scopeId) {\r\n            hostSetScopeId(el, scopeId);\r\n        }\r\n        if (slotScopeIds) {\r\n            for (let i = 0; i < slotScopeIds.length; i++) {\r\n                hostSetScopeId(el, slotScopeIds[i]);\r\n            }\r\n        }\r\n        if (parentComponent) {\r\n            let subTree = parentComponent.subTree;\r\n            if ((process.env.NODE_ENV !== 'production') &&\r\n                subTree.patchFlag > 0 &&\r\n                subTree.patchFlag & 2048 /* DEV_ROOT_FRAGMENT */) {\r\n                subTree =\r\n                    filterSingleRoot(subTree.children) || subTree;\r\n            }\r\n            if (vnode === subTree) {\r\n                const parentVNode = parentComponent.vnode;\r\n                setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);\r\n            }\r\n        }\r\n    };\r\n    const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            const child = (children[i] = optimized\r\n                ? cloneIfMounted(children[i])\r\n                : normalizeVNode(children[i]));\r\n            patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n    };\r\n    const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const el = (n2.el = n1.el);\r\n        let { patchFlag, dynamicChildren, dirs } = n2;\r\n        // #1426 take the old vnode's patch flag into account since user may clone a\r\n        // compiler-generated vnode, which de-opts to FULL_PROPS\r\n        patchFlag |= n1.patchFlag & 16 /* FULL_PROPS */;\r\n        const oldProps = n1.props || EMPTY_OBJ;\r\n        const newProps = n2.props || EMPTY_OBJ;\r\n        let vnodeHook;\r\n        if ((vnodeHook = newProps.onVnodeBeforeUpdate)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n        }\r\n        if (dirs) {\r\n            invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (patchFlag > 0) {\r\n            // the presence of a patchFlag means this element's render code was\r\n            // generated by the compiler and can take the fast path.\r\n            // in this path old node and new node are guaranteed to have the same shape\r\n            // (i.e. at the exact same position in the source template)\r\n            if (patchFlag & 16 /* FULL_PROPS */) {\r\n                // element props contain dynamic keys, full diff needed\r\n                patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n            }\r\n            else {\r\n                // class\r\n                // this flag is matched when the element has dynamic class bindings.\r\n                if (patchFlag & 2 /* CLASS */) {\r\n                    if (oldProps.class !== newProps.class) {\r\n                        hostPatchProp(el, 'class', null, newProps.class, isSVG);\r\n                    }\r\n                }\r\n                // style\r\n                // this flag is matched when the element has dynamic style bindings\r\n                if (patchFlag & 4 /* STYLE */) {\r\n                    hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);\r\n                }\r\n                // props\r\n                // This flag is matched when the element has dynamic prop/attr bindings\r\n                // other than class and style. The keys of dynamic prop/attrs are saved for\r\n                // faster iteration.\r\n                // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\r\n                // bail out and go through a full diff because we need to unset the old key\r\n                if (patchFlag & 8 /* PROPS */) {\r\n                    // if the flag is present then dynamicProps must be non-null\r\n                    const propsToUpdate = n2.dynamicProps;\r\n                    for (let i = 0; i < propsToUpdate.length; i++) {\r\n                        const key = propsToUpdate[i];\r\n                        const prev = oldProps[key];\r\n                        const next = newProps[key];\r\n                        if (next !== prev ||\r\n                            (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                            hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // text\r\n            // This flag is matched when the element has only dynamic text children.\r\n            if (patchFlag & 1 /* TEXT */) {\r\n                if (n1.children !== n2.children) {\r\n                    hostSetElementText(el, n2.children);\r\n                }\r\n            }\r\n        }\r\n        else if (!optimized && dynamicChildren == null) {\r\n            // unoptimized, full diff\r\n            patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\r\n        }\r\n        const areChildrenSVG = isSVG && n2.type !== 'foreignObject';\r\n        if (dynamicChildren) {\r\n            patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);\r\n            if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                traverseStaticChildren(n1, n2);\r\n            }\r\n        }\r\n        else if (!optimized) {\r\n            // full diff\r\n            patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);\r\n        }\r\n        if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\r\n                dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    // The fast path for blocks.\r\n    const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {\r\n        for (let i = 0; i < newChildren.length; i++) {\r\n            const oldVNode = oldChildren[i];\r\n            const newVNode = newChildren[i];\r\n            // Determine the container (parent element) for the patch.\r\n            const container = \r\n            // oldVNode may be an errored async setup() component inside Suspense\r\n            // which will not have a mounted element\r\n            oldVNode.el &&\r\n                // - In the case of a Fragment, we need to provide the actual parent\r\n                // of the Fragment itself so it can move its children.\r\n                (oldVNode.type === Fragment ||\r\n                    // - In the case of different nodes, there is going to be a replacement\r\n                    // which also requires the correct parent container\r\n                    !isSameVNodeType(oldVNode, newVNode) ||\r\n                    // - In the case of a component, it could contain anything.\r\n                    oldVNode.shapeFlag & 6 /* COMPONENT */ ||\r\n                    oldVNode.shapeFlag & 64 /* TELEPORT */)\r\n                ? hostParentNode(oldVNode.el)\r\n                : // In other cases, the parent container is not actually used so we\r\n                    // just pass the block element here to avoid a DOM parentNode call.\r\n                    fallbackContainer;\r\n            patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);\r\n        }\r\n    };\r\n    const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\r\n        if (oldProps !== newProps) {\r\n            for (const key in newProps) {\r\n                // empty string is not valid prop\r\n                if (isReservedProp(key))\r\n                    continue;\r\n                const next = newProps[key];\r\n                const prev = oldProps[key];\r\n                if (next !== prev ||\r\n                    (hostForcePatchProp && hostForcePatchProp(el, key))) {\r\n                    hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                }\r\n            }\r\n            if (oldProps !== EMPTY_OBJ) {\r\n                for (const key in oldProps) {\r\n                    if (!isReservedProp(key) && !(key in newProps)) {\r\n                        hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        const fragmentStartAnchor = (n2.el = n1 ? n1.el : hostCreateText(''));\r\n        const fragmentEndAnchor = (n2.anchor = n1 ? n1.anchor : hostCreateText(''));\r\n        let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;\r\n        if (dynamicChildren) {\r\n            optimized = true;\r\n        }\r\n        // check if this is a slot fragment with :slotted scope ids\r\n        if (fragmentSlotScopeIds) {\r\n            slotScopeIds = slotScopeIds\r\n                ? slotScopeIds.concat(fragmentSlotScopeIds)\r\n                : fragmentSlotScopeIds;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            // HMR updated, force full diff\r\n            patchFlag = 0;\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            hostInsert(fragmentStartAnchor, container, anchor);\r\n            hostInsert(fragmentEndAnchor, container, anchor);\r\n            // a fragment can only have array children\r\n            // since they are either generated by the compiler, or implicitly created\r\n            // from arrays.\r\n            mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        else {\r\n            if (patchFlag > 0 &&\r\n                patchFlag & 64 /* STABLE_FRAGMENT */ &&\r\n                dynamicChildren &&\r\n                // #2715 the previous fragment could've been a BAILed one as a result\r\n                // of renderSlot() with no valid children\r\n                n1.dynamicChildren) {\r\n                // a stable fragment (template root or <template v-for>) doesn't need to\r\n                // patch children order, but it may contain dynamicChildren.\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                if ((process.env.NODE_ENV !== 'production') && parentComponent && parentComponent.type.__hmrId) {\r\n                    traverseStaticChildren(n1, n2);\r\n                }\r\n                else if (\r\n                // #2080 if the stable fragment has a key, it's a <template v-for> that may\r\n                //  get moved around. Make sure all root level vnodes inherit el.\r\n                // #2134 or if it's a component root, it may also get moved around\r\n                // as the component is being moved.\r\n                n2.key != null ||\r\n                    (parentComponent && n2 === parentComponent.subTree)) {\r\n                    traverseStaticChildren(n1, n2, true /* shallow */);\r\n                }\r\n            }\r\n            else {\r\n                // keyed / unkeyed, or manual fragments.\r\n                // for keyed & unkeyed, since they are compiler generated from v-for,\r\n                // each child is guaranteed to be a block so the fragment will never\r\n                // have dynamicChildren.\r\n                patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n        }\r\n    };\r\n    const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        n2.slotScopeIds = slotScopeIds;\r\n        if (n1 == null) {\r\n            if (n2.shapeFlag & 512 /* COMPONENT_KEPT_ALIVE */) {\r\n                parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\r\n            }\r\n            else {\r\n                mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\r\n            }\r\n        }\r\n        else {\r\n            updateComponent(n1, n2, optimized);\r\n        }\r\n    };\r\n    const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\r\n        const instance = (initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense));\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            registerHMR(instance);\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            pushWarningContext(initialVNode);\r\n            startMeasure(instance, `mount`);\r\n        }\r\n        // inject renderer internals for keepAlive\r\n        if (isKeepAlive(initialVNode)) {\r\n            instance.ctx.renderer = internals;\r\n        }\r\n        // resolve props and slots for setup context\r\n        {\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                startMeasure(instance, `init`);\r\n            }\r\n            setupComponent(instance);\r\n            if ((process.env.NODE_ENV !== 'production')) {\r\n                endMeasure(instance, `init`);\r\n            }\r\n        }\r\n        // setup() is async. This component relies on async logic to be resolved\r\n        // before proceeding\r\n        if (instance.asyncDep) {\r\n            parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);\r\n            // Give it a placeholder if this is not hydration\r\n            // TODO handle self-defined fallback\r\n            if (!initialVNode.el) {\r\n                const placeholder = (instance.subTree = createVNode(Comment$1));\r\n                processCommentNode(null, placeholder, container, anchor);\r\n            }\r\n            return;\r\n        }\r\n        setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            popWarningContext();\r\n            endMeasure(instance, `mount`);\r\n        }\r\n    };\r\n    const updateComponent = (n1, n2, optimized) => {\r\n        const instance = (n2.component = n1.component);\r\n        if (shouldUpdateComponent(n1, n2, optimized)) {\r\n            if (instance.asyncDep &&\r\n                !instance.asyncResolved) {\r\n                // async & still pending - just update props and slots\r\n                // since the component's reactive effect for render isn't set-up yet\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(n2);\r\n                }\r\n                updateComponentPreRender(instance, n2, optimized);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n                return;\r\n            }\r\n            else {\r\n                // normal update\r\n                instance.next = n2;\r\n                // in case the child component is also queued, remove it to avoid\r\n                // double updating the same child component in the same flush.\r\n                invalidateJob(instance.update);\r\n                // instance.update is the reactive effect runner.\r\n                instance.update();\r\n            }\r\n        }\r\n        else {\r\n            // no update needed. just copy over properties\r\n            n2.component = n1.component;\r\n            n2.el = n1.el;\r\n            instance.vnode = n2;\r\n        }\r\n    };\r\n    const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\r\n        // create reactive effect for rendering\r\n        instance.update = effect(function componentEffect() {\r\n            if (!instance.isMounted) {\r\n                let vnodeHook;\r\n                const { el, props } = initialVNode;\r\n                const { bm, m, parent } = instance;\r\n                // beforeMount hook\r\n                if (bm) {\r\n                    invokeArrayFns(bm);\r\n                }\r\n                // onVnodeBeforeMount\r\n                if ((vnodeHook = props && props.onVnodeBeforeMount)) {\r\n                    invokeVNodeHook(vnodeHook, parent, initialVNode);\r\n                }\r\n                if (el && hydrateNode) {\r\n                    // vnode has adopted host node - perform hydration instead of mount.\r\n                    const hydrateSubTree = () => {\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            startMeasure(instance, `render`);\r\n                        }\r\n                        instance.subTree = renderComponentRoot(instance);\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            endMeasure(instance, `render`);\r\n                        }\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            startMeasure(instance, `hydrate`);\r\n                        }\r\n                        hydrateNode(el, instance.subTree, instance, parentSuspense, null);\r\n                        if ((process.env.NODE_ENV !== 'production')) {\r\n                            endMeasure(instance, `hydrate`);\r\n                        }\r\n                    };\r\n                    if (isAsyncWrapper(initialVNode)) {\r\n                        initialVNode.type.__asyncLoader().then(\r\n                        // note: we are moving the render call into an async callback,\r\n                        // which means it won't track dependencies - but it's ok because\r\n                        // a server-rendered async wrapper is already in resolved state\r\n                        // and it will never need to change.\r\n                        () => !instance.isUnmounted && hydrateSubTree());\r\n                    }\r\n                    else {\r\n                        hydrateSubTree();\r\n                    }\r\n                }\r\n                else {\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `render`);\r\n                    }\r\n                    const subTree = (instance.subTree = renderComponentRoot(instance));\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `render`);\r\n                    }\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        startMeasure(instance, `patch`);\r\n                    }\r\n                    patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\r\n                    if ((process.env.NODE_ENV !== 'production')) {\r\n                        endMeasure(instance, `patch`);\r\n                    }\r\n                    initialVNode.el = subTree.el;\r\n                }\r\n                // mounted hook\r\n                if (m) {\r\n                    queuePostRenderEffect(m, parentSuspense);\r\n                }\r\n                // onVnodeMounted\r\n                if ((vnodeHook = props && props.onVnodeMounted)) {\r\n                    const scopedInitialVNode = initialVNode;\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);\r\n                }\r\n                // activated hook for keep-alive roots.\r\n                // #1742 activated hook must be accessed after first render\r\n                // since the hook may be injected by a child keep-alive\r\n                if (initialVNode.shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n                    instance.a && queuePostRenderEffect(instance.a, parentSuspense);\r\n                }\r\n                instance.isMounted = true;\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentAdded(instance);\r\n                }\r\n                // #2458: deference mount-only object parameters to prevent memleaks\r\n                initialVNode = container = anchor = null;\r\n            }\r\n            else {\r\n                // updateComponent\r\n                // This is triggered by mutation of component's own state (next: null)\r\n                // OR parent calling processComponent (next: VNode)\r\n                let { next, bu, u, parent, vnode } = instance;\r\n                let originNext = next;\r\n                let vnodeHook;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    pushWarningContext(next || instance.vnode);\r\n                }\r\n                if (next) {\r\n                    next.el = vnode.el;\r\n                    updateComponentPreRender(instance, next, optimized);\r\n                }\r\n                else {\r\n                    next = vnode;\r\n                }\r\n                // beforeUpdate hook\r\n                if (bu) {\r\n                    invokeArrayFns(bu);\r\n                }\r\n                // onVnodeBeforeUpdate\r\n                if ((vnodeHook = next.props && next.props.onVnodeBeforeUpdate)) {\r\n                    invokeVNodeHook(vnodeHook, parent, next, vnode);\r\n                }\r\n                // render\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `render`);\r\n                }\r\n                const nextTree = renderComponentRoot(instance);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `render`);\r\n                }\r\n                const prevTree = instance.subTree;\r\n                instance.subTree = nextTree;\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `patch`);\r\n                }\r\n                patch(prevTree, nextTree, \r\n                // parent may have changed if it's in a teleport\r\n                hostParentNode(prevTree.el), \r\n                // anchor may have changed if it's in a fragment\r\n                getNextHostNode(prevTree), instance, parentSuspense, isSVG);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `patch`);\r\n                }\r\n                next.el = nextTree.el;\r\n                if (originNext === null) {\r\n                    // self-triggered update. In case of HOC, update parent component\r\n                    // vnode el. HOC is indicated by parent instance's subTree pointing\r\n                    // to child component's vnode\r\n                    updateHOCHostEl(instance, nextTree.el);\r\n                }\r\n                // updated hook\r\n                if (u) {\r\n                    queuePostRenderEffect(u, parentSuspense);\r\n                }\r\n                // onVnodeUpdated\r\n                if ((vnodeHook = next.props && next.props.onVnodeUpdated)) {\r\n                    queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n                    devtoolsComponentUpdated(instance);\r\n                }\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    popWarningContext();\r\n                }\r\n            }\r\n        }, (process.env.NODE_ENV !== 'production') ? createDevEffectOptions(instance) : prodEffectOptions);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            // @ts-ignore\r\n            instance.update.ownerInstance = instance;\r\n        }\r\n    };\r\n    const updateComponentPreRender = (instance, nextVNode, optimized) => {\r\n        nextVNode.component = instance;\r\n        const prevProps = instance.vnode.props;\r\n        instance.vnode = nextVNode;\r\n        instance.next = null;\r\n        updateProps(instance, nextVNode.props, prevProps, optimized);\r\n        updateSlots(instance, nextVNode.children, optimized);\r\n        pauseTracking();\r\n        // props update may have triggered pre-flush watchers.\r\n        // flush them before the render update.\r\n        flushPreFlushCbs(undefined, instance.update);\r\n        resetTracking();\r\n    };\r\n    const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {\r\n        const c1 = n1 && n1.children;\r\n        const prevShapeFlag = n1 ? n1.shapeFlag : 0;\r\n        const c2 = n2.children;\r\n        const { patchFlag, shapeFlag } = n2;\r\n        // fast path\r\n        if (patchFlag > 0) {\r\n            if (patchFlag & 128 /* KEYED_FRAGMENT */) {\r\n                // this could be either fully-keyed or mixed (some keyed some not)\r\n                // presence of patchFlag means children are guaranteed to be arrays\r\n                patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n            else if (patchFlag & 256 /* UNKEYED_FRAGMENT */) {\r\n                // unkeyed\r\n                patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                return;\r\n            }\r\n        }\r\n        // children has 3 possibilities: text, array or no children.\r\n        if (shapeFlag & 8 /* TEXT_CHILDREN */) {\r\n            // text children fast path\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                unmountChildren(c1, parentComponent, parentSuspense);\r\n            }\r\n            if (c2 !== c1) {\r\n                hostSetElementText(container, c2);\r\n            }\r\n        }\r\n        else {\r\n            if (prevShapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                // prev children was array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    // two arrays, cannot assume anything, do full diff\r\n                    patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else {\r\n                    // no new children, just unmount old\r\n                    unmountChildren(c1, parentComponent, parentSuspense, true);\r\n                }\r\n            }\r\n            else {\r\n                // prev children was text OR null\r\n                // new children is array OR null\r\n                if (prevShapeFlag & 8 /* TEXT_CHILDREN */) {\r\n                    hostSetElementText(container, '');\r\n                }\r\n                // mount new if array\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        c1 = c1 || EMPTY_ARR;\r\n        c2 = c2 || EMPTY_ARR;\r\n        const oldLength = c1.length;\r\n        const newLength = c2.length;\r\n        const commonLength = Math.min(oldLength, newLength);\r\n        let i;\r\n        for (i = 0; i < commonLength; i++) {\r\n            const nextChild = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n        }\r\n        if (oldLength > newLength) {\r\n            // remove old\r\n            unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);\r\n        }\r\n        else {\r\n            // mount new\r\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);\r\n        }\r\n    };\r\n    // can be all-keyed or mixed\r\n    const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {\r\n        let i = 0;\r\n        const l2 = c2.length;\r\n        let e1 = c1.length - 1; // prev ending index\r\n        let e2 = l2 - 1; // next ending index\r\n        // 1. sync from start\r\n        // (a b) c\r\n        // (a b) d e\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[i];\r\n            const n2 = (c2[i] = optimized\r\n                ? cloneIfMounted(c2[i])\r\n                : normalizeVNode(c2[i]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        // 2. sync from end\r\n        // a (b c)\r\n        // d e (b c)\r\n        while (i <= e1 && i <= e2) {\r\n            const n1 = c1[e1];\r\n            const n2 = (c2[e2] = optimized\r\n                ? cloneIfMounted(c2[e2])\r\n                : normalizeVNode(c2[e2]));\r\n            if (isSameVNodeType(n1, n2)) {\r\n                patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n            e1--;\r\n            e2--;\r\n        }\r\n        // 3. common sequence + mount\r\n        // (a b)\r\n        // (a b) c\r\n        // i = 2, e1 = 1, e2 = 2\r\n        // (a b)\r\n        // c (a b)\r\n        // i = 0, e1 = -1, e2 = 0\r\n        if (i > e1) {\r\n            if (i <= e2) {\r\n                const nextPos = e2 + 1;\r\n                const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\r\n                while (i <= e2) {\r\n                    patch(null, (c2[i] = optimized\r\n                        ? cloneIfMounted(c2[i])\r\n                        : normalizeVNode(c2[i])), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    i++;\r\n                }\r\n            }\r\n        }\r\n        // 4. common sequence + unmount\r\n        // (a b) c\r\n        // (a b)\r\n        // i = 2, e1 = 2, e2 = 1\r\n        // a (b c)\r\n        // (b c)\r\n        // i = 0, e1 = 0, e2 = -1\r\n        else if (i > e2) {\r\n            while (i <= e1) {\r\n                unmount(c1[i], parentComponent, parentSuspense, true);\r\n                i++;\r\n            }\r\n        }\r\n        // 5. unknown sequence\r\n        // [i ... e1 + 1]: a b [c d e] f g\r\n        // [i ... e2 + 1]: a b [e d c h] f g\r\n        // i = 2, e1 = 4, e2 = 5\r\n        else {\r\n            const s1 = i; // prev starting index\r\n            const s2 = i; // next starting index\r\n            // 5.1 build key:index map for newChildren\r\n            const keyToNewIndexMap = new Map();\r\n            for (i = s2; i <= e2; i++) {\r\n                const nextChild = (c2[i] = optimized\r\n                    ? cloneIfMounted(c2[i])\r\n                    : normalizeVNode(c2[i]));\r\n                if (nextChild.key != null) {\r\n                    if ((process.env.NODE_ENV !== 'production') && keyToNewIndexMap.has(nextChild.key)) {\r\n                        warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\r\n                    }\r\n                    keyToNewIndexMap.set(nextChild.key, i);\r\n                }\r\n            }\r\n            // 5.2 loop through old children left to be patched and try to patch\r\n            // matching nodes & remove nodes that are no longer present\r\n            let j;\r\n            let patched = 0;\r\n            const toBePatched = e2 - s2 + 1;\r\n            let moved = false;\r\n            // used to track whether any node has moved\r\n            let maxNewIndexSoFar = 0;\r\n            // works as Map<newIndex, oldIndex>\r\n            // Note that oldIndex is offset by +1\r\n            // and oldIndex = 0 is a special value indicating the new node has\r\n            // no corresponding old node.\r\n            // used for determining longest stable subsequence\r\n            const newIndexToOldIndexMap = new Array(toBePatched);\r\n            for (i = 0; i < toBePatched; i++)\r\n                newIndexToOldIndexMap[i] = 0;\r\n            for (i = s1; i <= e1; i++) {\r\n                const prevChild = c1[i];\r\n                if (patched >= toBePatched) {\r\n                    // all new children have been patched so this can only be a removal\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                    continue;\r\n                }\r\n                let newIndex;\r\n                if (prevChild.key != null) {\r\n                    newIndex = keyToNewIndexMap.get(prevChild.key);\r\n                }\r\n                else {\r\n                    // key-less node, try to locate a key-less node of the same type\r\n                    for (j = s2; j <= e2; j++) {\r\n                        if (newIndexToOldIndexMap[j - s2] === 0 &&\r\n                            isSameVNodeType(prevChild, c2[j])) {\r\n                            newIndex = j;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (newIndex === undefined) {\r\n                    unmount(prevChild, parentComponent, parentSuspense, true);\r\n                }\r\n                else {\r\n                    newIndexToOldIndexMap[newIndex - s2] = i + 1;\r\n                    if (newIndex >= maxNewIndexSoFar) {\r\n                        maxNewIndexSoFar = newIndex;\r\n                    }\r\n                    else {\r\n                        moved = true;\r\n                    }\r\n                    patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                    patched++;\r\n                }\r\n            }\r\n            // 5.3 move and mount\r\n            // generate longest stable subsequence only when nodes have moved\r\n            const increasingNewIndexSequence = moved\r\n                ? getSequence(newIndexToOldIndexMap)\r\n                : EMPTY_ARR;\r\n            j = increasingNewIndexSequence.length - 1;\r\n            // looping backwards so that we can use last patched node as anchor\r\n            for (i = toBePatched - 1; i >= 0; i--) {\r\n                const nextIndex = s2 + i;\r\n                const nextChild = c2[nextIndex];\r\n                const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\r\n                if (newIndexToOldIndexMap[i] === 0) {\r\n                    // mount new\r\n                    patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n                else if (moved) {\r\n                    // move if:\r\n                    // There is no stable subsequence (e.g. a reverse)\r\n                    // OR current node is not among the stable sequence\r\n                    if (j < 0 || i !== increasingNewIndexSequence[j]) {\r\n                        move(nextChild, container, anchor, 2 /* REORDER */);\r\n                    }\r\n                    else {\r\n                        j--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\r\n        const { el, type, transition, children, shapeFlag } = vnode;\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            move(vnode.component.subTree, container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 128 /* SUSPENSE */) {\r\n            vnode.suspense.move(container, anchor, moveType);\r\n            return;\r\n        }\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type.move(vnode, container, anchor, internals);\r\n            return;\r\n        }\r\n        if (type === Fragment) {\r\n            hostInsert(el, container, anchor);\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, anchor, moveType);\r\n            }\r\n            hostInsert(vnode.anchor, container, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            moveStaticNode(vnode, container, anchor);\r\n            return;\r\n        }\r\n        // single nodes\r\n        const needTransition = moveType !== 2 /* REORDER */ &&\r\n            shapeFlag & 1 /* ELEMENT */ &&\r\n            transition;\r\n        if (needTransition) {\r\n            if (moveType === 0 /* ENTER */) {\r\n                transition.beforeEnter(el);\r\n                hostInsert(el, container, anchor);\r\n                queuePostRenderEffect(() => transition.enter(el), parentSuspense);\r\n            }\r\n            else {\r\n                const { leave, delayLeave, afterLeave } = transition;\r\n                const remove = () => hostInsert(el, container, anchor);\r\n                const performLeave = () => {\r\n                    leave(el, () => {\r\n                        remove();\r\n                        afterLeave && afterLeave();\r\n                    });\r\n                };\r\n                if (delayLeave) {\r\n                    delayLeave(el, remove, performLeave);\r\n                }\r\n                else {\r\n                    performLeave();\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            hostInsert(el, container, anchor);\r\n        }\r\n    };\r\n    const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {\r\n        const { type, props, ref, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;\r\n        // unset ref\r\n        if (ref != null) {\r\n            setRef(ref, null, parentSuspense, vnode, true);\r\n        }\r\n        if (shapeFlag & 256 /* COMPONENT_SHOULD_KEEP_ALIVE */) {\r\n            parentComponent.ctx.deactivate(vnode);\r\n            return;\r\n        }\r\n        const shouldInvokeDirs = shapeFlag & 1 /* ELEMENT */ && dirs;\r\n        let vnodeHook;\r\n        if ((vnodeHook = props && props.onVnodeBeforeUnmount)) {\r\n            invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n        }\r\n        if (shapeFlag & 6 /* COMPONENT */) {\r\n            unmountComponent(vnode.component, parentSuspense, doRemove);\r\n        }\r\n        else {\r\n            if (shapeFlag & 128 /* SUSPENSE */) {\r\n                vnode.suspense.unmount(parentSuspense, doRemove);\r\n                return;\r\n            }\r\n            if (shouldInvokeDirs) {\r\n                invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');\r\n            }\r\n            if (shapeFlag & 64 /* TELEPORT */) {\r\n                vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);\r\n            }\r\n            else if (dynamicChildren &&\r\n                // #1153: fast path should not be taken for non-stable (v-for) fragments\r\n                (type !== Fragment ||\r\n                    (patchFlag > 0 && patchFlag & 64 /* STABLE_FRAGMENT */))) {\r\n                // fast path for block nodes: only need to unmount dynamic children.\r\n                unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);\r\n            }\r\n            else if ((type === Fragment &&\r\n                (patchFlag & 128 /* KEYED_FRAGMENT */ ||\r\n                    patchFlag & 256 /* UNKEYED_FRAGMENT */)) ||\r\n                (!optimized && shapeFlag & 16 /* ARRAY_CHILDREN */)) {\r\n                unmountChildren(children, parentComponent, parentSuspense);\r\n            }\r\n            if (doRemove) {\r\n                remove(vnode);\r\n            }\r\n        }\r\n        if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {\r\n            queuePostRenderEffect(() => {\r\n                vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\r\n                shouldInvokeDirs &&\r\n                    invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');\r\n            }, parentSuspense);\r\n        }\r\n    };\r\n    const remove = vnode => {\r\n        const { type, el, anchor, transition } = vnode;\r\n        if (type === Fragment) {\r\n            removeFragment(el, anchor);\r\n            return;\r\n        }\r\n        if (type === Static) {\r\n            removeStaticNode(vnode);\r\n            return;\r\n        }\r\n        const performRemove = () => {\r\n            hostRemove(el);\r\n            if (transition && !transition.persisted && transition.afterLeave) {\r\n                transition.afterLeave();\r\n            }\r\n        };\r\n        if (vnode.shapeFlag & 1 /* ELEMENT */ &&\r\n            transition &&\r\n            !transition.persisted) {\r\n            const { leave, delayLeave } = transition;\r\n            const performLeave = () => leave(el, performRemove);\r\n            if (delayLeave) {\r\n                delayLeave(vnode.el, performRemove, performLeave);\r\n            }\r\n            else {\r\n                performLeave();\r\n            }\r\n        }\r\n        else {\r\n            performRemove();\r\n        }\r\n    };\r\n    const removeFragment = (cur, end) => {\r\n        // For fragments, directly remove all contained DOM nodes.\r\n        // (fragment child nodes cannot have transition)\r\n        let next;\r\n        while (cur !== end) {\r\n            next = hostNextSibling(cur);\r\n            hostRemove(cur);\r\n            cur = next;\r\n        }\r\n        hostRemove(end);\r\n    };\r\n    const unmountComponent = (instance, parentSuspense, doRemove) => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.type.__hmrId) {\r\n            unregisterHMR(instance);\r\n        }\r\n        const { bum, effects, update, subTree, um } = instance;\r\n        // beforeUnmount hook\r\n        if (bum) {\r\n            invokeArrayFns(bum);\r\n        }\r\n        if (effects) {\r\n            for (let i = 0; i < effects.length; i++) {\r\n                stop(effects[i]);\r\n            }\r\n        }\r\n        // update may be null if a component is unmounted before its async\r\n        // setup has resolved.\r\n        if (update) {\r\n            stop(update);\r\n            unmount(subTree, instance, parentSuspense, doRemove);\r\n        }\r\n        // unmounted hook\r\n        if (um) {\r\n            queuePostRenderEffect(um, parentSuspense);\r\n        }\r\n        queuePostRenderEffect(() => {\r\n            instance.isUnmounted = true;\r\n        }, parentSuspense);\r\n        // A component with async dep inside a pending suspense is unmounted before\r\n        // its async dep resolves. This should remove the dep from the suspense, and\r\n        // cause the suspense to resolve immediately if that was the last dep.\r\n        if (parentSuspense &&\r\n            parentSuspense.pendingBranch &&\r\n            !parentSuspense.isUnmounted &&\r\n            instance.asyncDep &&\r\n            !instance.asyncResolved &&\r\n            instance.suspenseId === parentSuspense.pendingId) {\r\n            parentSuspense.deps--;\r\n            if (parentSuspense.deps === 0) {\r\n                parentSuspense.resolve();\r\n            }\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            devtoolsComponentRemoved(instance);\r\n        }\r\n    };\r\n    const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {\r\n        for (let i = start; i < children.length; i++) {\r\n            unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);\r\n        }\r\n    };\r\n    const getNextHostNode = vnode => {\r\n        if (vnode.shapeFlag & 6 /* COMPONENT */) {\r\n            return getNextHostNode(vnode.component.subTree);\r\n        }\r\n        if (vnode.shapeFlag & 128 /* SUSPENSE */) {\r\n            return vnode.suspense.next();\r\n        }\r\n        return hostNextSibling((vnode.anchor || vnode.el));\r\n    };\r\n    const render = (vnode, container, isSVG) => {\r\n        if (vnode == null) {\r\n            if (container._vnode) {\r\n                unmount(container._vnode, null, null, true);\r\n            }\r\n        }\r\n        else {\r\n            patch(container._vnode || null, vnode, container, null, null, null, isSVG);\r\n        }\r\n        flushPostFlushCbs();\r\n        container._vnode = vnode;\r\n    };\r\n    const internals = {\r\n        p: patch,\r\n        um: unmount,\r\n        m: move,\r\n        r: remove,\r\n        mt: mountComponent,\r\n        mc: mountChildren,\r\n        pc: patchChildren,\r\n        pbc: patchBlockChildren,\r\n        n: getNextHostNode,\r\n        o: options\r\n    };\r\n    let hydrate;\r\n    let hydrateNode;\r\n    if (createHydrationFns) {\r\n        [hydrate, hydrateNode] = createHydrationFns(internals);\r\n    }\r\n    return {\r\n        render,\r\n        hydrate,\r\n        createApp: createAppAPI(render, hydrate)\r\n    };\r\n}\r\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\r\n    callWithAsyncErrorHandling(hook, instance, 7 /* VNODE_HOOK */, [\r\n        vnode,\r\n        prevVNode\r\n    ]);\r\n}\r\n/**\r\n * #1156\r\n * When a component is HMR-enabled, we need to make sure that all static nodes\r\n * inside a block also inherit the DOM element from the previous tree so that\r\n * HMR updates (which are full updates) can retrieve the element for patching.\r\n *\r\n * #2080\r\n * Inside keyed `template` fragment static children, if a fragment is moved,\r\n * the children will always moved so that need inherit el form previous nodes\r\n * to ensure correct moved position.\r\n */\r\nfunction traverseStaticChildren(n1, n2, shallow = false) {\r\n    const ch1 = n1.children;\r\n    const ch2 = n2.children;\r\n    if (isArray(ch1) && isArray(ch2)) {\r\n        for (let i = 0; i < ch1.length; i++) {\r\n            // this is only called in the optimized path so array children are\r\n            // guaranteed to be vnodes\r\n            const c1 = ch1[i];\r\n            let c2 = ch2[i];\r\n            if (c2.shapeFlag & 1 /* ELEMENT */ && !c2.dynamicChildren) {\r\n                if (c2.patchFlag <= 0 || c2.patchFlag === 32 /* HYDRATE_EVENTS */) {\r\n                    c2 = ch2[i] = cloneIfMounted(ch2[i]);\r\n                    c2.el = c1.el;\r\n                }\r\n                if (!shallow)\r\n                    traverseStaticChildren(c1, c2);\r\n            }\r\n            // also inherit for comment nodes, but not placeholders (e.g. v-if which\r\n            // would have received .el during block patch)\r\n            if ((process.env.NODE_ENV !== 'production') && c2.type === Comment$1 && !c2.el) {\r\n                c2.el = c1.el;\r\n            }\r\n        }\r\n    }\r\n}\r\n// https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction getSequence(arr) {\r\n    const p = arr.slice();\r\n    const result = [0];\r\n    let i, j, u, v, c;\r\n    const len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        const arrI = arr[i];\r\n        if (arrI !== 0) {\r\n            j = result[result.length - 1];\r\n            if (arr[j] < arrI) {\r\n                p[i] = j;\r\n                result.push(i);\r\n                continue;\r\n            }\r\n            u = 0;\r\n            v = result.length - 1;\r\n            while (u < v) {\r\n                c = ((u + v) / 2) | 0;\r\n                if (arr[result[c]] < arrI) {\r\n                    u = c + 1;\r\n                }\r\n                else {\r\n                    v = c;\r\n                }\r\n            }\r\n            if (arrI < arr[result[u]]) {\r\n                if (u > 0) {\r\n                    p[i] = result[u - 1];\r\n                }\r\n                result[u] = i;\r\n            }\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\n\nconst isTeleport = (type) => type.__isTeleport;\r\nconst isTeleportDisabled = (props) => props && (props.disabled || props.disabled === '');\r\nconst isTargetSVG = (target) => typeof SVGElement !== 'undefined' && target instanceof SVGElement;\r\nconst resolveTarget = (props, select) => {\r\n    const targetSelector = props && props.to;\r\n    if (isString(targetSelector)) {\r\n        if (!select) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Current renderer does not support string target for Teleports. ` +\r\n                    `(missing querySelector renderer option)`);\r\n            return null;\r\n        }\r\n        else {\r\n            const target = select(targetSelector);\r\n            if (!target) {\r\n                (process.env.NODE_ENV !== 'production') &&\r\n                    warn(`Failed to locate Teleport target with selector \"${targetSelector}\". ` +\r\n                        `Note the target element must exist before the component is mounted - ` +\r\n                        `i.e. the target cannot be rendered by the component itself, and ` +\r\n                        `ideally should be outside of the entire Vue component tree.`);\r\n            }\r\n            return target;\r\n        }\r\n    }\r\n    else {\r\n        if ((process.env.NODE_ENV !== 'production') && !targetSelector && !isTeleportDisabled(props)) {\r\n            warn(`Invalid Teleport target: ${targetSelector}`);\r\n        }\r\n        return targetSelector;\r\n    }\r\n};\r\nconst TeleportImpl = {\r\n    __isTeleport: true,\r\n    process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {\r\n        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;\r\n        const disabled = isTeleportDisabled(n2.props);\r\n        let { shapeFlag, children, dynamicChildren } = n2;\r\n        // #3302\r\n        // HMR updated, force full diff\r\n        if ((process.env.NODE_ENV !== 'production') && isHmrUpdating) {\r\n            optimized = false;\r\n            dynamicChildren = null;\r\n        }\r\n        if (n1 == null) {\r\n            // insert anchors in the main view\r\n            const placeholder = (n2.el = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport start')\r\n                : createText(''));\r\n            const mainAnchor = (n2.anchor = (process.env.NODE_ENV !== 'production')\r\n                ? createComment('teleport end')\r\n                : createText(''));\r\n            insert(placeholder, container, anchor);\r\n            insert(mainAnchor, container, anchor);\r\n            const target = (n2.target = resolveTarget(n2.props, querySelector));\r\n            const targetAnchor = (n2.targetAnchor = createText(''));\r\n            if (target) {\r\n                insert(targetAnchor, target);\r\n                // #2652 we could be teleporting from a non-SVG tree into an SVG tree\r\n                isSVG = isSVG || isTargetSVG(target);\r\n            }\r\n            else if ((process.env.NODE_ENV !== 'production') && !disabled) {\r\n                warn('Invalid Teleport target on mount:', target, `(${typeof target})`);\r\n            }\r\n            const mount = (container, anchor) => {\r\n                // Teleport *always* has Array children. This is enforced in both the\r\n                // compiler and vnode children normalization.\r\n                if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                    mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);\r\n                }\r\n            };\r\n            if (disabled) {\r\n                mount(container, mainAnchor);\r\n            }\r\n            else if (target) {\r\n                mount(target, targetAnchor);\r\n            }\r\n        }\r\n        else {\r\n            // update content\r\n            n2.el = n1.el;\r\n            const mainAnchor = (n2.anchor = n1.anchor);\r\n            const target = (n2.target = n1.target);\r\n            const targetAnchor = (n2.targetAnchor = n1.targetAnchor);\r\n            const wasDisabled = isTeleportDisabled(n1.props);\r\n            const currentContainer = wasDisabled ? container : target;\r\n            const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\r\n            isSVG = isSVG || isTargetSVG(target);\r\n            if (dynamicChildren) {\r\n                // fast path when the teleport happens to be a block root\r\n                patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);\r\n                // even in block tree mode we need to make sure all root-level nodes\r\n                // in the teleport inherit previous DOM references so that they can\r\n                // be moved in future patches.\r\n                traverseStaticChildren(n1, n2, true);\r\n            }\r\n            else if (!optimized) {\r\n                patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);\r\n            }\r\n            if (disabled) {\r\n                if (!wasDisabled) {\r\n                    // enabled -> disabled\r\n                    // move into main container\r\n                    moveTeleport(n2, container, mainAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n            else {\r\n                // target changed\r\n                if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\r\n                    const nextTarget = (n2.target = resolveTarget(n2.props, querySelector));\r\n                    if (nextTarget) {\r\n                        moveTeleport(n2, nextTarget, null, internals, 0 /* TARGET_CHANGE */);\r\n                    }\r\n                    else if ((process.env.NODE_ENV !== 'production')) {\r\n                        warn('Invalid Teleport target on update:', target, `(${typeof target})`);\r\n                    }\r\n                }\r\n                else if (wasDisabled) {\r\n                    // disabled -> enabled\r\n                    // move into teleport target\r\n                    moveTeleport(n2, target, targetAnchor, internals, 1 /* TOGGLE */);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {\r\n        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;\r\n        if (target) {\r\n            hostRemove(targetAnchor);\r\n        }\r\n        // an unmounted teleport should always remove its children if not disabled\r\n        if (doRemove || !isTeleportDisabled(props)) {\r\n            hostRemove(anchor);\r\n            if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n                for (let i = 0; i < children.length; i++) {\r\n                    const child = children[i];\r\n                    unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);\r\n                }\r\n            }\r\n        }\r\n    },\r\n    move: moveTeleport,\r\n    hydrate: hydrateTeleport\r\n};\r\nfunction moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2 /* REORDER */) {\r\n    // move target anchor if this is a target change.\r\n    if (moveType === 0 /* TARGET_CHANGE */) {\r\n        insert(vnode.targetAnchor, container, parentAnchor);\r\n    }\r\n    const { el, anchor, shapeFlag, children, props } = vnode;\r\n    const isReorder = moveType === 2 /* REORDER */;\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(el, container, parentAnchor);\r\n    }\r\n    // if this is a re-order and teleport is enabled (content is in target)\r\n    // do not move children. So the opposite is: only move children if this\r\n    // is not a reorder, or the teleport is disabled\r\n    if (!isReorder || isTeleportDisabled(props)) {\r\n        // Teleport has either Array children or no children.\r\n        if (shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            for (let i = 0; i < children.length; i++) {\r\n                move(children[i], container, parentAnchor, 2 /* REORDER */);\r\n            }\r\n        }\r\n    }\r\n    // move main view anchor if this is a re-order.\r\n    if (isReorder) {\r\n        insert(anchor, container, parentAnchor);\r\n    }\r\n}\r\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {\r\n    const target = (vnode.target = resolveTarget(vnode.props, querySelector));\r\n    if (target) {\r\n        // if multiple teleports rendered to the same target element, we need to\r\n        // pick up from where the last teleport finished instead of the first node\r\n        const targetNode = target._lpa || target.firstChild;\r\n        if (vnode.shapeFlag & 16 /* ARRAY_CHILDREN */) {\r\n            if (isTeleportDisabled(vnode.props)) {\r\n                vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);\r\n                vnode.targetAnchor = targetNode;\r\n            }\r\n            else {\r\n                vnode.anchor = nextSibling(node);\r\n                vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);\r\n            }\r\n            target._lpa =\r\n                vnode.targetAnchor && nextSibling(vnode.targetAnchor);\r\n        }\r\n    }\r\n    return vnode.anchor && nextSibling(vnode.anchor);\r\n}\r\n// Force-casted public typing for h and TSX props inference\r\nconst Teleport = TeleportImpl;\n\nconst COMPONENTS = 'components';\r\nconst DIRECTIVES = 'directives';\r\n/**\r\n * @private\r\n */\r\nfunction resolveComponent(name, maybeSelfReference) {\r\n    return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;\r\n}\r\nconst NULL_DYNAMIC_COMPONENT = Symbol();\r\n/**\r\n * @private\r\n */\r\nfunction resolveDynamicComponent(component) {\r\n    if (isString(component)) {\r\n        return resolveAsset(COMPONENTS, component, false) || component;\r\n    }\r\n    else {\r\n        // invalid types will fallthrough to createVNode and raise warning\r\n        return (component || NULL_DYNAMIC_COMPONENT);\r\n    }\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction resolveDirective(name) {\r\n    return resolveAsset(DIRECTIVES, name);\r\n}\r\n// implementation\r\nfunction resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {\r\n    const instance = currentRenderingInstance || currentInstance;\r\n    if (instance) {\r\n        const Component = instance.type;\r\n        // explicit self name has highest priority\r\n        if (type === COMPONENTS) {\r\n            const selfName = getComponentName(Component);\r\n            if (selfName &&\r\n                (selfName === name ||\r\n                    selfName === camelize(name) ||\r\n                    selfName === capitalize(camelize(name)))) {\r\n                return Component;\r\n            }\r\n        }\r\n        const res = \r\n        // local registration\r\n        // check instance[type] first which is resolved for options API\r\n        resolve(instance[type] || Component[type], name) ||\r\n            // global registration\r\n            resolve(instance.appContext[type], name);\r\n        if (!res && maybeSelfReference) {\r\n            // fallback to implicit self-reference\r\n            return Component;\r\n        }\r\n        if ((process.env.NODE_ENV !== 'production') && warnMissing && !res) {\r\n            warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);\r\n        }\r\n        return res;\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`resolve${capitalize(type.slice(0, -1))} ` +\r\n            `can only be used in render() or setup().`);\r\n    }\r\n}\r\nfunction resolve(registry, name) {\r\n    return (registry &&\r\n        (registry[name] ||\r\n            registry[camelize(name)] ||\r\n            registry[capitalize(camelize(name))]));\r\n}\n\nconst Fragment = Symbol((process.env.NODE_ENV !== 'production') ? 'Fragment' : undefined);\r\nconst Text = Symbol((process.env.NODE_ENV !== 'production') ? 'Text' : undefined);\r\nconst Comment$1 = Symbol((process.env.NODE_ENV !== 'production') ? 'Comment' : undefined);\r\nconst Static = Symbol((process.env.NODE_ENV !== 'production') ? 'Static' : undefined);\r\n// Since v-if and v-for are the two possible ways node structure can dynamically\r\n// change, once we consider v-if branches and each v-for fragment a block, we\r\n// can divide a template into nested blocks, and within each block the node\r\n// structure would be stable. This allows us to skip most children diffing\r\n// and only worry about the dynamic nodes (indicated by patch flags).\r\nconst blockStack = [];\r\nlet currentBlock = null;\r\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock('div', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\r\nfunction openBlock(disableTracking = false) {\r\n    blockStack.push((currentBlock = disableTracking ? null : []));\r\n}\r\nfunction closeBlock() {\r\n    blockStack.pop();\r\n    currentBlock = blockStack[blockStack.length - 1] || null;\r\n}\r\n// Whether we should be tracking dynamic child nodes inside a block.\r\n// Only tracks when this value is > 0\r\n// We are not using a simple boolean because this value may need to be\r\n// incremented/decremented by nested usage of v-once (see below)\r\nlet isBlockTreeEnabled = 1;\r\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\r\nfunction setBlockTracking(value) {\r\n    isBlockTreeEnabled += value;\r\n}\r\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\r\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\r\n    const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true /* isBlock: prevent a block from tracking itself */);\r\n    // save current block children on the block vnode\r\n    vnode.dynamicChildren =\r\n        isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;\r\n    // close block\r\n    closeBlock();\r\n    // a block is always going to be patched, so track it as a child of its\r\n    // parent block\r\n    if (isBlockTreeEnabled > 0 && currentBlock) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction isVNode(value) {\r\n    return value ? value.__v_isVNode === true : false;\r\n}\r\nfunction isSameVNodeType(n1, n2) {\r\n    if ((process.env.NODE_ENV !== 'production') &&\r\n        n2.shapeFlag & 6 /* COMPONENT */ &&\r\n        hmrDirtyComponents.has(n2.type)) {\r\n        // HMR only: if the component has been hot-updated, force a reload.\r\n        return false;\r\n    }\r\n    return n1.type === n2.type && n1.key === n2.key;\r\n}\r\nlet vnodeArgsTransformer;\r\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\r\nfunction transformVNodeArgs(transformer) {\r\n    vnodeArgsTransformer = transformer;\r\n}\r\nconst createVNodeWithArgsTransform = (...args) => {\r\n    return _createVNode(...(vnodeArgsTransformer\r\n        ? vnodeArgsTransformer(args, currentRenderingInstance)\r\n        : args));\r\n};\r\nconst InternalObjectKey = `__vInternal`;\r\nconst normalizeKey = ({ key }) => key != null ? key : null;\r\nconst normalizeRef = ({ ref }) => {\r\n    return (ref != null\r\n        ? isString(ref) || isRef(ref) || isFunction$1(ref)\r\n            ? { i: currentRenderingInstance, r: ref }\r\n            : ref\r\n        : null);\r\n};\r\nconst createVNode = ((process.env.NODE_ENV !== 'production')\r\n    ? createVNodeWithArgsTransform\r\n    : _createVNode);\r\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\r\n    if (!type || type === NULL_DYNAMIC_COMPONENT) {\r\n        if ((process.env.NODE_ENV !== 'production') && !type) {\r\n            warn(`Invalid vnode type when creating vnode: ${type}.`);\r\n        }\r\n        type = Comment$1;\r\n    }\r\n    if (isVNode(type)) {\r\n        // createVNode receiving an existing vnode. This happens in cases like\r\n        // <component :is=\"vnode\"/>\r\n        // #2078 make sure to merge refs during the clone instead of overwriting it\r\n        const cloned = cloneVNode(type, props, true /* mergeRef: true */);\r\n        if (children) {\r\n            normalizeChildren(cloned, children);\r\n        }\r\n        return cloned;\r\n    }\r\n    // class component normalization.\r\n    if (isClassComponent(type)) {\r\n        type = type.__vccOpts;\r\n    }\r\n    // class & style normalization.\r\n    if (props) {\r\n        // for reactive or proxy objects, we need to clone it to enable mutation.\r\n        if (isProxy(props) || InternalObjectKey in props) {\r\n            props = extend({}, props);\r\n        }\r\n        let { class: klass, style } = props;\r\n        if (klass && !isString(klass)) {\r\n            props.class = normalizeClass(klass);\r\n        }\r\n        if (isObject$1(style)) {\r\n            // reactive state objects need to be cloned since they are likely to be\r\n            // mutated\r\n            if (isProxy(style) && !isArray(style)) {\r\n                style = extend({}, style);\r\n            }\r\n            props.style = normalizeStyle(style);\r\n        }\r\n    }\r\n    // encode the vnode type information into a bitmap\r\n    const shapeFlag = isString(type)\r\n        ? 1 /* ELEMENT */\r\n        : isSuspense(type)\r\n            ? 128 /* SUSPENSE */\r\n            : isTeleport(type)\r\n                ? 64 /* TELEPORT */\r\n                : isObject$1(type)\r\n                    ? 4 /* STATEFUL_COMPONENT */\r\n                    : isFunction$1(type)\r\n                        ? 2 /* FUNCTIONAL_COMPONENT */\r\n                        : 0;\r\n    if ((process.env.NODE_ENV !== 'production') && shapeFlag & 4 /* STATEFUL_COMPONENT */ && isProxy(type)) {\r\n        type = toRaw(type);\r\n        warn(`Vue received a Component which was made a reactive object. This can ` +\r\n            `lead to unnecessary performance overhead, and should be avoided by ` +\r\n            `marking the component with \\`markRaw\\` or using \\`shallowRef\\` ` +\r\n            `instead of \\`ref\\`.`, `\\nComponent that was made reactive: `, type);\r\n    }\r\n    const vnode = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type,\r\n        props,\r\n        key: props && normalizeKey(props),\r\n        ref: props && normalizeRef(props),\r\n        scopeId: currentScopeId,\r\n        slotScopeIds: null,\r\n        children: null,\r\n        component: null,\r\n        suspense: null,\r\n        ssContent: null,\r\n        ssFallback: null,\r\n        dirs: null,\r\n        transition: null,\r\n        el: null,\r\n        anchor: null,\r\n        target: null,\r\n        targetAnchor: null,\r\n        shapeFlag,\r\n        patchFlag,\r\n        dynamicProps,\r\n        dynamicChildren: null,\r\n        appContext: null\r\n    };\r\n    // validate key\r\n    if ((process.env.NODE_ENV !== 'production') && vnode.key !== vnode.key) {\r\n        warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\r\n    }\r\n    normalizeChildren(vnode, children);\r\n    // normalize suspense children\r\n    if (shapeFlag & 128 /* SUSPENSE */) {\r\n        type.normalize(vnode);\r\n    }\r\n    if (isBlockTreeEnabled > 0 &&\r\n        // avoid a block node from tracking itself\r\n        !isBlockNode &&\r\n        // has current parent block\r\n        currentBlock &&\r\n        // presence of a patch flag indicates this node needs patching on updates.\r\n        // component nodes also should always be patched, because even if the\r\n        // component doesn't need to update, it needs to persist the instance on to\r\n        // the next vnode so that it can be properly unmounted later.\r\n        (patchFlag > 0 || shapeFlag & 6 /* COMPONENT */) &&\r\n        // the EVENTS flag is only for hydration and if it is the only flag, the\r\n        // vnode should not be considered dynamic due to handler caching.\r\n        patchFlag !== 32 /* HYDRATE_EVENTS */) {\r\n        currentBlock.push(vnode);\r\n    }\r\n    return vnode;\r\n}\r\nfunction cloneVNode(vnode, extraProps, mergeRef = false) {\r\n    // This is intentionally NOT using spread or extend to avoid the runtime\r\n    // key enumeration cost.\r\n    const { props, ref, patchFlag, children } = vnode;\r\n    const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;\r\n    const cloned = {\r\n        __v_isVNode: true,\r\n        __v_skip: true,\r\n        type: vnode.type,\r\n        props: mergedProps,\r\n        key: mergedProps && normalizeKey(mergedProps),\r\n        ref: extraProps && extraProps.ref\r\n            ? // #2078 in the case of <component :is=\"vnode\" ref=\"extra\"/>\r\n                // if the vnode itself already has a ref, cloneVNode will need to merge\r\n                // the refs so the single vnode can be set on multiple refs\r\n                mergeRef && ref\r\n                    ? isArray(ref)\r\n                        ? ref.concat(normalizeRef(extraProps))\r\n                        : [ref, normalizeRef(extraProps)]\r\n                    : normalizeRef(extraProps)\r\n            : ref,\r\n        scopeId: vnode.scopeId,\r\n        slotScopeIds: vnode.slotScopeIds,\r\n        children: (process.env.NODE_ENV !== 'production') && patchFlag === -1 /* HOISTED */ && isArray(children)\r\n            ? children.map(deepCloneVNode)\r\n            : children,\r\n        target: vnode.target,\r\n        targetAnchor: vnode.targetAnchor,\r\n        staticCount: vnode.staticCount,\r\n        staticCache: vnode.staticCache,\r\n        shapeFlag: vnode.shapeFlag,\r\n        // if the vnode is cloned with extra props, we can no longer assume its\r\n        // existing patch flag to be reliable and need to add the FULL_PROPS flag.\r\n        // note: perserve flag for fragments since they use the flag for children\r\n        // fast paths only.\r\n        patchFlag: extraProps && vnode.type !== Fragment\r\n            ? patchFlag === -1 // hoisted node\r\n                ? 16 /* FULL_PROPS */\r\n                : patchFlag | 16 /* FULL_PROPS */\r\n            : patchFlag,\r\n        dynamicProps: vnode.dynamicProps,\r\n        dynamicChildren: vnode.dynamicChildren,\r\n        appContext: vnode.appContext,\r\n        dirs: vnode.dirs,\r\n        transition: vnode.transition,\r\n        // These should technically only be non-null on mounted VNodes. However,\r\n        // they *should* be copied for kept-alive vnodes. So we just always copy\r\n        // them since them being non-null during a mount doesn't affect the logic as\r\n        // they will simply be overwritten.\r\n        component: vnode.component,\r\n        suspense: vnode.suspense,\r\n        ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),\r\n        ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),\r\n        el: vnode.el,\r\n        anchor: vnode.anchor\r\n    };\r\n    return cloned;\r\n}\r\n/**\r\n * Dev only, for HMR of hoisted vnodes reused in v-for\r\n * https://github.com/vitejs/vite/issues/2022\r\n */\r\nfunction deepCloneVNode(vnode) {\r\n    const cloned = cloneVNode(vnode);\r\n    if (isArray(vnode.children)) {\r\n        cloned.children = vnode.children.map(deepCloneVNode);\r\n    }\r\n    return cloned;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createTextVNode(text = ' ', flag = 0) {\r\n    return createVNode(Text, null, text, flag);\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createStaticVNode(content, numberOfNodes) {\r\n    // A static vnode can contain multiple stringified elements, and the number\r\n    // of elements is necessary for hydration.\r\n    const vnode = createVNode(Static, null, content);\r\n    vnode.staticCount = numberOfNodes;\r\n    return vnode;\r\n}\r\n/**\r\n * @private\r\n */\r\nfunction createCommentVNode(text = '', \r\n// when used as the v-else branch, the comment node must be created as a\r\n// block to ensure correct updates.\r\nasBlock = false) {\r\n    return asBlock\r\n        ? (openBlock(), createBlock(Comment$1, null, text))\r\n        : createVNode(Comment$1, null, text);\r\n}\r\nfunction normalizeVNode(child) {\r\n    if (child == null || typeof child === 'boolean') {\r\n        // empty placeholder\r\n        return createVNode(Comment$1);\r\n    }\r\n    else if (isArray(child)) {\r\n        // fragment\r\n        return createVNode(Fragment, null, \r\n        // #3666, avoid reference pollution when reusing vnode\r\n        child.slice());\r\n    }\r\n    else if (typeof child === 'object') {\r\n        // already vnode, this should be the most common since compiled templates\r\n        // always produce all-vnode children arrays\r\n        return cloneIfMounted(child);\r\n    }\r\n    else {\r\n        // strings and numbers\r\n        return createVNode(Text, null, String(child));\r\n    }\r\n}\r\n// optimized normalization for template-compiled render fns\r\nfunction cloneIfMounted(child) {\r\n    return child.el === null ? child : cloneVNode(child);\r\n}\r\nfunction normalizeChildren(vnode, children) {\r\n    let type = 0;\r\n    const { shapeFlag } = vnode;\r\n    if (children == null) {\r\n        children = null;\r\n    }\r\n    else if (isArray(children)) {\r\n        type = 16 /* ARRAY_CHILDREN */;\r\n    }\r\n    else if (typeof children === 'object') {\r\n        if (shapeFlag & 1 /* ELEMENT */ || shapeFlag & 64 /* TELEPORT */) {\r\n            // Normalize slot to plain children for plain element and Teleport\r\n            const slot = children.default;\r\n            if (slot) {\r\n                // _c marker is added by withCtx() indicating this is a compiled slot\r\n                slot._c && (slot._d = false);\r\n                normalizeChildren(vnode, slot());\r\n                slot._c && (slot._d = true);\r\n            }\r\n            return;\r\n        }\r\n        else {\r\n            type = 32 /* SLOTS_CHILDREN */;\r\n            const slotFlag = children._;\r\n            if (!slotFlag && !(InternalObjectKey in children)) {\r\n                children._ctx = currentRenderingInstance;\r\n            }\r\n            else if (slotFlag === 3 /* FORWARDED */ && currentRenderingInstance) {\r\n                // a child component receives forwarded slots from the parent.\r\n                // its slot type is determined by its parent's slot type.\r\n                if (currentRenderingInstance.slots._ === 1 /* STABLE */) {\r\n                    children._ = 1 /* STABLE */;\r\n                }\r\n                else {\r\n                    children._ = 2 /* DYNAMIC */;\r\n                    vnode.patchFlag |= 1024 /* DYNAMIC_SLOTS */;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (isFunction$1(children)) {\r\n        children = { default: children, _ctx: currentRenderingInstance };\r\n        type = 32 /* SLOTS_CHILDREN */;\r\n    }\r\n    else {\r\n        children = String(children);\r\n        // force teleport children to array so it can be moved around\r\n        if (shapeFlag & 64 /* TELEPORT */) {\r\n            type = 16 /* ARRAY_CHILDREN */;\r\n            children = [createTextVNode(children)];\r\n        }\r\n        else {\r\n            type = 8 /* TEXT_CHILDREN */;\r\n        }\r\n    }\r\n    vnode.children = children;\r\n    vnode.shapeFlag |= type;\r\n}\r\nfunction mergeProps(...args) {\r\n    const ret = extend({}, args[0]);\r\n    for (let i = 1; i < args.length; i++) {\r\n        const toMerge = args[i];\r\n        for (const key in toMerge) {\r\n            if (key === 'class') {\r\n                if (ret.class !== toMerge.class) {\r\n                    ret.class = normalizeClass([ret.class, toMerge.class]);\r\n                }\r\n            }\r\n            else if (key === 'style') {\r\n                ret.style = normalizeStyle([ret.style, toMerge.style]);\r\n            }\r\n            else if (isOn(key)) {\r\n                const existing = ret[key];\r\n                const incoming = toMerge[key];\r\n                if (existing !== incoming) {\r\n                    ret[key] = existing\r\n                        ? [].concat(existing, incoming)\r\n                        : incoming;\r\n                }\r\n            }\r\n            else if (key !== '') {\r\n                ret[key] = toMerge[key];\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Actual implementation\r\n */\r\nfunction renderList(source, renderItem) {\r\n    let ret;\r\n    if (isArray(source) || isString(source)) {\r\n        ret = new Array(source.length);\r\n        for (let i = 0, l = source.length; i < l; i++) {\r\n            ret[i] = renderItem(source[i], i);\r\n        }\r\n    }\r\n    else if (typeof source === 'number') {\r\n        if ((process.env.NODE_ENV !== 'production') && !Number.isInteger(source)) {\r\n            warn(`The v-for range expect an integer value but got ${source}.`);\r\n            return [];\r\n        }\r\n        ret = new Array(source);\r\n        for (let i = 0; i < source; i++) {\r\n            ret[i] = renderItem(i + 1, i);\r\n        }\r\n    }\r\n    else if (isObject$1(source)) {\r\n        if (source[Symbol.iterator]) {\r\n            ret = Array.from(source, renderItem);\r\n        }\r\n        else {\r\n            const keys = Object.keys(source);\r\n            ret = new Array(keys.length);\r\n            for (let i = 0, l = keys.length; i < l; i++) {\r\n                const key = keys[i];\r\n                ret[i] = renderItem(source[key], key, i);\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ret = [];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\r\nfunction createSlots(slots, dynamicSlots) {\r\n    for (let i = 0; i < dynamicSlots.length; i++) {\r\n        const slot = dynamicSlots[i];\r\n        // array of dynamic slot generated by <template v-for=\"...\" #[...]>\r\n        if (isArray(slot)) {\r\n            for (let j = 0; j < slot.length; j++) {\r\n                slots[slot[j].name] = slot[j].fn;\r\n            }\r\n        }\r\n        else if (slot) {\r\n            // conditional single slot generated by <template v-if=\"...\" #foo>\r\n            slots[slot.name] = slot.fn;\r\n        }\r\n    }\r\n    return slots;\r\n}\n\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\r\nfunction renderSlot(slots, name, props = {}, \r\n// this is not a user-facing function, so the fallback is always generated by\r\n// the compiler and guaranteed to be a function returning an array\r\nfallback, noSlotted) {\r\n    let slot = slots[name];\r\n    if ((process.env.NODE_ENV !== 'production') && slot && slot.length > 1) {\r\n        warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` +\r\n            `function. You need to mark this component with $dynamic-slots in the ` +\r\n            `parent template.`);\r\n        slot = () => [];\r\n    }\r\n    // a compiled slot disables block tracking by default to avoid manual\r\n    // invocation interfering with template-based block tracking, but in\r\n    // `renderSlot` we can be sure that it's template-based so we can force\r\n    // enable it.\r\n    if (slot && slot._c) {\r\n        slot._d = false;\r\n    }\r\n    openBlock();\r\n    const validSlotContent = slot && ensureValidVNode(slot(props));\r\n    const rendered = createBlock(Fragment, { key: props.key || `_${name}` }, validSlotContent || (fallback ? fallback() : []), validSlotContent && slots._ === 1 /* STABLE */\r\n        ? 64 /* STABLE_FRAGMENT */\r\n        : -2 /* BAIL */);\r\n    if (!noSlotted && rendered.scopeId) {\r\n        rendered.slotScopeIds = [rendered.scopeId + '-s'];\r\n    }\r\n    if (slot && slot._c) {\r\n        slot._d = true;\r\n    }\r\n    return rendered;\r\n}\r\nfunction ensureValidVNode(vnodes) {\r\n    return vnodes.some(child => {\r\n        if (!isVNode(child))\r\n            return true;\r\n        if (child.type === Comment$1)\r\n            return false;\r\n        if (child.type === Fragment &&\r\n            !ensureValidVNode(child.children))\r\n            return false;\r\n        return true;\r\n    })\r\n        ? vnodes\r\n        : null;\r\n}\n\n/**\r\n * For prefixing keys in v-on=\"obj\" with \"on\"\r\n * @private\r\n */\r\nfunction toHandlers(obj) {\r\n    const ret = {};\r\n    if ((process.env.NODE_ENV !== 'production') && !isObject$1(obj)) {\r\n        warn(`v-on with no argument expects an object value.`);\r\n        return ret;\r\n    }\r\n    for (const key in obj) {\r\n        ret[toHandlerKey(key)] = obj[key];\r\n    }\r\n    return ret;\r\n}\n\n/**\r\n * #2437 In Vue 3, functional components do not have a public instance proxy but\r\n * they exist in the internal parent chain. For code that relies on traversing\r\n * public $parent chains, skip functional ones and go to the parent instead.\r\n */\r\nconst getPublicInstance = (i) => {\r\n    if (!i)\r\n        return null;\r\n    if (isStatefulComponent(i))\r\n        return getExposeProxy(i) || i.proxy;\r\n    return getPublicInstance(i.parent);\r\n};\r\nconst publicPropertiesMap = extend(Object.create(null), {\r\n    $: i => i,\r\n    $el: i => i.vnode.el,\r\n    $data: i => i.data,\r\n    $props: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.props) : i.props),\r\n    $attrs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.attrs) : i.attrs),\r\n    $slots: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.slots) : i.slots),\r\n    $refs: i => ((process.env.NODE_ENV !== 'production') ? shallowReadonly(i.refs) : i.refs),\r\n    $parent: i => getPublicInstance(i.parent),\r\n    $root: i => getPublicInstance(i.root),\r\n    $emit: i => i.emit,\r\n    $options: i => (__VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type),\r\n    $forceUpdate: i => () => queueJob(i.update),\r\n    $nextTick: i => nextTick.bind(i.proxy),\r\n    $watch: i => (__VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP)\r\n});\r\nconst PublicInstanceProxyHandlers = {\r\n    get({ _: instance }, key) {\r\n        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;\r\n        // for internal formatters to know that this is a Vue instance\r\n        if ((process.env.NODE_ENV !== 'production') && key === '__isVue') {\r\n            return true;\r\n        }\r\n        // prioritize <script setup> bindings during dev.\r\n        // this allows even properties that start with _ or $ to be used - so that\r\n        // it aligns with the production behavior where the render fn is inlined and\r\n        // indeed has access to all declared variables.\r\n        if ((process.env.NODE_ENV !== 'production') &&\r\n            setupState !== EMPTY_OBJ &&\r\n            setupState.__isScriptSetup &&\r\n            hasOwn(setupState, key)) {\r\n            return setupState[key];\r\n        }\r\n        // data / props / ctx\r\n        // This getter gets called for every property access on the render context\r\n        // during render and is a major hotspot. The most expensive part of this\r\n        // is the multiple hasOwn() calls. It's much faster to do a simple property\r\n        // access on a plain object, so we use an accessCache object (with null\r\n        // prototype) to memoize what access type a key corresponds to.\r\n        let normalizedProps;\r\n        if (key[0] !== '$') {\r\n            const n = accessCache[key];\r\n            if (n !== undefined) {\r\n                switch (n) {\r\n                    case 0 /* SETUP */:\r\n                        return setupState[key];\r\n                    case 1 /* DATA */:\r\n                        return data[key];\r\n                    case 3 /* CONTEXT */:\r\n                        return ctx[key];\r\n                    case 2 /* PROPS */:\r\n                        return props[key];\r\n                    // default: just fallthrough\r\n                }\r\n            }\r\n            else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n                accessCache[key] = 0 /* SETUP */;\r\n                return setupState[key];\r\n            }\r\n            else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n                accessCache[key] = 1 /* DATA */;\r\n                return data[key];\r\n            }\r\n            else if (\r\n            // only cache other properties when instance has declared (thus stable)\r\n            // props\r\n            (normalizedProps = instance.propsOptions[0]) &&\r\n                hasOwn(normalizedProps, key)) {\r\n                accessCache[key] = 2 /* PROPS */;\r\n                return props[key];\r\n            }\r\n            else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n                accessCache[key] = 3 /* CONTEXT */;\r\n                return ctx[key];\r\n            }\r\n            else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {\r\n                accessCache[key] = 4 /* OTHER */;\r\n            }\r\n        }\r\n        const publicGetter = publicPropertiesMap[key];\r\n        let cssModule, globalProperties;\r\n        // public $xxx properties\r\n        if (publicGetter) {\r\n            if (key === '$attrs') {\r\n                track(instance, \"get\" /* GET */, key);\r\n                (process.env.NODE_ENV !== 'production') && markAttrsAccessed();\r\n            }\r\n            return publicGetter(instance);\r\n        }\r\n        else if (\r\n        // css module (injected by vue-loader)\r\n        (cssModule = type.__cssModules) &&\r\n            (cssModule = cssModule[key])) {\r\n            return cssModule;\r\n        }\r\n        else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {\r\n            // user may set custom properties to `this` that start with `$`\r\n            accessCache[key] = 3 /* CONTEXT */;\r\n            return ctx[key];\r\n        }\r\n        else if (\r\n        // global properties\r\n        ((globalProperties = appContext.config.globalProperties),\r\n            hasOwn(globalProperties, key))) {\r\n            {\r\n                return globalProperties[key];\r\n            }\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production') &&\r\n            currentRenderingInstance &&\r\n            (!isString(key) ||\r\n                // #1091 avoid internal isRef/isVNode checks on component instance leading\r\n                // to infinite warning loop\r\n                key.indexOf('__v') !== 0)) {\r\n            if (data !== EMPTY_OBJ &&\r\n                (key[0] === '$' || key[0] === '_') &&\r\n                hasOwn(data, key)) {\r\n                warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` +\r\n                    `character (\"$\" or \"_\") and is not proxied on the render context.`);\r\n            }\r\n            else if (instance === currentRenderingInstance) {\r\n                warn(`Property ${JSON.stringify(key)} was accessed during render ` +\r\n                    `but is not defined on instance.`);\r\n            }\r\n        }\r\n    },\r\n    set({ _: instance }, key, value) {\r\n        const { data, setupState, ctx } = instance;\r\n        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {\r\n            setupState[key] = value;\r\n        }\r\n        else if (data !== EMPTY_OBJ && hasOwn(data, key)) {\r\n            data[key] = value;\r\n        }\r\n        else if (hasOwn(instance.props, key)) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, instance);\r\n            return false;\r\n        }\r\n        if (key[0] === '$' && key.slice(1) in instance) {\r\n            (process.env.NODE_ENV !== 'production') &&\r\n                warn(`Attempting to mutate public property \"${key}\". ` +\r\n                    `Properties starting with $ are reserved and readonly.`, instance);\r\n            return false;\r\n        }\r\n        else {\r\n            if ((process.env.NODE_ENV !== 'production') && key in instance.appContext.config.globalProperties) {\r\n                Object.defineProperty(ctx, key, {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    value\r\n                });\r\n            }\r\n            else {\r\n                ctx[key] = value;\r\n            }\r\n        }\r\n        return true;\r\n    },\r\n    has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {\r\n        let normalizedProps;\r\n        return (accessCache[key] !== undefined ||\r\n            (data !== EMPTY_OBJ && hasOwn(data, key)) ||\r\n            (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) ||\r\n            ((normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key)) ||\r\n            hasOwn(ctx, key) ||\r\n            hasOwn(publicPropertiesMap, key) ||\r\n            hasOwn(appContext.config.globalProperties, key));\r\n    }\r\n};\r\nif ((process.env.NODE_ENV !== 'production') && !false) {\r\n    PublicInstanceProxyHandlers.ownKeys = (target) => {\r\n        warn(`Avoid app logic that relies on enumerating keys on a component instance. ` +\r\n            `The keys will be empty in production mode to avoid performance overhead.`);\r\n        return Reflect.ownKeys(target);\r\n    };\r\n}\r\nconst RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {\r\n    get(target, key) {\r\n        // fast path for unscopables when using `with` block\r\n        if (key === Symbol.unscopables) {\r\n            return;\r\n        }\r\n        return PublicInstanceProxyHandlers.get(target, key, target);\r\n    },\r\n    has(_, key) {\r\n        const has = key[0] !== '_' && !isGloballyWhitelisted(key);\r\n        if ((process.env.NODE_ENV !== 'production') && !has && PublicInstanceProxyHandlers.has(_, key)) {\r\n            warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\r\n        }\r\n        return has;\r\n    }\r\n});\r\n// In dev mode, the proxy target exposes the same properties as seen on `this`\r\n// for easier console inspection. In prod mode it will be an empty object so\r\n// these properties definitions can be skipped.\r\nfunction createRenderContext(instance) {\r\n    const target = {};\r\n    // expose internal instance for proxy handlers\r\n    Object.defineProperty(target, `_`, {\r\n        configurable: true,\r\n        enumerable: false,\r\n        get: () => instance\r\n    });\r\n    // expose public properties\r\n    Object.keys(publicPropertiesMap).forEach(key => {\r\n        Object.defineProperty(target, key, {\r\n            configurable: true,\r\n            enumerable: false,\r\n            get: () => publicPropertiesMap[key](instance),\r\n            // intercepted by the proxy so no need for implementation,\r\n            // but needed to prevent set errors\r\n            set: NOOP\r\n        });\r\n    });\r\n    return target;\r\n}\r\n// dev only\r\nfunction exposePropsOnRenderContext(instance) {\r\n    const { ctx, propsOptions: [propsOptions] } = instance;\r\n    if (propsOptions) {\r\n        Object.keys(propsOptions).forEach(key => {\r\n            Object.defineProperty(ctx, key, {\r\n                enumerable: true,\r\n                configurable: true,\r\n                get: () => instance.props[key],\r\n                set: NOOP\r\n            });\r\n        });\r\n    }\r\n}\r\n// dev only\r\nfunction exposeSetupStateOnRenderContext(instance) {\r\n    const { ctx, setupState } = instance;\r\n    Object.keys(toRaw(setupState)).forEach(key => {\r\n        if (!setupState.__isScriptSetup && (key[0] === '$' || key[0] === '_')) {\r\n            warn(`setup() return property ${JSON.stringify(key)} should not start with \"$\" or \"_\" ` +\r\n                `which are reserved prefixes for Vue internals.`);\r\n            return;\r\n        }\r\n        Object.defineProperty(ctx, key, {\r\n            enumerable: true,\r\n            configurable: true,\r\n            get: () => setupState[key],\r\n            set: NOOP\r\n        });\r\n    });\r\n}\n\nconst emptyAppContext = createAppContext();\r\nlet uid$1 = 0;\r\nfunction createComponentInstance(vnode, parent, suspense) {\r\n    const type = vnode.type;\r\n    // inherit parent app context - or - if root, adopt from root vnode\r\n    const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\r\n    const instance = {\r\n        uid: uid$1++,\r\n        vnode,\r\n        type,\r\n        parent,\r\n        appContext,\r\n        root: null,\r\n        next: null,\r\n        subTree: null,\r\n        update: null,\r\n        render: null,\r\n        proxy: null,\r\n        exposed: null,\r\n        exposeProxy: null,\r\n        withProxy: null,\r\n        effects: null,\r\n        provides: parent ? parent.provides : Object.create(appContext.provides),\r\n        accessCache: null,\r\n        renderCache: [],\r\n        // local resovled assets\r\n        components: null,\r\n        directives: null,\r\n        // resolved props and emits options\r\n        propsOptions: normalizePropsOptions(type, appContext),\r\n        emitsOptions: normalizeEmitsOptions(type, appContext),\r\n        // emit\r\n        emit: null,\r\n        emitted: null,\r\n        // props default value\r\n        propsDefaults: EMPTY_OBJ,\r\n        // inheritAttrs\r\n        inheritAttrs: type.inheritAttrs,\r\n        // state\r\n        ctx: EMPTY_OBJ,\r\n        data: EMPTY_OBJ,\r\n        props: EMPTY_OBJ,\r\n        attrs: EMPTY_OBJ,\r\n        slots: EMPTY_OBJ,\r\n        refs: EMPTY_OBJ,\r\n        setupState: EMPTY_OBJ,\r\n        setupContext: null,\r\n        // suspense related\r\n        suspense,\r\n        suspenseId: suspense ? suspense.pendingId : 0,\r\n        asyncDep: null,\r\n        asyncResolved: false,\r\n        // lifecycle hooks\r\n        // not using enums here because it results in computed properties\r\n        isMounted: false,\r\n        isUnmounted: false,\r\n        isDeactivated: false,\r\n        bc: null,\r\n        c: null,\r\n        bm: null,\r\n        m: null,\r\n        bu: null,\r\n        u: null,\r\n        um: null,\r\n        bum: null,\r\n        da: null,\r\n        a: null,\r\n        rtg: null,\r\n        rtc: null,\r\n        ec: null,\r\n        sp: null\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        instance.ctx = createRenderContext(instance);\r\n    }\r\n    else {\r\n        instance.ctx = { _: instance };\r\n    }\r\n    instance.root = parent ? parent.root : instance;\r\n    instance.emit = emit.bind(null, instance);\r\n    return instance;\r\n}\r\nlet currentInstance = null;\r\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\r\nconst setCurrentInstance = (instance) => {\r\n    currentInstance = instance;\r\n};\r\nconst isBuiltInTag = /*#__PURE__*/ makeMap('slot,component');\r\nfunction validateComponentName(name, config) {\r\n    const appIsNativeTag = config.isNativeTag || NO;\r\n    if (isBuiltInTag(name) || appIsNativeTag(name)) {\r\n        warn('Do not use built-in or reserved HTML elements as component id: ' + name);\r\n    }\r\n}\r\nfunction isStatefulComponent(instance) {\r\n    return instance.vnode.shapeFlag & 4 /* STATEFUL_COMPONENT */;\r\n}\r\nlet isInSSRComponentSetup = false;\r\nfunction setupComponent(instance, isSSR = false) {\r\n    isInSSRComponentSetup = isSSR;\r\n    const { props, children } = instance.vnode;\r\n    const isStateful = isStatefulComponent(instance);\r\n    initProps(instance, props, isStateful, isSSR);\r\n    initSlots(instance, children);\r\n    const setupResult = isStateful\r\n        ? setupStatefulComponent(instance, isSSR)\r\n        : undefined;\r\n    isInSSRComponentSetup = false;\r\n    return setupResult;\r\n}\r\nfunction setupStatefulComponent(instance, isSSR) {\r\n    const Component = instance.type;\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        if (Component.name) {\r\n            validateComponentName(Component.name, instance.appContext.config);\r\n        }\r\n        if (Component.components) {\r\n            const names = Object.keys(Component.components);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateComponentName(names[i], instance.appContext.config);\r\n            }\r\n        }\r\n        if (Component.directives) {\r\n            const names = Object.keys(Component.directives);\r\n            for (let i = 0; i < names.length; i++) {\r\n                validateDirectiveName(names[i]);\r\n            }\r\n        }\r\n        if (Component.compilerOptions && isRuntimeOnly()) {\r\n            warn(`\"compilerOptions\" is only supported when using a build of Vue that ` +\r\n                `includes the runtime compiler. Since you are using a runtime-only ` +\r\n                `build, the options should be passed via your build tool config instead.`);\r\n        }\r\n    }\r\n    // 0. create render proxy property access cache\r\n    instance.accessCache = Object.create(null);\r\n    // 1. create public instance / render proxy\r\n    // also mark it raw so it's never observed\r\n    instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        exposePropsOnRenderContext(instance);\r\n    }\r\n    // 2. call setup()\r\n    const { setup } = Component;\r\n    if (setup) {\r\n        const setupContext = (instance.setupContext =\r\n            setup.length > 1 ? createSetupContext(instance) : null);\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        const setupResult = callWithErrorHandling(setup, instance, 0 /* SETUP_FUNCTION */, [(process.env.NODE_ENV !== 'production') ? shallowReadonly(instance.props) : instance.props, setupContext]);\r\n        resetTracking();\r\n        currentInstance = null;\r\n        if (isPromise$1(setupResult)) {\r\n            const unsetInstance = () => {\r\n                currentInstance = null;\r\n            };\r\n            setupResult.then(unsetInstance, unsetInstance);\r\n            if (isSSR) {\r\n                // return the promise so server-renderer can wait on it\r\n                return setupResult\r\n                    .then((resolvedResult) => {\r\n                    handleSetupResult(instance, resolvedResult, isSSR);\r\n                })\r\n                    .catch(e => {\r\n                    handleError(e, instance, 0 /* SETUP_FUNCTION */);\r\n                });\r\n            }\r\n            else {\r\n                // async setup returned Promise.\r\n                // bail here and wait for re-entry.\r\n                instance.asyncDep = setupResult;\r\n            }\r\n        }\r\n        else {\r\n            handleSetupResult(instance, setupResult, isSSR);\r\n        }\r\n    }\r\n    else {\r\n        finishComponentSetup(instance, isSSR);\r\n    }\r\n}\r\nfunction handleSetupResult(instance, setupResult, isSSR) {\r\n    if (isFunction$1(setupResult)) {\r\n        // setup returned an inline render function\r\n        {\r\n            instance.render = setupResult;\r\n        }\r\n    }\r\n    else if (isObject$1(setupResult)) {\r\n        if ((process.env.NODE_ENV !== 'production') && isVNode(setupResult)) {\r\n            warn(`setup() should not return VNodes directly - ` +\r\n                `return a render function instead.`);\r\n        }\r\n        // setup returned bindings.\r\n        // assuming a render function compiled from template is present.\r\n        if ((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) {\r\n            instance.devtoolsRawSetupState = setupResult;\r\n        }\r\n        instance.setupState = proxyRefs(setupResult);\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            exposeSetupStateOnRenderContext(instance);\r\n        }\r\n    }\r\n    else if ((process.env.NODE_ENV !== 'production') && setupResult !== undefined) {\r\n        warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\r\n    }\r\n    finishComponentSetup(instance, isSSR);\r\n}\r\nlet compile;\r\n// dev only\r\nconst isRuntimeOnly = () => !compile;\r\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\r\nfunction registerRuntimeCompiler(_compile) {\r\n    compile = _compile;\r\n}\r\nfunction finishComponentSetup(instance, isSSR, skipOptions) {\r\n    const Component = instance.type;\r\n    // template / render function normalization\r\n    if (!instance.render) {\r\n        // could be set from setup()\r\n        if (compile && !Component.render) {\r\n            const template = Component.template;\r\n            if (template) {\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    startMeasure(instance, `compile`);\r\n                }\r\n                const { isCustomElement, compilerOptions } = instance.appContext.config;\r\n                const { delimiters, compilerOptions: componentCompilerOptions } = Component;\r\n                const finalCompilerOptions = extend(extend({\r\n                    isCustomElement,\r\n                    delimiters\r\n                }, compilerOptions), componentCompilerOptions);\r\n                Component.render = compile(template, finalCompilerOptions);\r\n                if ((process.env.NODE_ENV !== 'production')) {\r\n                    endMeasure(instance, `compile`);\r\n                }\r\n            }\r\n        }\r\n        instance.render = (Component.render || NOOP);\r\n        // for runtime-compiled render functions using `with` blocks, the render\r\n        // proxy used needs a different `has` handler which is more performant and\r\n        // also only allows a whitelist of globals to fallthrough.\r\n        if (instance.render._rc) {\r\n            instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\r\n        }\r\n    }\r\n    // support for 2.x options\r\n    if (__VUE_OPTIONS_API__ && !(false )) {\r\n        currentInstance = instance;\r\n        pauseTracking();\r\n        applyOptions(instance);\r\n        resetTracking();\r\n        currentInstance = null;\r\n    }\r\n    // warn missing template/render\r\n    // the runtime compilation of template in SSR is done by server-render\r\n    if ((process.env.NODE_ENV !== 'production') && !Component.render && instance.render === NOOP && !isSSR) {\r\n        /* istanbul ignore if */\r\n        if (!compile && Component.template) {\r\n            warn(`Component provided template option but ` +\r\n                `runtime compilation is not supported in this build of Vue.` +\r\n                (` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\r\n                    ) /* should not happen */);\r\n        }\r\n        else {\r\n            warn(`Component is missing template or render function.`);\r\n        }\r\n    }\r\n}\r\nconst attrDevProxyHandlers = {\r\n    get: (target, key) => {\r\n        markAttrsAccessed();\r\n        return target[key];\r\n    },\r\n    set: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    },\r\n    deleteProperty: () => {\r\n        warn(`setupContext.attrs is readonly.`);\r\n        return false;\r\n    }\r\n};\r\nfunction createSetupContext(instance) {\r\n    const expose = exposed => {\r\n        if ((process.env.NODE_ENV !== 'production') && instance.exposed) {\r\n            warn(`expose() should be called only once per setup().`);\r\n        }\r\n        instance.exposed = exposed || {};\r\n    };\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        let attrs;\r\n        // We use getters in dev in case libs like test-utils overwrite instance\r\n        // properties (overwrites should not be done in prod)\r\n        return Object.freeze({\r\n            get attrs() {\r\n                return (attrs || (attrs = new Proxy(instance.attrs, attrDevProxyHandlers)));\r\n            },\r\n            get slots() {\r\n                return shallowReadonly(instance.slots);\r\n            },\r\n            get emit() {\r\n                return (event, ...args) => instance.emit(event, ...args);\r\n            },\r\n            expose\r\n        });\r\n    }\r\n    else {\r\n        return {\r\n            attrs: instance.attrs,\r\n            slots: instance.slots,\r\n            emit: instance.emit,\r\n            expose\r\n        };\r\n    }\r\n}\r\nfunction getExposeProxy(instance) {\r\n    if (instance.exposed) {\r\n        return (instance.exposeProxy ||\r\n            (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {\r\n                get(target, key) {\r\n                    if (key in target) {\r\n                        return target[key];\r\n                    }\r\n                    else if (key in publicPropertiesMap) {\r\n                        return publicPropertiesMap[key](instance);\r\n                    }\r\n                }\r\n            })));\r\n    }\r\n}\r\n// record effects created during a component's setup() so that they can be\r\n// stopped when the component unmounts\r\nfunction recordInstanceBoundEffect(effect, instance = currentInstance) {\r\n    if (instance) {\r\n        (instance.effects || (instance.effects = [])).push(effect);\r\n    }\r\n}\r\nconst classifyRE = /(?:^|[-_])(\\w)/g;\r\nconst classify = (str) => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\r\nfunction getComponentName(Component) {\r\n    return isFunction$1(Component)\r\n        ? Component.displayName || Component.name\r\n        : Component.name;\r\n}\r\n/* istanbul ignore next */\r\nfunction formatComponentName(instance, Component, isRoot = false) {\r\n    let name = getComponentName(Component);\r\n    if (!name && Component.__file) {\r\n        const match = Component.__file.match(/([^/\\\\]+)\\.\\w+$/);\r\n        if (match) {\r\n            name = match[1];\r\n        }\r\n    }\r\n    if (!name && instance && instance.parent) {\r\n        // try to infer the name based on reverse resolution\r\n        const inferFromRegistry = (registry) => {\r\n            for (const key in registry) {\r\n                if (registry[key] === Component) {\r\n                    return key;\r\n                }\r\n            }\r\n        };\r\n        name =\r\n            inferFromRegistry(instance.components ||\r\n                instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\r\n    }\r\n    return name ? classify(name) : isRoot ? `App` : `Anonymous`;\r\n}\r\nfunction isClassComponent(value) {\r\n    return isFunction$1(value) && '__vccOpts' in value;\r\n}\n\nfunction computed(getterOrOptions) {\r\n    const c = computed$1(getterOrOptions);\r\n    recordInstanceBoundEffect(c.effect);\r\n    return c;\r\n}\n\n(process.env.NODE_ENV !== 'production')\r\n    ? Object.freeze({})\r\n    : {};\r\n(process.env.NODE_ENV !== 'production') ? Object.freeze([]) : [];\r\nconst isFunction = (val) => typeof val === 'function';\r\nconst isObject = (val) => val !== null && typeof val === 'object';\r\nconst isPromise = (val) => {\r\n    return isObject(val) && isFunction(val.then) && isFunction(val.catch);\r\n};\n\n// dev only\r\nconst warnRuntimeUsage = (method) => warn(`${method}() is a compiler-hint helper that is only usable inside ` +\r\n    `<script setup> of a single file component. Its arguments should be ` +\r\n    `compiled away and passing it at runtime has no effect.`);\r\n// implementation\r\nfunction defineProps() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineProps`);\r\n    }\r\n    return null;\r\n}\r\n// implementation\r\nfunction defineEmits() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineEmits`);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @deprecated use `defineEmits` instead.\r\n */\r\nconst defineEmit = defineEmits;\r\n/**\r\n * Vue `<script setup>` compiler macro for declaring a component's exposed\r\n * instance properties when it is accessed by a parent component via template\r\n * refs.\r\n *\r\n * `<script setup>` components are closed by default - i.e. varaibles inside\r\n * the `<script setup>` scope is not exposed to parent unless explicitly exposed\r\n * via `defineExpose`.\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the\r\n * output and should **not** be actually called at runtime.\r\n */\r\nfunction defineExpose(exposed) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`defineExpose`);\r\n    }\r\n}\r\n/**\r\n * Vue `<script setup>` compiler macro for providing props default values when\r\n * using type-based `defineProps` decalration.\r\n *\r\n * Example usage:\r\n * ```ts\r\n * withDefaults(defineProps<{\r\n *   size?: number\r\n *   labels?: string[]\r\n * }>(), {\r\n *   size: 3,\r\n *   labels: () => ['default label']\r\n * })\r\n * ```\r\n *\r\n * This is only usable inside `<script setup>`, is compiled away in the output\r\n * and should **not** be actually called at runtime.\r\n */\r\nfunction withDefaults(props, defaults) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warnRuntimeUsage(`withDefaults`);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * @deprecated use `useSlots` and `useAttrs` instead.\r\n */\r\nfunction useContext() {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        warn(`\\`useContext()\\` has been deprecated and will be removed in the ` +\r\n            `next minor release. Use \\`useSlots()\\` and \\`useAttrs()\\` instead.`);\r\n    }\r\n    return getContext();\r\n}\r\nfunction useSlots() {\r\n    return getContext().slots;\r\n}\r\nfunction useAttrs() {\r\n    return getContext().attrs;\r\n}\r\nfunction getContext() {\r\n    const i = getCurrentInstance();\r\n    if ((process.env.NODE_ENV !== 'production') && !i) {\r\n        warn(`useContext() called without active instance.`);\r\n    }\r\n    return i.setupContext || (i.setupContext = createSetupContext(i));\r\n}\r\n/**\r\n * Runtime helper for merging default declarations. Imported by compiled code\r\n * only.\r\n * @internal\r\n */\r\nfunction mergeDefaults(\r\n// the base props is compiler-generated and guaranteed to be in this shape.\r\nprops, defaults) {\r\n    for (const key in defaults) {\r\n        const val = props[key];\r\n        if (val) {\r\n            val.default = defaults[key];\r\n        }\r\n        else if (val === null) {\r\n            props[key] = { default: defaults[key] };\r\n        }\r\n        else if ((process.env.NODE_ENV !== 'production')) {\r\n            warn(`props default key \"${key}\" has no corresponding declaration.`);\r\n        }\r\n    }\r\n    return props;\r\n}\r\n/**\r\n * Runtime helper for storing and resuming current instance context in\r\n * async setup().\r\n */\r\nfunction withAsyncContext(awaitable) {\r\n    const ctx = getCurrentInstance();\r\n    setCurrentInstance(null); // unset after storing instance\r\n    if ((process.env.NODE_ENV !== 'production') && !ctx) {\r\n        warn(`withAsyncContext() called when there is no active context instance.`);\r\n    }\r\n    return isPromise(awaitable)\r\n        ? awaitable.then(res => {\r\n            setCurrentInstance(ctx);\r\n            return res;\r\n        }, err => {\r\n            setCurrentInstance(ctx);\r\n            throw err;\r\n        })\r\n        : awaitable;\r\n}\n\n// Actual implementation\r\nfunction h(type, propsOrChildren, children) {\r\n    const l = arguments.length;\r\n    if (l === 2) {\r\n        if (isObject$1(propsOrChildren) && !isArray(propsOrChildren)) {\r\n            // single vnode without props\r\n            if (isVNode(propsOrChildren)) {\r\n                return createVNode(type, null, [propsOrChildren]);\r\n            }\r\n            // props without children\r\n            return createVNode(type, propsOrChildren);\r\n        }\r\n        else {\r\n            // omit props\r\n            return createVNode(type, null, propsOrChildren);\r\n        }\r\n    }\r\n    else {\r\n        if (l > 3) {\r\n            children = Array.prototype.slice.call(arguments, 2);\r\n        }\r\n        else if (l === 3 && isVNode(children)) {\r\n            children = [children];\r\n        }\r\n        return createVNode(type, propsOrChildren, children);\r\n    }\r\n}\n\nconst ssrContextKey = Symbol((process.env.NODE_ENV !== 'production') ? `ssrContext` : ``);\r\nconst useSSRContext = () => {\r\n    {\r\n        const ctx = inject(ssrContextKey);\r\n        if (!ctx) {\r\n            warn(`Server rendering context not provided. Make sure to only call ` +\r\n                `useSSRContext() conditionally in the server build.`);\r\n        }\r\n        return ctx;\r\n    }\r\n};\n\nfunction initCustomFormatter() {\r\n    /* eslint-disable no-restricted-globals */\r\n    if (!(process.env.NODE_ENV !== 'production') || typeof window === 'undefined') {\r\n        return;\r\n    }\r\n    const vueStyle = { style: 'color:#3ba776' };\r\n    const numberStyle = { style: 'color:#0b1bc9' };\r\n    const stringStyle = { style: 'color:#b62e24' };\r\n    const keywordStyle = { style: 'color:#9d288c' };\r\n    // custom formatter for Chrome\r\n    // https://www.mattzeunert.com/2016/02/19/custom-chrome-devtools-object-formatters.html\r\n    const formatter = {\r\n        header(obj) {\r\n            // TODO also format ComponentPublicInstance & ctx.slots/attrs in setup\r\n            if (!isObject$1(obj)) {\r\n                return null;\r\n            }\r\n            if (obj.__isVue) {\r\n                return ['div', vueStyle, `VueInstance`];\r\n            }\r\n            else if (isRef(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, genRefFlag(obj)],\r\n                    '<',\r\n                    formatValue(obj.value),\r\n                    `>`\r\n                ];\r\n            }\r\n            else if (isReactive(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Reactive'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    `>${isReadonly(obj) ? ` (readonly)` : ``}`\r\n                ];\r\n            }\r\n            else if (isReadonly(obj)) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ['span', vueStyle, 'Readonly'],\r\n                    '<',\r\n                    formatValue(obj),\r\n                    '>'\r\n                ];\r\n            }\r\n            return null;\r\n        },\r\n        hasBody(obj) {\r\n            return obj && obj.__isVue;\r\n        },\r\n        body(obj) {\r\n            if (obj && obj.__isVue) {\r\n                return [\r\n                    'div',\r\n                    {},\r\n                    ...formatInstance(obj.$)\r\n                ];\r\n            }\r\n        }\r\n    };\r\n    function formatInstance(instance) {\r\n        const blocks = [];\r\n        if (instance.type.props && instance.props) {\r\n            blocks.push(createInstanceBlock('props', toRaw(instance.props)));\r\n        }\r\n        if (instance.setupState !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('setup', instance.setupState));\r\n        }\r\n        if (instance.data !== EMPTY_OBJ) {\r\n            blocks.push(createInstanceBlock('data', toRaw(instance.data)));\r\n        }\r\n        const computed = extractKeys(instance, 'computed');\r\n        if (computed) {\r\n            blocks.push(createInstanceBlock('computed', computed));\r\n        }\r\n        const injected = extractKeys(instance, 'inject');\r\n        if (injected) {\r\n            blocks.push(createInstanceBlock('injected', injected));\r\n        }\r\n        blocks.push([\r\n            'div',\r\n            {},\r\n            [\r\n                'span',\r\n                {\r\n                    style: keywordStyle.style + ';opacity:0.66'\r\n                },\r\n                '$ (internal): '\r\n            ],\r\n            ['object', { object: instance }]\r\n        ]);\r\n        return blocks;\r\n    }\r\n    function createInstanceBlock(type, target) {\r\n        target = extend({}, target);\r\n        if (!Object.keys(target).length) {\r\n            return ['span', {}];\r\n        }\r\n        return [\r\n            'div',\r\n            { style: 'line-height:1.25em;margin-bottom:0.6em' },\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'color:#476582'\r\n                },\r\n                type\r\n            ],\r\n            [\r\n                'div',\r\n                {\r\n                    style: 'padding-left:1.25em'\r\n                },\r\n                ...Object.keys(target).map(key => {\r\n                    return [\r\n                        'div',\r\n                        {},\r\n                        ['span', keywordStyle, key + ': '],\r\n                        formatValue(target[key], false)\r\n                    ];\r\n                })\r\n            ]\r\n        ];\r\n    }\r\n    function formatValue(v, asRaw = true) {\r\n        if (typeof v === 'number') {\r\n            return ['span', numberStyle, v];\r\n        }\r\n        else if (typeof v === 'string') {\r\n            return ['span', stringStyle, JSON.stringify(v)];\r\n        }\r\n        else if (typeof v === 'boolean') {\r\n            return ['span', keywordStyle, v];\r\n        }\r\n        else if (isObject$1(v)) {\r\n            return ['object', { object: asRaw ? toRaw(v) : v }];\r\n        }\r\n        else {\r\n            return ['span', stringStyle, String(v)];\r\n        }\r\n    }\r\n    function extractKeys(instance, type) {\r\n        const Comp = instance.type;\r\n        if (isFunction$1(Comp)) {\r\n            return;\r\n        }\r\n        const extracted = {};\r\n        for (const key in instance.ctx) {\r\n            if (isKeyOfType(Comp, key, type)) {\r\n                extracted[key] = instance.ctx[key];\r\n            }\r\n        }\r\n        return extracted;\r\n    }\r\n    function isKeyOfType(Comp, key, type) {\r\n        const opts = Comp[type];\r\n        if ((isArray(opts) && opts.includes(key)) ||\r\n            (isObject$1(opts) && key in opts)) {\r\n            return true;\r\n        }\r\n        if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {\r\n            return true;\r\n        }\r\n        if (Comp.mixins && Comp.mixins.some(m => isKeyOfType(m, key, type))) {\r\n            return true;\r\n        }\r\n    }\r\n    function genRefFlag(v) {\r\n        if (v._shallow) {\r\n            return `ShallowRef`;\r\n        }\r\n        if (v.effect) {\r\n            return `ComputedRef`;\r\n        }\r\n        return `Ref`;\r\n    }\r\n    if (window.devtoolsFormatters) {\r\n        window.devtoolsFormatters.push(formatter);\r\n    }\r\n    else {\r\n        window.devtoolsFormatters = [formatter];\r\n    }\r\n}\n\n// Core API ------------------------------------------------------------------\r\nconst version = \"3.1.4\";\r\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\r\nconst ssrUtils = (null);\r\n/**\r\n * @internal only exposed in compat builds\r\n */\r\nconst resolveFilter = null;\r\n/**\r\n * @internal only exposed in compat builds.\r\n */\r\nconst compatUtils = (null);\n\nexport { BaseTransition, Comment$1 as Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, compatUtils, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, defineEmit, defineEmits, defineExpose, defineProps, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, initCustomFormatter, inject, isRuntimeOnly, isVNode, mergeDefaults, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onServerPrefetch, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveFilter, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useAttrs, useContext, useSSRContext, useSlots, useTransitionState, version, warn, watch, watchEffect, withAsyncContext, withCtx, withDefaults, withDirectives, withScopeId };\n"],"sourceRoot":""}